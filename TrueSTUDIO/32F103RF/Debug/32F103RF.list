
32F103RF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004254  08004254  00014254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000180  20000000  08004258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003214  20000180  080043d8  00020180  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003394  080043d8  00023394  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000a1ef  00000000  00000000  000201a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001f03d  00000000  00000000  0002a398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000485d  00000000  00000000  000493d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000fe0  00000000  00000000  0004dc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001858  00000000  00000000  0004ec18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c978  00000000  00000000  00050470  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000058bd  00000000  00000000  0005cde8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000626a5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d54  00000000  00000000  00062724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000180 	.word	0x20000180
 8000200:	00000000 	.word	0x00000000
 8000204:	080041b4 	.word	0x080041b4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000184 	.word	0x20000184
 8000220:	080041b4 	.word	0x080041b4

08000224 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000224:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000226:	e003      	b.n	8000230 <LoopCopyDataInit>

08000228 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000228:	4b0b      	ldr	r3, [pc, #44]	; (8000258 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800022a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800022c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800022e:	3104      	adds	r1, #4

08000230 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000230:	480a      	ldr	r0, [pc, #40]	; (800025c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000232:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000234:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000236:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000238:	d3f6      	bcc.n	8000228 <CopyDataInit>
  ldr r2, =_sbss
 800023a:	4a0a      	ldr	r2, [pc, #40]	; (8000264 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800023c:	e002      	b.n	8000244 <LoopFillZerobss>

0800023e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000240:	f842 3b04 	str.w	r3, [r2], #4

08000244 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000246:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000248:	d3f9      	bcc.n	800023e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800024a:	f000 fc3f 	bl	8000acc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800024e:	f003 ff85 	bl	800415c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f000 f89b 	bl	800038c <main>
  bx lr
 8000256:	4770      	bx	lr
  ldr r3, =_sidata
 8000258:	08004258 	.word	0x08004258
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000260:	20000180 	.word	0x20000180
  ldr r2, =_sbss
 8000264:	20000180 	.word	0x20000180
  ldr r3, = _ebss
 8000268:	20003394 	.word	0x20003394

0800026c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800026c:	e7fe      	b.n	800026c <ADC1_2_IRQHandler>
	...

08000270 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8000270:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 8000272:	2001      	movs	r0, #1
 8000274:	f88d 0007 	strb.w	r0, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 8000278:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800027c:	4283      	cmp	r3, r0
 800027e:	d10b      	bne.n	8000298 <BSP_SD_Init+0x28>
  sd_state = HAL_SD_Init(&hsd);
 8000280:	4807      	ldr	r0, [pc, #28]	; (80002a0 <BSP_SD_Init+0x30>)
 8000282:	f002 f97d 	bl	8002580 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8000286:	b938      	cbnz	r0, 8000298 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000288:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800028c:	4804      	ldr	r0, [pc, #16]	; (80002a0 <BSP_SD_Init+0x30>)
 800028e:	f002 f9a5 	bl	80025dc <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR;
 8000292:	3000      	adds	r0, #0
 8000294:	bf18      	it	ne
 8000296:	2001      	movne	r0, #1
}
 8000298:	b003      	add	sp, #12
 800029a:	f85d fb04 	ldr.w	pc, [sp], #4
 800029e:	bf00      	nop
 80002a0:	20002484 	.word	0x20002484

080002a4 <BSP_SD_ReadBlocks>:
{
 80002a4:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80002a6:	9300      	str	r3, [sp, #0]
 80002a8:	4613      	mov	r3, r2
 80002aa:	460a      	mov	r2, r1
 80002ac:	4601      	mov	r1, r0
 80002ae:	4804      	ldr	r0, [pc, #16]	; (80002c0 <BSP_SD_ReadBlocks+0x1c>)
 80002b0:	f001 fdce 	bl	8001e50 <HAL_SD_ReadBlocks>
}
 80002b4:	3000      	adds	r0, #0
 80002b6:	bf18      	it	ne
 80002b8:	2001      	movne	r0, #1
 80002ba:	b003      	add	sp, #12
 80002bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80002c0:	20002484 	.word	0x20002484

080002c4 <BSP_SD_WriteBlocks>:
{
 80002c4:	b507      	push	{r0, r1, r2, lr}
  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 80002c6:	9300      	str	r3, [sp, #0]
 80002c8:	4613      	mov	r3, r2
 80002ca:	460a      	mov	r2, r1
 80002cc:	4601      	mov	r1, r0
 80002ce:	4804      	ldr	r0, [pc, #16]	; (80002e0 <BSP_SD_WriteBlocks+0x1c>)
 80002d0:	f001 fed0 	bl	8002074 <HAL_SD_WriteBlocks>
}
 80002d4:	3000      	adds	r0, #0
 80002d6:	bf18      	it	ne
 80002d8:	2001      	movne	r0, #1
 80002da:	b003      	add	sp, #12
 80002dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80002e0:	20002484 	.word	0x20002484

080002e4 <BSP_SD_GetCardState>:
{
 80002e4:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80002e6:	4803      	ldr	r0, [pc, #12]	; (80002f4 <BSP_SD_GetCardState+0x10>)
 80002e8:	f002 f9fe 	bl	80026e8 <HAL_SD_GetCardState>
}
 80002ec:	3804      	subs	r0, #4
 80002ee:	bf18      	it	ne
 80002f0:	2001      	movne	r0, #1
 80002f2:	bd08      	pop	{r3, pc}
 80002f4:	20002484 	.word	0x20002484

080002f8 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80002f8:	4601      	mov	r1, r0
 80002fa:	4801      	ldr	r0, [pc, #4]	; (8000300 <BSP_SD_GetCardInfo+0x8>)
 80002fc:	f002 b95b 	b.w	80025b6 <HAL_SD_GetCardInfo>
 8000300:	20002484 	.word	0x20002484

08000304 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8000304:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8000306:	4903      	ldr	r1, [pc, #12]	; (8000314 <MX_FATFS_Init+0x10>)
 8000308:	4803      	ldr	r0, [pc, #12]	; (8000318 <MX_FATFS_Init+0x14>)
 800030a:	f003 f9b5 	bl	8003678 <FATFS_LinkDriver>
 800030e:	4b03      	ldr	r3, [pc, #12]	; (800031c <MX_FATFS_Init+0x18>)
 8000310:	7018      	strb	r0, [r3, #0]
 8000312:	bd08      	pop	{r3, pc}
 8000314:	200003cd 	.word	0x200003cd
 8000318:	0800423c 	.word	0x0800423c
 800031c:	200003cc 	.word	0x200003cc

08000320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000320:	b530      	push	{r4, r5, lr}
 8000322:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000324:	2228      	movs	r2, #40	; 0x28
 8000326:	2100      	movs	r1, #0
 8000328:	a80c      	add	r0, sp, #48	; 0x30
 800032a:	f003 ff3b 	bl	80041a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032e:	2214      	movs	r2, #20
 8000330:	2100      	movs	r1, #0
 8000332:	a801      	add	r0, sp, #4
 8000334:	f003 ff36 	bl	80041a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	2218      	movs	r2, #24
 800033a:	2100      	movs	r1, #0
 800033c:	eb0d 0002 	add.w	r0, sp, r2
 8000340:	f003 ff30 	bl	80041a4 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000344:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000348:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034a:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800034c:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800034e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000350:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000354:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000356:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000358:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800035a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035c:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035e:	f001 fa11 	bl	8001784 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000362:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000366:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000368:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800036c:	4629      	mov	r1, r5
 800036e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000370:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000372:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000374:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000376:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000378:	f001 fbde 	bl	8001b38 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800037c:	2310      	movs	r3, #16
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800037e:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000380:	9306      	str	r3, [sp, #24]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000382:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000384:	f001 fc86 	bl	8001c94 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000388:	b017      	add	sp, #92	; 0x5c
 800038a:	bd30      	pop	{r4, r5, pc}

0800038c <main>:
{
 800038c:	b580      	push	{r7, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800038e:	2710      	movs	r7, #16
{
 8000390:	b088      	sub	sp, #32
  HAL_Init();
 8000392:	f000 fbe5 	bl	8000b60 <HAL_Init>
  SystemClock_Config();
 8000396:	f7ff ffc3 	bl	8000320 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039a:	463a      	mov	r2, r7
 800039c:	2100      	movs	r1, #0
 800039e:	eb0d 0007 	add.w	r0, sp, r7
 80003a2:	f003 feff 	bl	80041a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a6:	4b4f      	ldr	r3, [pc, #316]	; (80004e4 <main+0x158>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SN_D0_Pin|SN_D1_Pin|SN_D2_Pin|SN_D3_Pin 
 80003a8:	21ff      	movs	r1, #255	; 0xff
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003aa:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, SN_D0_Pin|SN_D1_Pin|SN_D2_Pin|SN_D3_Pin 
 80003ac:	484e      	ldr	r0, [pc, #312]	; (80004e8 <main+0x15c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ae:	f042 0220 	orr.w	r2, r2, #32
 80003b2:	619a      	str	r2, [r3, #24]
 80003b4:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pins : SN_D0_Pin SN_D1_Pin SN_D2_Pin SN_D3_Pin 
                           SN_D4_Pin SN_D5_Pin SN_D6_Pin SN_D7_Pin */
  GPIO_InitStruct.Pin = SN_D0_Pin|SN_D1_Pin|SN_D2_Pin|SN_D3_Pin 
                          |SN_D4_Pin|SN_D5_Pin|SN_D6_Pin|SN_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003b8:	f002 0220 	and.w	r2, r2, #32
 80003bc:	9200      	str	r2, [sp, #0]
 80003be:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c2:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003c4:	433a      	orrs	r2, r7
 80003c6:	619a      	str	r2, [r3, #24]
 80003c8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003cc:	403a      	ands	r2, r7
 80003ce:	9201      	str	r2, [sp, #4]
 80003d0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d2:	699a      	ldr	r2, [r3, #24]
 80003d4:	f042 0204 	orr.w	r2, r2, #4
 80003d8:	619a      	str	r2, [r3, #24]
 80003da:	699a      	ldr	r2, [r3, #24]
 80003dc:	f002 0204 	and.w	r2, r2, #4
 80003e0:	9202      	str	r2, [sp, #8]
 80003e2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003e4:	699a      	ldr	r2, [r3, #24]
 80003e6:	f042 0208 	orr.w	r2, r2, #8
 80003ea:	619a      	str	r2, [r3, #24]
 80003ec:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, SN_D0_Pin|SN_D1_Pin|SN_D2_Pin|SN_D3_Pin 
 80003ee:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f0:	f003 0308 	and.w	r3, r3, #8
 80003f4:	9303      	str	r3, [sp, #12]
 80003f6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, SN_D0_Pin|SN_D1_Pin|SN_D2_Pin|SN_D3_Pin 
 80003f8:	f000 fd3e 	bl	8000e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, YM_D0_Pin|YM_D1_Pin|YM_D2_Pin|YM_D3_Pin 
 80003fc:	2200      	movs	r2, #0
 80003fe:	f248 71ff 	movw	r1, #34815	; 0x87ff
 8000402:	483a      	ldr	r0, [pc, #232]	; (80004ec <main+0x160>)
 8000404:	f000 fd38 	bl	8000e78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SN_WE_Pin|SN_OE_Pin|YM_IC_Pin|YM_CS_Pin 
 8000408:	2200      	movs	r2, #0
 800040a:	f24b 0147 	movw	r1, #45127	; 0xb047
 800040e:	4838      	ldr	r0, [pc, #224]	; (80004f0 <main+0x164>)
 8000410:	f000 fd32 	bl	8000e78 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SN_D0_Pin|SN_D1_Pin|SN_D2_Pin|SN_D3_Pin 
 8000414:	23ff      	movs	r3, #255	; 0xff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000416:	eb0d 0107 	add.w	r1, sp, r7
 800041a:	4833      	ldr	r0, [pc, #204]	; (80004e8 <main+0x15c>)
  GPIO_InitStruct.Pin = SN_D0_Pin|SN_D1_Pin|SN_D2_Pin|SN_D3_Pin 
 800041c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000420:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000422:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000424:	f000 fc3c 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : YM_D0_Pin YM_D1_Pin YM_D2_Pin YM_D3_Pin 
                           YM_D4_Pin YM_D5_Pin YM_D6_Pin YM_D7_Pin 
                           YM_A1_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = YM_D0_Pin|YM_D1_Pin|YM_D2_Pin|YM_D3_Pin 
 8000428:	f248 73ff 	movw	r3, #34815	; 0x87ff
                          |YM_D4_Pin|YM_D5_Pin|YM_D6_Pin|YM_D7_Pin 
                          |YM_A1_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	eb0d 0107 	add.w	r1, sp, r7
 8000430:	482e      	ldr	r0, [pc, #184]	; (80004ec <main+0x160>)
  GPIO_InitStruct.Pin = YM_D0_Pin|YM_D1_Pin|YM_D2_Pin|YM_D3_Pin 
 8000432:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000436:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000438:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043a:	f000 fc31 	bl	8000ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SN_WE_Pin SN_OE_Pin YM_IC_Pin YM_CS_Pin 
                           YM_WR_Pin YM_A0_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SN_WE_Pin|SN_OE_Pin|YM_IC_Pin|YM_CS_Pin 
 800043e:	f24b 0347 	movw	r3, #45127	; 0xb047
                          |YM_WR_Pin|YM_A0_Pin|SPI1_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000442:	eb0d 0107 	add.w	r1, sp, r7
 8000446:	482a      	ldr	r0, [pc, #168]	; (80004f0 <main+0x164>)
  GPIO_InitStruct.Pin = SN_WE_Pin|SN_OE_Pin|YM_IC_Pin|YM_CS_Pin 
 8000448:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044c:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044e:	9605      	str	r6, [sp, #20]

  /*Configure GPIO pin : YM_RD_Pin */
  GPIO_InitStruct.Pin = YM_RD_Pin;
 8000450:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000454:	f000 fc24 	bl	8000ca0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000458:	2303      	movs	r3, #3
  HAL_GPIO_Init(YM_RD_GPIO_Port, &GPIO_InitStruct);
 800045a:	eb0d 0107 	add.w	r1, sp, r7
 800045e:	4824      	ldr	r0, [pc, #144]	; (80004f0 <main+0x164>)
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000460:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pin = YM_RD_Pin;
 8000462:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(YM_RD_GPIO_Port, &GPIO_InitStruct);
 8000464:	f000 fc1c 	bl	8000ca0 <HAL_GPIO_Init>
  hi2c2.Instance = I2C2;
 8000468:	4822      	ldr	r0, [pc, #136]	; (80004f4 <main+0x168>)
  hi2c2.Init.ClockSpeed = 400000;
 800046a:	4a23      	ldr	r2, [pc, #140]	; (80004f8 <main+0x16c>)
 800046c:	4b23      	ldr	r3, [pc, #140]	; (80004fc <main+0x170>)
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800046e:	6084      	str	r4, [r0, #8]
  hi2c2.Init.ClockSpeed = 400000;
 8000470:	e880 000c 	stmia.w	r0, {r2, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8000474:	60c4      	str	r4, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000476:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000478:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800047a:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800047c:	6204      	str	r4, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800047e:	6105      	str	r5, [r0, #16]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000480:	f000 fd06 	bl	8000e90 <HAL_I2C_Init>
  hsd.Instance = SDIO;
 8000484:	4b1e      	ldr	r3, [pc, #120]	; (8000500 <main+0x174>)
 8000486:	4a1f      	ldr	r2, [pc, #124]	; (8000504 <main+0x178>)
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000488:	609c      	str	r4, [r3, #8]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800048a:	e883 0014 	stmia.w	r3, {r2, r4}
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800048e:	60dc      	str	r4, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000490:	611c      	str	r4, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000492:	615c      	str	r4, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000494:	619c      	str	r4, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000496:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800049a:	481b      	ldr	r0, [pc, #108]	; (8000508 <main+0x17c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800049c:	491b      	ldr	r1, [pc, #108]	; (800050c <main+0x180>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049e:	6084      	str	r4, [r0, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80004a0:	e880 000a 	stmia.w	r0, {r1, r3}
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004a8:	6183      	str	r3, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80004aa:	230a      	movs	r3, #10
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80004ac:	60c4      	str	r4, [r0, #12]
  hspi1.Init.CRCPolynomial = 10;
 80004ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004b0:	6104      	str	r4, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004b2:	6144      	str	r4, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004b4:	6204      	str	r4, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004b6:	6244      	str	r4, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004b8:	6284      	str	r4, [r0, #40]	; 0x28
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80004ba:	61c7      	str	r7, [r0, #28]
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004bc:	f002 f928 	bl	8002710 <HAL_SPI_Init>
  MX_FATFS_Init();
 80004c0:	f7ff ff20 	bl	8000304 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80004c4:	f000 f912 	bl	80006ec <MX_USB_DEVICE_Init>
	  HAL_GPIO_TogglePin(GPIOA, LED1_Pin);
 80004c8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80004cc:	f504 3484 	add.w	r4, r4, #67584	; 0x10800
 80004d0:	4620      	mov	r0, r4
 80004d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d6:	f000 fcd4 	bl	8000e82 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80004da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004de:	f000 fb63 	bl	8000ba8 <HAL_Delay>
 80004e2:	e7f5      	b.n	80004d0 <main+0x144>
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40011000 	.word	0x40011000
 80004ec:	40010800 	.word	0x40010800
 80004f0:	40010c00 	.word	0x40010c00
 80004f4:	20002430 	.word	0x20002430
 80004f8:	40005800 	.word	0x40005800
 80004fc:	00061a80 	.word	0x00061a80
 8000500:	20002484 	.word	0x20002484
 8000504:	40018000 	.word	0x40018000
 8000508:	20002508 	.word	0x20002508
 800050c:	40013000 	.word	0x40013000

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	4770      	bx	lr
	...

08000514 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000514:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_MspInit+0x3c>)
{
 8000516:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	f042 0201 	orr.w	r2, r2, #1
 800051e:	619a      	str	r2, [r3, #24]
 8000520:	699a      	ldr	r2, [r3, #24]
 8000522:	f002 0201 	and.w	r2, r2, #1
 8000526:	9200      	str	r2, [sp, #0]
 8000528:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	69da      	ldr	r2, [r3, #28]
 800052c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000530:	61da      	str	r2, [r3, #28]
 8000532:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000534:	4a07      	ldr	r2, [pc, #28]	; (8000554 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053e:	6853      	ldr	r3, [r2, #4]
 8000540:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000548:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800054a:	b002      	add	sp, #8
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40021000 	.word	0x40021000
 8000554:	40010000 	.word	0x40010000

08000558 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000558:	b510      	push	{r4, lr}
 800055a:	4604      	mov	r4, r0
 800055c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	2210      	movs	r2, #16
 8000560:	2100      	movs	r1, #0
 8000562:	a802      	add	r0, sp, #8
 8000564:	f003 fe1e 	bl	80041a4 <memset>
  if(hi2c->Instance==I2C2)
 8000568:	6822      	ldr	r2, [r4, #0]
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <HAL_I2C_MspInit+0x58>)
 800056c:	429a      	cmp	r2, r3
 800056e:	d11d      	bne.n	80005ac <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	4c10      	ldr	r4, [pc, #64]	; (80005b4 <HAL_I2C_MspInit+0x5c>)
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000572:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000574:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <HAL_I2C_MspInit+0x60>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000578:	f043 0308 	orr.w	r3, r3, #8
 800057c:	61a3      	str	r3, [r4, #24]
 800057e:	69a3      	ldr	r3, [r4, #24]
 8000580:	f003 0308 	and.w	r3, r3, #8
 8000584:	9300      	str	r3, [sp, #0]
 8000586:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000588:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800058c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800058e:	2312      	movs	r3, #18
 8000590:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000592:	2303      	movs	r3, #3
 8000594:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f000 fb83 	bl	8000ca0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800059a:	69e3      	ldr	r3, [r4, #28]
 800059c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005a0:	61e3      	str	r3, [r4, #28]
 80005a2:	69e3      	ldr	r3, [r4, #28]
 80005a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005ac:	b006      	add	sp, #24
 80005ae:	bd10      	pop	{r4, pc}
 80005b0:	40005800 	.word	0x40005800
 80005b4:	40021000 	.word	0x40021000
 80005b8:	40010c00 	.word	0x40010c00

080005bc <HAL_SD_MspInit>:
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	2210      	movs	r2, #16
{
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	4604      	mov	r4, r0
 80005c2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	eb0d 0002 	add.w	r0, sp, r2
 80005c8:	2100      	movs	r1, #0
 80005ca:	f003 fdeb 	bl	80041a4 <memset>
  if(hsd->Instance==SDIO)
 80005ce:	6822      	ldr	r2, [r4, #0]
 80005d0:	4b1a      	ldr	r3, [pc, #104]	; (800063c <HAL_SD_MspInit+0x80>)
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d12f      	bne.n	8000636 <HAL_SD_MspInit+0x7a>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80005d6:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80005da:	695a      	ldr	r2, [r3, #20]
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005dc:	2502      	movs	r5, #2
    __HAL_RCC_SDIO_CLK_ENABLE();
 80005de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80005e2:	615a      	str	r2, [r3, #20]
 80005e4:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2403      	movs	r4, #3
    __HAL_RCC_SDIO_CLK_ENABLE();
 80005e8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80005ec:	9201      	str	r2, [sp, #4]
 80005ee:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f4:	f042 0210 	orr.w	r2, r2, #16
 80005f8:	619a      	str	r2, [r3, #24]
 80005fa:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <HAL_SD_MspInit+0x84>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	f002 0210 	and.w	r2, r2, #16
 8000602:	9202      	str	r2, [sp, #8]
 8000604:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000606:	699a      	ldr	r2, [r3, #24]
 8000608:	f042 0220 	orr.w	r2, r2, #32
 800060c:	619a      	str	r2, [r3, #24]
 800060e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	9505      	str	r5, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	f003 0320 	and.w	r3, r3, #32
 8000616:	9303      	str	r3, [sp, #12]
 8000618:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800061a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8000620:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000622:	f000 fb3d 	bl	8000ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000626:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000628:	a904      	add	r1, sp, #16
 800062a:	4806      	ldr	r0, [pc, #24]	; (8000644 <HAL_SD_MspInit+0x88>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800062c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000630:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000632:	f000 fb35 	bl	8000ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000636:	b009      	add	sp, #36	; 0x24
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	bf00      	nop
 800063c:	40018000 	.word	0x40018000
 8000640:	40011000 	.word	0x40011000
 8000644:	40011400 	.word	0x40011400

08000648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000648:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	2410      	movs	r4, #16
{
 800064c:	4605      	mov	r5, r0
 800064e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	4622      	mov	r2, r4
 8000652:	2100      	movs	r1, #0
 8000654:	a802      	add	r0, sp, #8
 8000656:	f003 fda5 	bl	80041a4 <memset>
  if(hspi->Instance==SPI1)
 800065a:	682a      	ldr	r2, [r5, #0]
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <HAL_SPI_MspInit+0x78>)
 800065e:	429a      	cmp	r2, r3
 8000660:	d12c      	bne.n	80006bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000662:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000666:	699a      	ldr	r2, [r3, #24]
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000668:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 800066a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800066e:	619a      	str	r2, [r3, #24]
 8000670:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000672:	4814      	ldr	r0, [pc, #80]	; (80006c4 <HAL_SPI_MspInit+0x7c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000674:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000678:	9200      	str	r2, [sp, #0]
 800067a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	f042 0208 	orr.w	r2, r2, #8
 8000682:	619a      	str	r2, [r3, #24]
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0308 	and.w	r3, r3, #8
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800068e:	2328      	movs	r3, #40	; 0x28
 8000690:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000696:	2303      	movs	r3, #3
 8000698:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	f000 fb01 	bl	8000ca0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a0:	a902      	add	r1, sp, #8
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <HAL_SPI_MspInit+0x7c>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006a8:	9402      	str	r4, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006aa:	f000 faf9 	bl	8000ca0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80006ae:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <HAL_SPI_MspInit+0x80>)
 80006b0:	6853      	ldr	r3, [r2, #4]
 80006b2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006bc:	b007      	add	sp, #28
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	40013000 	.word	0x40013000
 80006c4:	40010c00 	.word	0x40010c00
 80006c8:	40010000 	.word	0x40010000

080006cc <NMI_Handler>:
 80006cc:	4770      	bx	lr

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	e7fe      	b.n	80006ce <HardFault_Handler>

080006d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d0:	e7fe      	b.n	80006d0 <MemManage_Handler>

080006d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d2:	e7fe      	b.n	80006d2 <BusFault_Handler>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	e7fe      	b.n	80006d4 <UsageFault_Handler>

080006d6 <SVC_Handler>:
 80006d6:	4770      	bx	lr

080006d8 <DebugMon_Handler>:
 80006d8:	4770      	bx	lr

080006da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006dc:	f000 ba52 	b.w	8000b84 <HAL_IncTick>

080006e0 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80006e0:	4801      	ldr	r0, [pc, #4]	; (80006e8 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80006e2:	f000 bdab 	b.w	800123c <HAL_PCD_IRQHandler>
 80006e6:	bf00      	nop
 80006e8:	20003024 	.word	0x20003024

080006ec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80006ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80006ee:	2200      	movs	r2, #0
 80006f0:	490e      	ldr	r1, [pc, #56]	; (800072c <MX_USB_DEVICE_Init+0x40>)
 80006f2:	480f      	ldr	r0, [pc, #60]	; (8000730 <MX_USB_DEVICE_Init+0x44>)
 80006f4:	f003 f999 	bl	8003a2a <USBD_Init>
 80006f8:	b108      	cbz	r0, 80006fe <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 80006fa:	f7ff ff09 	bl	8000510 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80006fe:	490d      	ldr	r1, [pc, #52]	; (8000734 <MX_USB_DEVICE_Init+0x48>)
 8000700:	480b      	ldr	r0, [pc, #44]	; (8000730 <MX_USB_DEVICE_Init+0x44>)
 8000702:	f003 f9a7 	bl	8003a54 <USBD_RegisterClass>
 8000706:	b108      	cbz	r0, 800070c <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8000708:	f7ff ff02 	bl	8000510 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800070c:	490a      	ldr	r1, [pc, #40]	; (8000738 <MX_USB_DEVICE_Init+0x4c>)
 800070e:	4808      	ldr	r0, [pc, #32]	; (8000730 <MX_USB_DEVICE_Init+0x44>)
 8000710:	f003 f963 	bl	80039da <USBD_CDC_RegisterInterface>
 8000714:	b108      	cbz	r0, 800071a <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8000716:	f7ff fefb 	bl	8000510 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USB_DEVICE_Init+0x44>)
 800071c:	f003 f9a1 	bl	8003a62 <USBD_Start>
 8000720:	b118      	cbz	r0, 800072a <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8000722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000726:	f7ff bef3 	b.w	8000510 <Error_Handler>
 800072a:	bd08      	pop	{r3, pc}
 800072c:	20000010 	.word	0x20000010
 8000730:	20002560 	.word	0x20002560
 8000734:	20000070 	.word	0x20000070
 8000738:	20000000 	.word	0x20000000

0800073c <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 800073c:	2000      	movs	r0, #0
 800073e:	4770      	bx	lr

08000740 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8000740:	2000      	movs	r0, #0
 8000742:	4770      	bx	lr

08000744 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8000744:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8000746:	4c05      	ldr	r4, [pc, #20]	; (800075c <CDC_Receive_FS+0x18>)
 8000748:	4601      	mov	r1, r0
 800074a:	4620      	mov	r0, r4
 800074c:	f003 f954 	bl	80039f8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8000750:	4620      	mov	r0, r4
 8000752:	f003 f957 	bl	8003a04 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8000756:	2000      	movs	r0, #0
 8000758:	bd10      	pop	{r4, pc}
 800075a:	bf00      	nop
 800075c:	20002560 	.word	0x20002560

08000760 <CDC_Init_FS>:
{
 8000760:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8000762:	4c06      	ldr	r4, [pc, #24]	; (800077c <CDC_Init_FS+0x1c>)
 8000764:	2200      	movs	r2, #0
 8000766:	4906      	ldr	r1, [pc, #24]	; (8000780 <CDC_Init_FS+0x20>)
 8000768:	4620      	mov	r0, r4
 800076a:	f003 f93d 	bl	80039e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800076e:	4905      	ldr	r1, [pc, #20]	; (8000784 <CDC_Init_FS+0x24>)
 8000770:	4620      	mov	r0, r4
 8000772:	f003 f941 	bl	80039f8 <USBD_CDC_SetRxBuffer>
}
 8000776:	2000      	movs	r0, #0
 8000778:	bd10      	pop	{r4, pc}
 800077a:	bf00      	nop
 800077c:	20002560 	.word	0x20002560
 8000780:	20002c24 	.word	0x20002c24
 8000784:	20002824 	.word	0x20002824

08000788 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000788:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <HAL_PCD_MspInit+0x38>)
 800078c:	6802      	ldr	r2, [r0, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d112      	bne.n	80007b8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000792:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8000796:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000798:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 800079a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800079e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80007a2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007a4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80007a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80007ae:	f000 fa1f 	bl	8000bf0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80007b2:	2014      	movs	r0, #20
 80007b4:	f000 fa50 	bl	8000c58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80007b8:	b003      	add	sp, #12
 80007ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80007be:	bf00      	nop
 80007c0:	40005c00 	.word	0x40005c00

080007c4 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80007c4:	f500 710c 	add.w	r1, r0, #560	; 0x230
 80007c8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80007cc:	f003 b960 	b.w	8003a90 <USBD_LL_SetupStage>

080007d0 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80007d0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80007d4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 80007d8:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80007dc:	f003 b985 	b.w	8003aea <USBD_LL_DataOutStage>

080007e0 <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80007e0:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 80007e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007e6:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80007ea:	f003 b9b8 	b.w	8003b5e <USBD_LL_DataInStage>

080007ee <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80007ee:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 80007f2:	f003 ba4c 	b.w	8003c8e <USBD_LL_SOF>

080007f6 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80007f6:	6883      	ldr	r3, [r0, #8]
{ 
 80007f8:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80007fa:	2b02      	cmp	r3, #2
{ 
 80007fc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80007fe:	d001      	beq.n	8000804 <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8000800:	f7ff fe86 	bl	8000510 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8000804:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 8000808:	2101      	movs	r1, #1
 800080a:	f003 fa2a 	bl	8003c62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800080e:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
}
 8000812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8000816:	f003 b9fd 	b.w	8003c14 <USBD_LL_Reset>
	...

0800081c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800081c:	b510      	push	{r4, lr}
 800081e:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8000820:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8000824:	f003 fa20 	bl	8003c68 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8000828:	69a3      	ldr	r3, [r4, #24]
 800082a:	b123      	cbz	r3, 8000836 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800082c:	4a02      	ldr	r2, [pc, #8]	; (8000838 <HAL_PCD_SuspendCallback+0x1c>)
 800082e:	6913      	ldr	r3, [r2, #16]
 8000830:	f043 0306 	orr.w	r3, r3, #6
 8000834:	6113      	str	r3, [r2, #16]
 8000836:	bd10      	pop	{r4, pc}
 8000838:	e000ed00 	.word	0xe000ed00

0800083c <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800083c:	f8d0 0268 	ldr.w	r0, [r0, #616]	; 0x268
 8000840:	f003 ba1b 	b.w	8003c7a <USBD_LL_Resume>

08000844 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000844:	2302      	movs	r3, #2
 8000846:	2208      	movs	r2, #8
{
 8000848:	b510      	push	{r4, lr}
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800084a:	491c      	ldr	r1, [pc, #112]	; (80008bc <USBD_LL_Init+0x78>)
{
 800084c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800084e:	481c      	ldr	r0, [pc, #112]	; (80008c0 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000850:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000854:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8000856:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
  hpcd_USB_FS.pData = pdev;
 800085a:	f8c0 4268 	str.w	r4, [r0, #616]	; 0x268
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800085e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000860:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000862:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000864:	f000 fbb8 	bl	8000fd8 <HAL_PCD_Init>
 8000868:	b108      	cbz	r0, 800086e <USBD_LL_Init+0x2a>
  {
    Error_Handler( );
 800086a:	f7ff fe51 	bl	8000510 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800086e:	2200      	movs	r2, #0
 8000870:	2318      	movs	r3, #24
 8000872:	4611      	mov	r1, r2
 8000874:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8000878:	f000 ff6c 	bl	8001754 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800087c:	2358      	movs	r3, #88	; 0x58
 800087e:	2200      	movs	r2, #0
 8000880:	2180      	movs	r1, #128	; 0x80
 8000882:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8000886:	f000 ff65 	bl	8001754 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800088a:	23c0      	movs	r3, #192	; 0xc0
 800088c:	2200      	movs	r2, #0
 800088e:	2181      	movs	r1, #129	; 0x81
 8000890:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 8000894:	f000 ff5e 	bl	8001754 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8000898:	f44f 7388 	mov.w	r3, #272	; 0x110
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80008a4:	f000 ff56 	bl	8001754 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80008a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ac:	2200      	movs	r2, #0
 80008ae:	2182      	movs	r1, #130	; 0x82
 80008b0:	f8d4 02c0 	ldr.w	r0, [r4, #704]	; 0x2c0
 80008b4:	f000 ff4e 	bl	8001754 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
}
 80008b8:	2000      	movs	r0, #0
 80008ba:	bd10      	pop	{r4, pc}
 80008bc:	40005c00 	.word	0x40005c00
 80008c0:	20003024 	.word	0x20003024

080008c4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80008c4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80008c6:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80008ca:	f000 fbfa 	bl	80010c2 <HAL_PCD_Start>
 80008ce:	2803      	cmp	r0, #3
 80008d0:	bf9a      	itte	ls
 80008d2:	4b02      	ldrls	r3, [pc, #8]	; (80008dc <USBD_LL_Start+0x18>)
 80008d4:	5c18      	ldrbls	r0, [r3, r0]
 80008d6:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80008d8:	bd08      	pop	{r3, pc}
 80008da:	bf00      	nop
 80008dc:	080041dc 	.word	0x080041dc

080008e0 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80008e0:	b510      	push	{r4, lr}
 80008e2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80008e4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80008e8:	4613      	mov	r3, r2
 80008ea:	4622      	mov	r2, r4
 80008ec:	f000 fc14 	bl	8001118 <HAL_PCD_EP_Open>
 80008f0:	2803      	cmp	r0, #3
 80008f2:	bf9a      	itte	ls
 80008f4:	4b01      	ldrls	r3, [pc, #4]	; (80008fc <USBD_LL_OpenEP+0x1c>)
 80008f6:	5c18      	ldrbls	r0, [r3, r0]
 80008f8:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;
}
 80008fa:	bd10      	pop	{r4, pc}
 80008fc:	080041dc 	.word	0x080041dc

08000900 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000900:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8000902:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000906:	f000 fc3a 	bl	800117e <HAL_PCD_EP_Close>
 800090a:	2803      	cmp	r0, #3
 800090c:	bf9a      	itte	ls
 800090e:	4b02      	ldrls	r3, [pc, #8]	; (8000918 <USBD_LL_CloseEP+0x18>)
 8000910:	5c18      	ldrbls	r0, [r3, r0]
 8000912:	2002      	movhi	r0, #2
      
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status;  
}
 8000914:	bd08      	pop	{r3, pc}
 8000916:	bf00      	nop
 8000918:	080041dc 	.word	0x080041dc

0800091c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800091c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800091e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000922:	f000 feb1 	bl	8001688 <HAL_PCD_EP_SetStall>
 8000926:	2803      	cmp	r0, #3
 8000928:	bf9a      	itte	ls
 800092a:	4b02      	ldrls	r3, [pc, #8]	; (8000934 <USBD_LL_StallEP+0x18>)
 800092c:	5c18      	ldrbls	r0, [r3, r0]
 800092e:	2002      	movhi	r0, #2

  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8000930:	bd08      	pop	{r3, pc}
 8000932:	bf00      	nop
 8000934:	080041dc 	.word	0x080041dc

08000938 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000938:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800093a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800093e:	f000 fed7 	bl	80016f0 <HAL_PCD_EP_ClrStall>
 8000942:	2803      	cmp	r0, #3
 8000944:	bf9a      	itte	ls
 8000946:	4b02      	ldrls	r3, [pc, #8]	; (8000950 <USBD_LL_ClearStallEP+0x18>)
 8000948:	5c18      	ldrbls	r0, [r3, r0]
 800094a:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);

  return usb_status; 
}
 800094c:	bd08      	pop	{r3, pc}
 800094e:	bf00      	nop
 8000950:	080041dc 	.word	0x080041dc

08000954 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8000954:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8000956:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800095a:	bf45      	ittet	mi
 800095c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8000960:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8000964:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8000968:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800096c:	bf58      	it	pl
 800096e:	f893 012a 	ldrbpl.w	r0, [r3, #298]	; 0x12a
  }
}
 8000972:	4770      	bx	lr

08000974 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000974:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8000976:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 800097a:	f000 fbb9 	bl	80010f0 <HAL_PCD_SetAddress>
 800097e:	2803      	cmp	r0, #3
 8000980:	bf9a      	itte	ls
 8000982:	4b02      	ldrls	r3, [pc, #8]	; (800098c <USBD_LL_SetUSBAddress+0x18>)
 8000984:	5c18      	ldrbls	r0, [r3, r0]
 8000986:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 
  return usb_status;  
}
 8000988:	bd08      	pop	{r3, pc}
 800098a:	bf00      	nop
 800098c:	080041dc 	.word	0x080041dc

08000990 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8000990:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8000992:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8000996:	f000 fc3a 	bl	800120e <HAL_PCD_EP_Transmit>
 800099a:	2803      	cmp	r0, #3
 800099c:	bf9a      	itte	ls
 800099e:	4b02      	ldrls	r3, [pc, #8]	; (80009a8 <USBD_LL_Transmit+0x18>)
 80009a0:	5c18      	ldrbls	r0, [r3, r0]
 80009a2:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  
  return usb_status;    
}
 80009a4:	bd08      	pop	{r3, pc}
 80009a6:	bf00      	nop
 80009a8:	080041dc 	.word	0x080041dc

080009ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80009ac:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80009ae:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80009b2:	f000 fc0d 	bl	80011d0 <HAL_PCD_EP_Receive>
 80009b6:	2803      	cmp	r0, #3
 80009b8:	bf9a      	itte	ls
 80009ba:	4b02      	ldrls	r3, [pc, #8]	; (80009c4 <USBD_LL_PrepareReceive+0x18>)
 80009bc:	5c18      	ldrbls	r0, [r3, r0]
 80009be:	2002      	movhi	r0, #2
     
  usb_status =  USBD_Get_USB_Status(hal_status);
  	
  return usb_status; 
}
 80009c0:	bd08      	pop	{r3, pc}
 80009c2:	bf00      	nop
 80009c4:	080041dc 	.word	0x080041dc

080009c8 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80009c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80009cc:	f000 bc18 	b.w	8001200 <HAL_PCD_EP_GetRxCount>

080009d0 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 80009d0:	4800      	ldr	r0, [pc, #0]	; (80009d4 <USBD_static_malloc+0x4>)
 80009d2:	4770      	bx	lr
 80009d4:	2000019c 	.word	0x2000019c

080009d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80009d8:	4770      	bx	lr

080009da <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80009da:	4770      	bx	lr

080009dc <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80009dc:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80009de:	4801      	ldr	r0, [pc, #4]	; (80009e4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80009e0:	800b      	strh	r3, [r1, #0]
}
 80009e2:	4770      	bx	lr
 80009e4:	2000002c 	.word	0x2000002c

080009e8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80009e8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80009ea:	4801      	ldr	r0, [pc, #4]	; (80009f0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80009ec:	800b      	strh	r3, [r1, #0]
}
 80009ee:	4770      	bx	lr
 80009f0:	20000040 	.word	0x20000040

080009f4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80009f4:	2300      	movs	r3, #0
{
 80009f6:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80009f8:	461d      	mov	r5, r3
  for (idx = 0; idx < len; idx++)
 80009fa:	b2dc      	uxtb	r4, r3
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	d800      	bhi.n	8000a02 <IntToUnicode+0xe>
  }
}
 8000a00:	bd30      	pop	{r4, r5, pc}
    if (((value >> 28)) < 0xA)
 8000a02:	0f04      	lsrs	r4, r0, #28
 8000a04:	2c09      	cmp	r4, #9
      pbuf[2 * idx] = (value >> 28) + '0';
 8000a06:	bf94      	ite	ls
 8000a08:	3430      	addls	r4, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8000a0a:	3437      	addhi	r4, #55	; 0x37
 8000a0c:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8000a10:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    value = value << 4;
 8000a14:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 8000a16:	7065      	strb	r5, [r4, #1]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	e7ee      	b.n	80009fa <IntToUnicode+0x6>

08000a1c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8000a1c:	231a      	movs	r3, #26
{
 8000a1e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8000a20:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <USBD_FS_SerialStrDescriptor+0x2c>)
 8000a24:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8000a26:	3308      	adds	r3, #8
  deviceserial0 += deviceserial2;
 8000a28:	681b      	ldr	r3, [r3, #0]
  if (deviceserial0 != 0)
 8000a2a:	18c0      	adds	r0, r0, r3
 8000a2c:	d00a      	beq.n	8000a44 <USBD_FS_SerialStrDescriptor+0x28>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <USBD_FS_SerialStrDescriptor+0x30>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000a30:	2208      	movs	r2, #8
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8000a32:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8000a34:	4906      	ldr	r1, [pc, #24]	; (8000a50 <USBD_FS_SerialStrDescriptor+0x34>)
 8000a36:	f7ff ffdd 	bl	80009f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	4905      	ldr	r1, [pc, #20]	; (8000a54 <USBD_FS_SerialStrDescriptor+0x38>)
 8000a3e:	4620      	mov	r0, r4
 8000a40:	f7ff ffd8 	bl	80009f4 <IntToUnicode>
}
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <USBD_FS_SerialStrDescriptor+0x3c>)
 8000a46:	bd10      	pop	{r4, pc}
 8000a48:	1ffff7e8 	.word	0x1ffff7e8
 8000a4c:	1ffff7ec 	.word	0x1ffff7ec
 8000a50:	20000046 	.word	0x20000046
 8000a54:	20000056 	.word	0x20000056
 8000a58:	20000044 	.word	0x20000044

08000a5c <USBD_FS_ManufacturerStrDescriptor>:
{
 8000a5c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8000a5e:	4c04      	ldr	r4, [pc, #16]	; (8000a70 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8000a60:	460a      	mov	r2, r1
 8000a62:	4804      	ldr	r0, [pc, #16]	; (8000a74 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8000a64:	4621      	mov	r1, r4
 8000a66:	f003 fb1a 	bl	800409e <USBD_GetString>
}
 8000a6a:	4620      	mov	r0, r4
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	bf00      	nop
 8000a70:	20003290 	.word	0x20003290
 8000a74:	080041f9 	.word	0x080041f9

08000a78 <USBD_FS_ProductStrDescriptor>:
{
 8000a78:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8000a7a:	4c04      	ldr	r4, [pc, #16]	; (8000a8c <USBD_FS_ProductStrDescriptor+0x14>)
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	4804      	ldr	r0, [pc, #16]	; (8000a90 <USBD_FS_ProductStrDescriptor+0x18>)
 8000a80:	4621      	mov	r1, r4
 8000a82:	f003 fb0c 	bl	800409e <USBD_GetString>
}
 8000a86:	4620      	mov	r0, r4
 8000a88:	bd10      	pop	{r4, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20003290 	.word	0x20003290
 8000a90:	0800420c 	.word	0x0800420c

08000a94 <USBD_FS_ConfigStrDescriptor>:
{
 8000a94:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8000a96:	4c04      	ldr	r4, [pc, #16]	; (8000aa8 <USBD_FS_ConfigStrDescriptor+0x14>)
 8000a98:	460a      	mov	r2, r1
 8000a9a:	4804      	ldr	r0, [pc, #16]	; (8000aac <USBD_FS_ConfigStrDescriptor+0x18>)
 8000a9c:	4621      	mov	r1, r4
 8000a9e:	f003 fafe 	bl	800409e <USBD_GetString>
}
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	bd10      	pop	{r4, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20003290 	.word	0x20003290
 8000aac:	080041e0 	.word	0x080041e0

08000ab0 <USBD_FS_InterfaceStrDescriptor>:
{
 8000ab0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8000ab2:	4c04      	ldr	r4, [pc, #16]	; (8000ac4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8000ab8:	4621      	mov	r1, r4
 8000aba:	f003 faf0 	bl	800409e <USBD_GetString>
}
 8000abe:	4620      	mov	r0, r4
 8000ac0:	bd10      	pop	{r4, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20003290 	.word	0x20003290
 8000ac8:	080041eb 	.word	0x080041eb

08000acc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <SystemInit+0x40>)
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	f042 0201 	orr.w	r2, r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000ad6:	6859      	ldr	r1, [r3, #4]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <SystemInit+0x44>)
 8000ada:	400a      	ands	r2, r1
 8000adc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000ae4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ae8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000af0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000af8:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000afa:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000afe:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000b00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b04:	4b03      	ldr	r3, [pc, #12]	; (8000b14 <SystemInit+0x48>)
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	f8ff0000 	.word	0xf8ff0000
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_InitTick+0x3c>)
{
 8000b1c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b1e:	7818      	ldrb	r0, [r3, #0]
 8000b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b24:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b28:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <HAL_InitTick+0x40>)
 8000b2a:	6810      	ldr	r0, [r2, #0]
 8000b2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b30:	f000 f8a0 	bl	8000c74 <HAL_SYSTICK_Config>
 8000b34:	4604      	mov	r4, r0
 8000b36:	b958      	cbnz	r0, 8000b50 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	2d0f      	cmp	r5, #15
 8000b3a:	d809      	bhi.n	8000b50 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	4629      	mov	r1, r5
 8000b40:	f04f 30ff 	mov.w	r0, #4294967295
 8000b44:	f000 f854 	bl	8000bf0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HAL_InitTick+0x44>)
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	601d      	str	r5, [r3, #0]
 8000b4e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b50:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000b52:	bd38      	pop	{r3, r4, r5, pc}
 8000b54:	20000064 	.word	0x20000064
 8000b58:	20000060 	.word	0x20000060
 8000b5c:	20000068 	.word	0x20000068

08000b60 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b60:	4a07      	ldr	r2, [pc, #28]	; (8000b80 <HAL_Init+0x20>)
{
 8000b62:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b64:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b66:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b6e:	f000 f82d 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ffd0 	bl	8000b18 <HAL_InitTick>
  HAL_MspInit();
 8000b78:	f7ff fccc 	bl	8000514 <HAL_MspInit>
}
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	bd08      	pop	{r3, pc}
 8000b80:	40022000 	.word	0x40022000

08000b84 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b84:	4a03      	ldr	r2, [pc, #12]	; (8000b94 <HAL_IncTick+0x10>)
 8000b86:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <HAL_IncTick+0x14>)
 8000b88:	6811      	ldr	r1, [r2, #0]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	440b      	add	r3, r1
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20003390 	.word	0x20003390
 8000b98:	20000064 	.word	0x20000064

08000b9c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b9c:	4b01      	ldr	r3, [pc, #4]	; (8000ba4 <HAL_GetTick+0x8>)
 8000b9e:	6818      	ldr	r0, [r3, #0]
}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20003390 	.word	0x20003390

08000ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba8:	b538      	push	{r3, r4, r5, lr}
 8000baa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff fff6 	bl	8000b9c <HAL_GetTick>
 8000bb0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	4b04      	ldrne	r3, [pc, #16]	; (8000bc8 <HAL_Delay+0x20>)
 8000bb8:	781b      	ldrbne	r3, [r3, #0]
 8000bba:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bbc:	f7ff ffee 	bl	8000b9c <HAL_GetTick>
 8000bc0:	1b40      	subs	r0, r0, r5
 8000bc2:	4284      	cmp	r4, r0
 8000bc4:	d8fa      	bhi.n	8000bbc <HAL_Delay+0x14>
  {
  }
}
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
 8000bc8:	20000064 	.word	0x20000064

08000bcc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4a07      	ldr	r2, [pc, #28]	; (8000bec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bce:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bd2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bda:	041b      	lsls	r3, r3, #16
 8000bdc:	0c1b      	lsrs	r3, r3, #16
 8000bde:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000be6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000be8:	60d3      	str	r3, [r2, #12]
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf2:	b530      	push	{r4, r5, lr}
 8000bf4:	68dc      	ldr	r4, [r3, #12]
 8000bf6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bfa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bfe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	2b04      	cmp	r3, #4
 8000c02:	bf28      	it	cs
 8000c04:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0c:	bf98      	it	ls
 8000c0e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	fa05 f303 	lsl.w	r3, r5, r3
 8000c14:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c18:	bf88      	it	hi
 8000c1a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c1c:	4019      	ands	r1, r3
 8000c1e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c20:	fa05 f404 	lsl.w	r4, r5, r4
 8000c24:	3c01      	subs	r4, #1
 8000c26:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000c28:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2a:	ea42 0201 	orr.w	r2, r2, r1
 8000c2e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	bfa9      	itett	ge
 8000c34:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	4b06      	ldrlt	r3, [pc, #24]	; (8000c54 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	b2d2      	uxtbge	r2, r2
 8000c3c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	bfbb      	ittet	lt
 8000c42:	f000 000f 	andlt.w	r0, r0, #15
 8000c46:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c48:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4c:	541a      	strblt	r2, [r3, r0]
 8000c4e:	bd30      	pop	{r4, r5, pc}
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	e000ed14 	.word	0xe000ed14

08000c58 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	db08      	blt.n	8000c6e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	0942      	lsrs	r2, r0, #5
 8000c60:	f000 001f 	and.w	r0, r0, #31
 8000c64:	fa03 f000 	lsl.w	r0, r3, r0
 8000c68:	4b01      	ldr	r3, [pc, #4]	; (8000c70 <HAL_NVIC_EnableIRQ+0x18>)
 8000c6a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100

08000c74 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	3801      	subs	r0, #1
 8000c76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7a:	d20a      	bcs.n	8000c92 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c92:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ca4:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000ca6:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca8:	4f6c      	ldr	r7, [pc, #432]	; (8000e5c <HAL_GPIO_Init+0x1bc>)
 8000caa:	4b6d      	ldr	r3, [pc, #436]	; (8000e60 <HAL_GPIO_Init+0x1c0>)
        temp = AFIO->EXTICR[position >> 2u];
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cac:	f8df e1b8 	ldr.w	lr, [pc, #440]	; 8000e68 <HAL_GPIO_Init+0x1c8>
      switch (GPIO_Init->Mode)
 8000cb0:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000e6c <HAL_GPIO_Init+0x1cc>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb4:	680a      	ldr	r2, [r1, #0]
 8000cb6:	fa32 f506 	lsrs.w	r5, r2, r6
 8000cba:	d102      	bne.n	8000cc2 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000cbc:	b003      	add	sp, #12
 8000cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000cc2:	f04f 0801 	mov.w	r8, #1
 8000cc6:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cca:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8000cce:	4590      	cmp	r8, r2
 8000cd0:	f040 8084 	bne.w	8000ddc <HAL_GPIO_Init+0x13c>
      switch (GPIO_Init->Mode)
 8000cd4:	684d      	ldr	r5, [r1, #4]
 8000cd6:	2d12      	cmp	r5, #18
 8000cd8:	f000 80b1 	beq.w	8000e3e <HAL_GPIO_Init+0x19e>
 8000cdc:	f200 8087 	bhi.w	8000dee <HAL_GPIO_Init+0x14e>
 8000ce0:	2d02      	cmp	r5, #2
 8000ce2:	f000 80a9 	beq.w	8000e38 <HAL_GPIO_Init+0x198>
 8000ce6:	d87b      	bhi.n	8000de0 <HAL_GPIO_Init+0x140>
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	f000 808c 	beq.w	8000e06 <HAL_GPIO_Init+0x166>
 8000cee:	2d01      	cmp	r5, #1
 8000cf0:	f000 80a0 	beq.w	8000e34 <HAL_GPIO_Init+0x194>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cf4:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cf8:	2aff      	cmp	r2, #255	; 0xff
 8000cfa:	bf93      	iteet	ls
 8000cfc:	4682      	movls	sl, r0
 8000cfe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000d02:	3d08      	subhi	r5, #8
 8000d04:	f8d0 b000 	ldrls.w	fp, [r0]
 8000d08:	bf92      	itee	ls
 8000d0a:	00b5      	lslls	r5, r6, #2
 8000d0c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000d10:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d12:	fa09 f805 	lsl.w	r8, r9, r5
 8000d16:	ea2b 0808 	bic.w	r8, fp, r8
 8000d1a:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d1e:	bf88      	it	hi
 8000d20:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d24:	ea48 0505 	orr.w	r5, r8, r5
 8000d28:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000d30:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000d34:	d052      	beq.n	8000ddc <HAL_GPIO_Init+0x13c>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d36:	69bd      	ldr	r5, [r7, #24]
 8000d38:	f026 0803 	bic.w	r8, r6, #3
 8000d3c:	f045 0501 	orr.w	r5, r5, #1
 8000d40:	61bd      	str	r5, [r7, #24]
 8000d42:	69bd      	ldr	r5, [r7, #24]
 8000d44:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000d48:	f005 0501 	and.w	r5, r5, #1
 8000d4c:	9501      	str	r5, [sp, #4]
 8000d4e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d52:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d56:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d58:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8000d5c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d60:	fa09 f90b 	lsl.w	r9, r9, fp
 8000d64:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d68:	4d3e      	ldr	r5, [pc, #248]	; (8000e64 <HAL_GPIO_Init+0x1c4>)
 8000d6a:	42a8      	cmp	r0, r5
 8000d6c:	d06c      	beq.n	8000e48 <HAL_GPIO_Init+0x1a8>
 8000d6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d72:	42a8      	cmp	r0, r5
 8000d74:	d06a      	beq.n	8000e4c <HAL_GPIO_Init+0x1ac>
 8000d76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d7a:	42a8      	cmp	r0, r5
 8000d7c:	d068      	beq.n	8000e50 <HAL_GPIO_Init+0x1b0>
 8000d7e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d82:	42a8      	cmp	r0, r5
 8000d84:	d066      	beq.n	8000e54 <HAL_GPIO_Init+0x1b4>
 8000d86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000d8a:	42a8      	cmp	r0, r5
 8000d8c:	d064      	beq.n	8000e58 <HAL_GPIO_Init+0x1b8>
 8000d8e:	4570      	cmp	r0, lr
 8000d90:	bf0c      	ite	eq
 8000d92:	2505      	moveq	r5, #5
 8000d94:	2506      	movne	r5, #6
 8000d96:	fa05 f50b 	lsl.w	r5, r5, fp
 8000d9a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000d9e:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000da2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000da4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000da8:	bf14      	ite	ne
 8000daa:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dac:	4395      	biceq	r5, r2
 8000dae:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000db0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000db2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000db6:	bf14      	ite	ne
 8000db8:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000dba:	4395      	biceq	r5, r2
 8000dbc:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dbe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dc4:	bf14      	ite	ne
 8000dc6:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dc8:	4395      	biceq	r5, r2
 8000dca:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dcc:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dce:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd2:	bf14      	ite	ne
 8000dd4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dd6:	ea25 0202 	biceq.w	r2, r5, r2
 8000dda:	60da      	str	r2, [r3, #12]
	position++;
 8000ddc:	3601      	adds	r6, #1
 8000dde:	e769      	b.n	8000cb4 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8000de0:	2d03      	cmp	r5, #3
 8000de2:	d025      	beq.n	8000e30 <HAL_GPIO_Init+0x190>
 8000de4:	2d11      	cmp	r5, #17
 8000de6:	d185      	bne.n	8000cf4 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de8:	68cc      	ldr	r4, [r1, #12]
 8000dea:	3404      	adds	r4, #4
          break;
 8000dec:	e782      	b.n	8000cf4 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8000dee:	4565      	cmp	r5, ip
 8000df0:	d009      	beq.n	8000e06 <HAL_GPIO_Init+0x166>
 8000df2:	d812      	bhi.n	8000e1a <HAL_GPIO_Init+0x17a>
 8000df4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8000e70 <HAL_GPIO_Init+0x1d0>
 8000df8:	454d      	cmp	r5, r9
 8000dfa:	d004      	beq.n	8000e06 <HAL_GPIO_Init+0x166>
 8000dfc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000e00:	454d      	cmp	r5, r9
 8000e02:	f47f af77 	bne.w	8000cf4 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e06:	688c      	ldr	r4, [r1, #8]
 8000e08:	b1e4      	cbz	r4, 8000e44 <HAL_GPIO_Init+0x1a4>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e0a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8000e0c:	bf0c      	ite	eq
 8000e0e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000e12:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e16:	2408      	movs	r4, #8
 8000e18:	e76c      	b.n	8000cf4 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8000e1a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000e74 <HAL_GPIO_Init+0x1d4>
 8000e1e:	454d      	cmp	r5, r9
 8000e20:	d0f1      	beq.n	8000e06 <HAL_GPIO_Init+0x166>
 8000e22:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000e26:	454d      	cmp	r5, r9
 8000e28:	d0ed      	beq.n	8000e06 <HAL_GPIO_Init+0x166>
 8000e2a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000e2e:	e7e7      	b.n	8000e00 <HAL_GPIO_Init+0x160>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e30:	2400      	movs	r4, #0
 8000e32:	e75f      	b.n	8000cf4 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e34:	68cc      	ldr	r4, [r1, #12]
          break;
 8000e36:	e75d      	b.n	8000cf4 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e38:	68cc      	ldr	r4, [r1, #12]
 8000e3a:	3408      	adds	r4, #8
          break;
 8000e3c:	e75a      	b.n	8000cf4 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e3e:	68cc      	ldr	r4, [r1, #12]
 8000e40:	340c      	adds	r4, #12
          break;
 8000e42:	e757      	b.n	8000cf4 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e44:	2404      	movs	r4, #4
 8000e46:	e755      	b.n	8000cf4 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e48:	2500      	movs	r5, #0
 8000e4a:	e7a4      	b.n	8000d96 <HAL_GPIO_Init+0xf6>
 8000e4c:	2501      	movs	r5, #1
 8000e4e:	e7a2      	b.n	8000d96 <HAL_GPIO_Init+0xf6>
 8000e50:	2502      	movs	r5, #2
 8000e52:	e7a0      	b.n	8000d96 <HAL_GPIO_Init+0xf6>
 8000e54:	2503      	movs	r5, #3
 8000e56:	e79e      	b.n	8000d96 <HAL_GPIO_Init+0xf6>
 8000e58:	2504      	movs	r5, #4
 8000e5a:	e79c      	b.n	8000d96 <HAL_GPIO_Init+0xf6>
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	40010400 	.word	0x40010400
 8000e64:	40010800 	.word	0x40010800
 8000e68:	40011c00 	.word	0x40011c00
 8000e6c:	10210000 	.word	0x10210000
 8000e70:	10110000 	.word	0x10110000
 8000e74:	10310000 	.word	0x10310000

08000e78 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e78:	b10a      	cbz	r2, 8000e7e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e7a:	6101      	str	r1, [r0, #16]
 8000e7c:	4770      	bx	lr
 8000e7e:	0409      	lsls	r1, r1, #16
 8000e80:	e7fb      	b.n	8000e7a <HAL_GPIO_WritePin+0x2>

08000e82 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000e82:	68c3      	ldr	r3, [r0, #12]
 8000e84:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e86:	bf14      	ite	ne
 8000e88:	6141      	strne	r1, [r0, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e8a:	6101      	streq	r1, [r0, #16]
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e90:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e92:	4604      	mov	r4, r0
 8000e94:	b908      	cbnz	r0, 8000e9a <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 8000e96:	2001      	movs	r0, #1
 8000e98:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ea2:	b91b      	cbnz	r3, 8000eac <HAL_I2C_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ea4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ea8:	f7ff fb56 	bl	8000558 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eac:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eae:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000eb4:	6813      	ldr	r3, [r2, #0]
 8000eb6:	f023 0301 	bic.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ebc:	f000 feda 	bl	8001c74 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ec0:	6865      	ldr	r5, [r4, #4]
 8000ec2:	4b41      	ldr	r3, [pc, #260]	; (8000fc8 <HAL_I2C_Init+0x138>)
 8000ec4:	429d      	cmp	r5, r3
 8000ec6:	d84d      	bhi.n	8000f64 <HAL_I2C_Init+0xd4>
 8000ec8:	4b40      	ldr	r3, [pc, #256]	; (8000fcc <HAL_I2C_Init+0x13c>)
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d9e3      	bls.n	8000e96 <HAL_I2C_Init+0x6>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ece:	4940      	ldr	r1, [pc, #256]	; (8000fd0 <HAL_I2C_Init+0x140>)

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ed0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000ed2:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ed6:	6853      	ldr	r3, [r2, #4]
 8000ed8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000edc:	430b      	orrs	r3, r1
 8000ede:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ee0:	6a13      	ldr	r3, [r2, #32]
 8000ee2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ee6:	3101      	adds	r1, #1
 8000ee8:	4319      	orrs	r1, r3
 8000eea:	6211      	str	r1, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000eec:	69d1      	ldr	r1, [r2, #28]
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <HAL_I2C_Init+0x138>)
 8000ef0:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000ef4:	429d      	cmp	r5, r3
 8000ef6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000efa:	f100 30ff 	add.w	r0, r0, #4294967295
 8000efe:	d848      	bhi.n	8000f92 <HAL_I2C_Init+0x102>
 8000f00:	006d      	lsls	r5, r5, #1
 8000f02:	fbb0 f0f5 	udiv	r0, r0, r5
 8000f06:	3001      	adds	r0, #1
 8000f08:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000f0c:	2b04      	cmp	r3, #4
 8000f0e:	bf38      	it	cc
 8000f10:	2304      	movcc	r3, #4
 8000f12:	430b      	orrs	r3, r1
 8000f14:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f16:	6811      	ldr	r1, [r2, #0]
 8000f18:	6a20      	ldr	r0, [r4, #32]
 8000f1a:	69e3      	ldr	r3, [r4, #28]
 8000f1c:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000f20:	4303      	orrs	r3, r0
 8000f22:	430b      	orrs	r3, r1
 8000f24:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f26:	6891      	ldr	r1, [r2, #8]
 8000f28:	68e0      	ldr	r0, [r4, #12]
 8000f2a:	6923      	ldr	r3, [r4, #16]
 8000f2c:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000f30:	4303      	orrs	r3, r0
 8000f32:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f36:	430b      	orrs	r3, r1
 8000f38:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f3a:	68d1      	ldr	r1, [r2, #12]
 8000f3c:	69a0      	ldr	r0, [r4, #24]
 8000f3e:	6963      	ldr	r3, [r4, #20]
 8000f40:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000f44:	4303      	orrs	r3, r0
 8000f46:	430b      	orrs	r3, r1
 8000f48:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f4a:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f4c:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8000f54:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f56:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f5c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5e:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000f62:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_I2C_Init+0x144>)
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d995      	bls.n	8000e96 <HAL_I2C_Init+0x6>
  freqrange = I2C_FREQRANGE(pclk1);
 8000f6a:	4e19      	ldr	r6, [pc, #100]	; (8000fd0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f6c:	f44f 7196 	mov.w	r1, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8000f70:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f74:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f76:	4371      	muls	r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f78:	6853      	ldr	r3, [r2, #4]
 8000f7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f7e:	4333      	orrs	r3, r6
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f80:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f84:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f86:	6a13      	ldr	r3, [r2, #32]
 8000f88:	fbb1 f1f6 	udiv	r1, r1, r6
 8000f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f90:	e7a9      	b.n	8000ee6 <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f92:	68a3      	ldr	r3, [r4, #8]
 8000f94:	b953      	cbnz	r3, 8000fac <HAL_I2C_Init+0x11c>
 8000f96:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8000f9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f9e:	1c43      	adds	r3, r0, #1
 8000fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa4:	b16b      	cbz	r3, 8000fc2 <HAL_I2C_Init+0x132>
 8000fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000faa:	e7b2      	b.n	8000f12 <HAL_I2C_Init+0x82>
 8000fac:	2319      	movs	r3, #25
 8000fae:	436b      	muls	r3, r5
 8000fb0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fb4:	1c43      	adds	r3, r0, #1
 8000fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fba:	b113      	cbz	r3, 8000fc2 <HAL_I2C_Init+0x132>
 8000fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc0:	e7a7      	b.n	8000f12 <HAL_I2C_Init+0x82>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e7a5      	b.n	8000f12 <HAL_I2C_Init+0x82>
 8000fc6:	bf00      	nop
 8000fc8:	000186a0 	.word	0x000186a0
 8000fcc:	001e847f 	.word	0x001e847f
 8000fd0:	000f4240 	.word	0x000f4240
 8000fd4:	003d08ff 	.word	0x003d08ff

08000fd8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000fda:	4604      	mov	r4, r0
{
 8000fdc:	b087      	sub	sp, #28
  if (hpcd == NULL)
 8000fde:	b310      	cbz	r0, 8001026 <HAL_PCD_Init+0x4e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fe0:	f890 3229 	ldrb.w	r3, [r0, #553]	; 0x229
 8000fe4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fe8:	b91b      	cbnz	r3, 8000ff2 <HAL_PCD_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fea:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fee:	f7ff fbcb 	bl	8000788 <HAL_PCD_MspInit>
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ff2:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ff4:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000ff6:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 8000ff8:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ffc:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  __HAL_PCD_DISABLE(hpcd);
 8001000:	f001 ff0a 	bl	8002e18 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	4625      	mov	r5, r4
 800100c:	6033      	str	r3, [r6, #0]
 800100e:	1d27      	adds	r7, r4, #4
 8001010:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001014:	f855 0b10 	ldr.w	r0, [r5], #16
 8001018:	f001 feee 	bl	8002df8 <USB_CoreInit>
 800101c:	4606      	mov	r6, r0
 800101e:	b120      	cbz	r0, 800102a <HAL_PCD_Init+0x52>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001020:	2302      	movs	r3, #2
 8001022:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
    return HAL_ERROR;
 8001026:	2501      	movs	r5, #1
 8001028:	e048      	b.n	80010bc <HAL_PCD_Init+0xe4>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800102a:	4601      	mov	r1, r0
 800102c:	6820      	ldr	r0, [r4, #0]
 800102e:	f001 fefd 	bl	8002e2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001032:	4630      	mov	r0, r6
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001034:	f04f 0e01 	mov.w	lr, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001038:	6861      	ldr	r1, [r4, #4]
 800103a:	b2c3      	uxtb	r3, r0
 800103c:	4299      	cmp	r1, r3
 800103e:	f100 0001 	add.w	r0, r0, #1
 8001042:	d817      	bhi.n	8001074 <HAL_PCD_Init+0x9c>
 8001044:	2200      	movs	r2, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001046:	4610      	mov	r0, r2
 8001048:	b2d3      	uxtb	r3, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800104a:	4299      	cmp	r1, r3
 800104c:	f102 0201 	add.w	r2, r2, #1
 8001050:	d81d      	bhi.n	800108e <HAL_PCD_Init+0xb6>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001052:	466e      	mov	r6, sp
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	6033      	str	r3, [r6, #0]
 800105c:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001060:	6820      	ldr	r0, [r4, #0]
 8001062:	f001 fee5 	bl	8002e30 <USB_DevInit>
 8001066:	2301      	movs	r3, #1
 8001068:	4605      	mov	r5, r0
 800106a:	b300      	cbz	r0, 80010ae <HAL_PCD_Init+0xd6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800106c:	2202      	movs	r2, #2
 800106e:	f884 2229 	strb.w	r2, [r4, #553]	; 0x229
 8001072:	e7d8      	b.n	8001026 <HAL_PCD_Init+0x4e>
    hpcd->IN_ep[i].is_in = 1U;
 8001074:	eb04 1243 	add.w	r2, r4, r3, lsl #5
 8001078:	f882 e029 	strb.w	lr, [r2, #41]	; 0x29
    hpcd->IN_ep[i].num = i;
 800107c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001080:	86d3      	strh	r3, [r2, #54]	; 0x36
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001082:	f882 602b 	strb.w	r6, [r2, #43]	; 0x2b
    hpcd->IN_ep[i].maxpacket = 0U;
 8001086:	6396      	str	r6, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001088:	63d6      	str	r6, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800108a:	6416      	str	r6, [r2, #64]	; 0x40
 800108c:	e7d5      	b.n	800103a <HAL_PCD_Init+0x62>
    hpcd->OUT_ep[i].is_in = 0U;
 800108e:	eb04 1643 	add.w	r6, r4, r3, lsl #5
    hpcd->OUT_ep[i].num = i;
 8001092:	f886 3128 	strb.w	r3, [r6, #296]	; 0x128
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001096:	330a      	adds	r3, #10
 8001098:	015b      	lsls	r3, r3, #5
    hpcd->OUT_ep[i].is_in = 0U;
 800109a:	f886 0129 	strb.w	r0, [r6, #297]	; 0x129
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800109e:	f886 012b 	strb.w	r0, [r6, #299]	; 0x12b
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010a2:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010a6:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010aa:	50e0      	str	r0, [r4, r3]
 80010ac:	e7cc      	b.n	8001048 <HAL_PCD_Init+0x70>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 80010ae:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80010b2:	f884 3229 	strb.w	r3, [r4, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80010b6:	6820      	ldr	r0, [r4, #0]
 80010b8:	f002 f9a0 	bl	80033fc <USB_DevDisconnect>

  return HAL_OK;
}
 80010bc:	4628      	mov	r0, r5
 80010be:	b007      	add	sp, #28
 80010c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010c2 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80010c2:	f890 3228 	ldrb.w	r3, [r0, #552]	; 0x228
{
 80010c6:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80010c8:	2b01      	cmp	r3, #1
{
 80010ca:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80010cc:	d00e      	beq.n	80010ec <HAL_PCD_Start+0x2a>
 80010ce:	2101      	movs	r1, #1
 80010d0:	f880 1228 	strb.w	r1, [r0, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80010d4:	f7ff fc81 	bl	80009da <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80010d8:	6820      	ldr	r0, [r4, #0]
 80010da:	f002 f98d 	bl	80033f8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80010de:	6820      	ldr	r0, [r4, #0]
 80010e0:	f001 fe91 	bl	8002e06 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80010ea:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80010ec:	2002      	movs	r0, #2
}
 80010ee:	bd10      	pop	{r4, pc}

080010f0 <HAL_PCD_SetAddress>:
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 80010f0:	f890 2228 	ldrb.w	r2, [r0, #552]	; 0x228
{
 80010f4:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80010f6:	2a01      	cmp	r2, #1
{
 80010f8:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80010fa:	d00b      	beq.n	8001114 <HAL_PCD_SetAddress+0x24>
 80010fc:	2201      	movs	r2, #1
 80010fe:	f880 2228 	strb.w	r2, [r0, #552]	; 0x228
  hpcd->USB_Address = address;
 8001102:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001106:	6800      	ldr	r0, [r0, #0]
 8001108:	f002 f970 	bl	80033ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800110c:	2000      	movs	r0, #0
 800110e:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
 8001112:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001114:	2002      	movs	r0, #2
  return HAL_OK;
}
 8001116:	bd10      	pop	{r4, pc}

08001118 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800111a:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 800111e:	4604      	mov	r4, r0
 8001120:	f001 0007 	and.w	r0, r1, #7
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001124:	ea4f 1540 	mov.w	r5, r0, lsl #5
  if ((ep_addr & 0x80U) == 0x80U)
 8001128:	d01f      	beq.n	800116a <HAL_PCD_EP_Open+0x52>
    ep->is_in = 1U;
 800112a:	2601      	movs	r6, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800112c:	f105 0128 	add.w	r1, r5, #40	; 0x28
    ep->is_in = 1U;
 8001130:	4425      	add	r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001132:	4421      	add	r1, r4
    ep->is_in = 1U;
 8001134:	f885 6029 	strb.w	r6, [r5, #41]	; 0x29
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }

  ep->num = ep_addr & EP_ADDR_MSK;
  ep->maxpacket = ep_mps;
 8001138:	610a      	str	r2, [r1, #16]
  ep->type = ep_type;

  if (ep->is_in != 0U)
 800113a:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800113c:	b2c0      	uxtb	r0, r0
 800113e:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8001140:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8001142:	b102      	cbz	r2, 8001146 <HAL_PCD_EP_Open+0x2e>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001144:	81c8      	strh	r0, [r1, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001146:	2b02      	cmp	r3, #2
  {
    ep->data_pid_start = 0U;
 8001148:	bf04      	itt	eq
 800114a:	2300      	moveq	r3, #0
 800114c:	710b      	strbeq	r3, [r1, #4]
  }

  __HAL_LOCK(hpcd);
 800114e:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001152:	2b01      	cmp	r3, #1
 8001154:	d011      	beq.n	800117a <HAL_PCD_EP_Open+0x62>
 8001156:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001158:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800115a:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800115e:	f001 fe83 	bl	8002e68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001162:	2000      	movs	r0, #0
 8001164:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228

  return ret;
 8001168:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 800116a:	2600      	movs	r6, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800116c:	f505 7194 	add.w	r1, r5, #296	; 0x128
    ep->is_in = 0U;
 8001170:	4425      	add	r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001172:	4421      	add	r1, r4
    ep->is_in = 0U;
 8001174:	f885 6129 	strb.w	r6, [r5, #297]	; 0x129
 8001178:	e7de      	b.n	8001138 <HAL_PCD_EP_Open+0x20>
  __HAL_LOCK(hpcd);
 800117a:	2002      	movs	r0, #2
}
 800117c:	bd70      	pop	{r4, r5, r6, pc}

0800117e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800117e:	f001 0307 	and.w	r3, r1, #7
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001182:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8001186:	b510      	push	{r4, lr}
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001188:	ea4f 1243 	mov.w	r2, r3, lsl #5
{
 800118c:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800118e:	d015      	beq.n	80011bc <HAL_PCD_EP_Close+0x3e>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001190:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8001194:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001196:	4402      	add	r2, r0
 8001198:	2001      	movs	r0, #1
 800119a:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
    ep->is_in = 0U;
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800119e:	700b      	strb	r3, [r1, #0]

  __HAL_LOCK(hpcd);
 80011a0:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d011      	beq.n	80011cc <HAL_PCD_EP_Close+0x4e>
 80011a8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011aa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80011ac:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011b0:	f001 ffd2 	bl	8003158 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80011ba:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011bc:	f502 7194 	add.w	r1, r2, #296	; 0x128
 80011c0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80011c2:	4402      	add	r2, r0
 80011c4:	2000      	movs	r0, #0
 80011c6:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 80011ca:	e7e8      	b.n	800119e <HAL_PCD_EP_Close+0x20>
  __HAL_LOCK(hpcd);
 80011cc:	2002      	movs	r0, #2
}
 80011ce:	bd10      	pop	{r4, pc}

080011d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011d0:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 80011d2:	2600      	movs	r6, #0
 80011d4:	f001 0107 	and.w	r1, r1, #7
 80011d8:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;
 80011da:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & EP_ADDR_MSK;
 80011dc:	f884 1128 	strb.w	r1, [r4, #296]	; 0x128
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011e0:	f505 7194 	add.w	r1, r5, #296	; 0x128
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011e4:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 80011e6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
  ep->xfer_len = len;
 80011ea:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
  ep->xfer_count = 0U;
 80011ee:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
  ep->is_in = 0U;
 80011f2:	f884 6129 	strb.w	r6, [r4, #297]	; 0x129
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011f6:	6800      	ldr	r0, [r0, #0]
 80011f8:	f002 f918 	bl	800342c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80011fc:	4630      	mov	r0, r6
 80011fe:	bd70      	pop	{r4, r5, r6, pc}

08001200 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001200:	f001 0107 	and.w	r1, r1, #7
 8001204:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8001208:	f8d1 0144 	ldr.w	r0, [r1, #324]	; 0x144
 800120c:	4770      	bx	lr

0800120e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800120e:	f001 0107 	and.w	r1, r1, #7
 8001212:	b570      	push	{r4, r5, r6, lr}
 8001214:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001216:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8001218:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 800121a:	2600      	movs	r6, #0
  ep->is_in = 1U;
 800121c:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800121e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001222:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001226:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;
 8001228:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800122a:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800122c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001230:	6800      	ldr	r0, [r0, #0]
 8001232:	f002 f8fb 	bl	800342c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001236:	4630      	mov	r0, r6
 8001238:	bd70      	pop	{r4, r5, r6, pc}
	...

0800123c <HAL_PCD_IRQHandler>:
{
 800123c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001240:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001242:	6800      	ldr	r0, [r0, #0]
 8001244:	f002 f8dc 	bl	8003400 <USB_ReadInterrupts>
 8001248:	0402      	lsls	r2, r0, #16
 800124a:	f100 8210 	bmi.w	800166e <HAL_PCD_IRQHandler+0x432>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800124e:	6820      	ldr	r0, [r4, #0]
 8001250:	f002 f8d6 	bl	8003400 <USB_ReadInterrupts>
 8001254:	0543      	lsls	r3, r0, #21
 8001256:	d50f      	bpl.n	8001278 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001258:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 800125a:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800125c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001264:	041b      	lsls	r3, r3, #16
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 800126c:	f7ff fac3 	bl	80007f6 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001270:	2100      	movs	r1, #0
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff ff3c 	bl	80010f0 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001278:	6820      	ldr	r0, [r4, #0]
 800127a:	f002 f8c1 	bl	8003400 <USB_ReadInterrupts>
 800127e:	0447      	lsls	r7, r0, #17
 8001280:	d508      	bpl.n	8001294 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001282:	6822      	ldr	r2, [r4, #0]
 8001284:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800128c:	041b      	lsls	r3, r3, #16
 800128e:	0c1b      	lsrs	r3, r3, #16
 8001290:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001294:	6820      	ldr	r0, [r4, #0]
 8001296:	f002 f8b3 	bl	8003400 <USB_ReadInterrupts>
 800129a:	0486      	lsls	r6, r0, #18
 800129c:	d508      	bpl.n	80012b0 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800129e:	6822      	ldr	r2, [r4, #0]
 80012a0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	0c1b      	lsrs	r3, r3, #16
 80012ac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80012b0:	6820      	ldr	r0, [r4, #0]
 80012b2:	f002 f8a5 	bl	8003400 <USB_ReadInterrupts>
 80012b6:	04c5      	lsls	r5, r0, #19
 80012b8:	d51c      	bpl.n	80012f4 <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012ba:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80012bc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80012be:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80012c2:	f023 0304 	bic.w	r3, r3, #4
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80012ce:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80012d2:	f023 0308 	bic.w	r3, r3, #8
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	0c1b      	lsrs	r3, r3, #16
 80012da:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 80012de:	f7ff faad 	bl	800083c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80012e2:	6822      	ldr	r2, [r4, #0]
 80012e4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80012e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	0c1b      	lsrs	r3, r3, #16
 80012f0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80012f4:	6820      	ldr	r0, [r4, #0]
 80012f6:	f002 f883 	bl	8003400 <USB_ReadInterrupts>
 80012fa:	0500      	lsls	r0, r0, #20
 80012fc:	d526      	bpl.n	800134c <HAL_PCD_IRQHandler+0x110>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80012fe:	6820      	ldr	r0, [r4, #0]
 8001300:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001304:	b29b      	uxth	r3, r3
 8001306:	f043 0308 	orr.w	r3, r3, #8
 800130a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800130e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001316:	041b      	lsls	r3, r3, #16
 8001318:	0c1b      	lsrs	r3, r3, #16
 800131a:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 800131e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001322:	b29b      	uxth	r3, r3
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800132c:	f002 f868 	bl	8003400 <USB_ReadInterrupts>
 8001330:	04c1      	lsls	r1, r0, #19
 8001332:	d508      	bpl.n	8001346 <HAL_PCD_IRQHandler+0x10a>
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001334:	6822      	ldr	r2, [r4, #0]
 8001336:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800133a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800133e:	041b      	lsls	r3, r3, #16
 8001340:	0c1b      	lsrs	r3, r3, #16
 8001342:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SuspendCallback(hpcd);
 8001346:	4620      	mov	r0, r4
 8001348:	f7ff fa68 	bl	800081c <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800134c:	6820      	ldr	r0, [r4, #0]
 800134e:	f002 f857 	bl	8003400 <USB_ReadInterrupts>
 8001352:	0582      	lsls	r2, r0, #22
 8001354:	d50b      	bpl.n	800136e <HAL_PCD_IRQHandler+0x132>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001356:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8001358:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800135a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800135e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001362:	041b      	lsls	r3, r3, #16
 8001364:	0c1b      	lsrs	r3, r3, #16
 8001366:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800136a:	f7ff fa40 	bl	80007ee <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800136e:	6820      	ldr	r0, [r4, #0]
 8001370:	f002 f846 	bl	8003400 <USB_ReadInterrupts>
 8001374:	05c3      	lsls	r3, r0, #23
 8001376:	d508      	bpl.n	800138a <HAL_PCD_IRQHandler+0x14e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001378:	6822      	ldr	r2, [r4, #0]
 800137a:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800137e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	0c1b      	lsrs	r3, r3, #16
 8001386:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 800138a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;
 800138e:	f8b0 1044 	ldrh.w	r1, [r0, #68]	; 0x44
 8001392:	b289      	uxth	r1, r1
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);

    if (epindex == 0U)
 8001394:	f011 060f 	ands.w	r6, r1, #15
 8001398:	f040 80b7 	bne.w	800150a <HAL_PCD_IRQHandler+0x2ce>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800139c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800139e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013a2:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013a4:	d12c      	bne.n	8001400 <HAL_PCD_IRQHandler+0x1c4>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013a6:	ea03 0309 	and.w	r3, r3, r9
 80013aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013ae:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013b0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80013b4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80013be:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80013c2:	f8b0 3404 	ldrh.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 80013c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80013c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013cc:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80013ce:	4413      	add	r3, r2
 80013d0:	63e3      	str	r3, [r4, #60]	; 0x3c

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80013d2:	4620      	mov	r0, r4
 80013d4:	f7ff fa04 	bl	80007e0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80013d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80013dc:	b153      	cbz	r3, 80013f4 <HAL_PCD_IRQHandler+0x1b8>
 80013de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80013e0:	b942      	cbnz	r2, 80013f4 <HAL_PCD_IRQHandler+0x1b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80013e2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80013e6:	6821      	ldr	r1, [r4, #0]
 80013e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ec:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80013f0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013f4:	6820      	ldr	r0, [r4, #0]
 80013f6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80013fa:	041b      	lsls	r3, r3, #16
 80013fc:	d4c7      	bmi.n	800138e <HAL_PCD_IRQHandler+0x152>
 80013fe:	e726      	b.n	800124e <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001400:	f413 6500 	ands.w	r5, r3, #2048	; 0x800
 8001404:	d021      	beq.n	800144a <HAL_PCD_IRQHandler+0x20e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001406:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800140a:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 800140e:	b29b      	uxth	r3, r3
 8001410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001414:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001418:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800141c:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001420:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001424:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001428:	f504 710c 	add.w	r1, r4, #560	; 0x230
 800142c:	f002 f8e6 	bl	80035fc <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001430:	6822      	ldr	r2, [r4, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001432:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001434:	8813      	ldrh	r3, [r2, #0]
 8001436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800143a:	051b      	lsls	r3, r3, #20
 800143c:	0d1b      	lsrs	r3, r3, #20
 800143e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001442:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001444:	f7ff f9be 	bl	80007c4 <HAL_PCD_SetupStageCallback>
 8001448:	e7d4      	b.n	80013f4 <HAL_PCD_IRQHandler+0x1b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800144a:	041f      	lsls	r7, r3, #16
 800144c:	d5d2      	bpl.n	80013f4 <HAL_PCD_IRQHandler+0x1b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800144e:	8803      	ldrh	r3, [r0, #0]
 8001450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001454:	051b      	lsls	r3, r3, #20
 8001456:	0d1b      	lsrs	r3, r3, #20
 8001458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800145c:	8003      	strh	r3, [r0, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800145e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001462:	f894 2128 	ldrb.w	r2, [r4, #296]	; 0x128
 8001466:	b29b      	uxth	r3, r3
 8001468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800146c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001470:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	; 0x40c
 8001474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001478:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800147c:	b18b      	cbz	r3, 80014a2 <HAL_PCD_IRQHandler+0x266>
 800147e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
 8001482:	b171      	cbz	r1, 80014a2 <HAL_PCD_IRQHandler+0x266>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001484:	f8b4 212e 	ldrh.w	r2, [r4, #302]	; 0x12e
 8001488:	f002 f8b8 	bl	80035fc <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 800148c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8001490:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001494:	4629      	mov	r1, r5
            ep->xfer_buff += ep->xfer_count;
 8001496:	4413      	add	r3, r2
 8001498:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff f997 	bl	80007d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014a2:	6821      	ldr	r1, [r4, #0]
 80014a4:	f8d4 5138 	ldr.w	r5, [r4, #312]	; 0x138
 80014a8:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80014ac:	f201 400c 	addw	r0, r1, #1036	; 0x40c
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	b9cd      	cbnz	r5, 80014e8 <HAL_PCD_IRQHandler+0x2ac>
 80014b4:	5ac2      	ldrh	r2, [r0, r3]
 80014b6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80014ba:	0412      	lsls	r2, r2, #16
 80014bc:	0c12      	lsrs	r2, r2, #16
 80014be:	52c2      	strh	r2, [r0, r3]
 80014c0:	5ac2      	ldrh	r2, [r0, r3]
 80014c2:	b292      	uxth	r2, r2
 80014c4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014c8:	52c2      	strh	r2, [r0, r3]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80014ca:	880b      	ldrh	r3, [r1, #0]
 80014cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014d4:	041b      	lsls	r3, r3, #16
 80014d6:	0c1b      	lsrs	r3, r3, #16
 80014d8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80014dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e4:	800b      	strh	r3, [r1, #0]
 80014e6:	e785      	b.n	80013f4 <HAL_PCD_IRQHandler+0x1b8>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80014e8:	2d3e      	cmp	r5, #62	; 0x3e
 80014ea:	d806      	bhi.n	80014fa <HAL_PCD_IRQHandler+0x2be>
 80014ec:	086a      	lsrs	r2, r5, #1
 80014ee:	07ee      	lsls	r6, r5, #31
 80014f0:	bf48      	it	mi
 80014f2:	3201      	addmi	r2, #1
 80014f4:	0292      	lsls	r2, r2, #10
 80014f6:	b292      	uxth	r2, r2
 80014f8:	e7e6      	b.n	80014c8 <HAL_PCD_IRQHandler+0x28c>
 80014fa:	096a      	lsrs	r2, r5, #5
 80014fc:	06ed      	lsls	r5, r5, #27
 80014fe:	bf08      	it	eq
 8001500:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001504:	ea4a 2282 	orr.w	r2, sl, r2, lsl #10
 8001508:	e7f5      	b.n	80014f6 <HAL_PCD_IRQHandler+0x2ba>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800150a:	f830 8026 	ldrh.w	r8, [r0, r6, lsl #2]
 800150e:	fa1f f888 	uxth.w	r8, r8
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001512:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8001516:	d03d      	beq.n	8001594 <HAL_PCD_IRQHandler+0x358>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001518:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
        ep = &hpcd->OUT_ep[epindex];

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800151c:	0177      	lsls	r7, r6, #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800151e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001522:	051b      	lsls	r3, r3, #20
 8001524:	0d1b      	lsrs	r3, r3, #20
 8001526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152a:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 800152e:	19e1      	adds	r1, r4, r7
 8001530:	f891 3134 	ldrb.w	r3, [r1, #308]	; 0x134
 8001534:	2b00      	cmp	r3, #0
 8001536:	d158      	bne.n	80015ea <HAL_PCD_IRQHandler+0x3ae>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001538:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800153c:	f891 2128 	ldrb.w	r2, [r1, #296]	; 0x128
 8001540:	b29b      	uxth	r3, r3
 8001542:	3306      	adds	r3, #6
 8001544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001548:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800154c:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 8001550:	f3c5 0509 	ubfx	r5, r5, #0, #10
          if (count != 0U)
 8001554:	b135      	cbz	r5, 8001564 <HAL_PCD_IRQHandler+0x328>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001556:	f8b1 212e 	ldrh.w	r2, [r1, #302]	; 0x12e
 800155a:	462b      	mov	r3, r5
 800155c:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 8001560:	f002 f84c 	bl	80035fc <USB_ReadPMA>
 8001564:	19e1      	adds	r1, r4, r7
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001566:	f8d1 3144 	ldr.w	r3, [r1, #324]	; 0x144
        ep->xfer_buff += count;
 800156a:	f8d1 213c 	ldr.w	r2, [r1, #316]	; 0x13c
        ep->xfer_count += count;
 800156e:	442b      	add	r3, r5
 8001570:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001574:	f8d1 3140 	ldr.w	r3, [r1, #320]	; 0x140
        ep->xfer_buff += count;
 8001578:	442a      	add	r2, r5
 800157a:	f8c1 213c 	str.w	r2, [r1, #316]	; 0x13c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800157e:	b11b      	cbz	r3, 8001588 <HAL_PCD_IRQHandler+0x34c>
 8001580:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
 8001584:	4285      	cmp	r5, r0
 8001586:	d269      	bcs.n	800165c <HAL_PCD_IRQHandler+0x420>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001588:	4427      	add	r7, r4
 800158a:	f897 1128 	ldrb.w	r1, [r7, #296]	; 0x128
 800158e:	4620      	mov	r0, r4
 8001590:	f7ff f91e 	bl	80007d0 <HAL_PCD_DataOutStageCallback>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001594:	f018 0f80 	tst.w	r8, #128	; 0x80
 8001598:	f43f af2c 	beq.w	80013f4 <HAL_PCD_IRQHandler+0x1b8>
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800159c:	6821      	ldr	r1, [r4, #0]
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800159e:	4620      	mov	r0, r4
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80015a0:	f831 2026 	ldrh.w	r2, [r1, r6, lsl #2]
 80015a4:	b292      	uxth	r2, r2
 80015a6:	ea02 0209 	and.w	r2, r2, r9
 80015aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ae:	f821 2026 	strh.w	r2, [r1, r6, lsl #2]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015b2:	f8b1 3050 	ldrh.w	r3, [r1, #80]	; 0x50
 80015b6:	eb04 1646 	add.w	r6, r4, r6, lsl #5
 80015ba:	f896 2028 	ldrb.w	r2, [r6, #40]	; 0x28
 80015be:	b29b      	uxth	r3, r3
 80015c0:	3302      	adds	r3, #2
 80015c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80015c6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80015ca:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff += ep->xfer_count;
 80015ce:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80015d0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80015d4:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 80015d6:	441a      	add	r2, r3
        if (ep->xfer_len == 0U)
 80015d8:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 80015da:	63f2      	str	r2, [r6, #60]	; 0x3c
 80015dc:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
        if (ep->xfer_len == 0U)
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d141      	bne.n	8001668 <HAL_PCD_IRQHandler+0x42c>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80015e4:	f7ff f8fc 	bl	80007e0 <HAL_PCD_DataInStageCallback>
 80015e8:	e704      	b.n	80013f4 <HAL_PCD_IRQHandler+0x1b8>
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015ea:	f891 3128 	ldrb.w	r3, [r1, #296]	; 0x128
 80015ee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80015f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80015fc:	b292      	uxth	r2, r2
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80015fe:	d01f      	beq.n	8001640 <HAL_PCD_IRQHandler+0x404>
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001600:	3202      	adds	r2, #2
 8001602:	4413      	add	r3, r2
 8001604:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001608:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 800160c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001610:	b135      	cbz	r5, 8001620 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001612:	462b      	mov	r3, r5
 8001614:	f8b1 2130 	ldrh.w	r2, [r1, #304]	; 0x130
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001618:	f8d1 113c 	ldr.w	r1, [r1, #316]	; 0x13c
 800161c:	f001 ffee 	bl	80035fc <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001620:	19e3      	adds	r3, r4, r7
 8001622:	f893 1128 	ldrb.w	r1, [r3, #296]	; 0x128
 8001626:	6822      	ldr	r2, [r4, #0]
 8001628:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800162c:	b29b      	uxth	r3, r3
 800162e:	ea03 030b 	and.w	r3, r3, fp
 8001632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001636:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800163a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 800163e:	e791      	b.n	8001564 <HAL_PCD_IRQHandler+0x328>
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001640:	3206      	adds	r2, #6
 8001642:	4413      	add	r3, r2
 8001644:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001648:	f8b3 5400 	ldrh.w	r5, [r3, #1024]	; 0x400
 800164c:	f3c5 0509 	ubfx	r5, r5, #0, #10
            if (count != 0U)
 8001650:	2d00      	cmp	r5, #0
 8001652:	d0e5      	beq.n	8001620 <HAL_PCD_IRQHandler+0x3e4>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001654:	462b      	mov	r3, r5
 8001656:	f8b1 2132 	ldrh.w	r2, [r1, #306]	; 0x132
 800165a:	e7dd      	b.n	8001618 <HAL_PCD_IRQHandler+0x3dc>
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800165c:	f891 1128 	ldrb.w	r1, [r1, #296]	; 0x128
 8001660:	4620      	mov	r0, r4
 8001662:	f7ff fdb5 	bl	80011d0 <HAL_PCD_EP_Receive>
 8001666:	e795      	b.n	8001594 <HAL_PCD_IRQHandler+0x358>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001668:	f7ff fdd1 	bl	800120e <HAL_PCD_EP_Transmit>
 800166c:	e6c2      	b.n	80013f4 <HAL_PCD_IRQHandler+0x1b8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800166e:	f8df 900c 	ldr.w	r9, [pc, #12]	; 800167c <HAL_PCD_IRQHandler+0x440>
 8001672:	f8df a00c 	ldr.w	sl, [pc, #12]	; 8001680 <HAL_PCD_IRQHandler+0x444>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001676:	f8df b00c 	ldr.w	fp, [pc, #12]	; 8001684 <HAL_PCD_IRQHandler+0x448>
 800167a:	e6bb      	b.n	80013f4 <HAL_PCD_IRQHandler+0x1b8>
 800167c:	ffff8f0f 	.word	0xffff8f0f
 8001680:	ffff8000 	.word	0xffff8000
 8001684:	ffff8f8f 	.word	0xffff8f8f

08001688 <HAL_PCD_EP_SetStall>:
{
 8001688:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800168a:	6843      	ldr	r3, [r0, #4]
 800168c:	f001 0507 	and.w	r5, r1, #7
 8001690:	429d      	cmp	r5, r3
{
 8001692:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001694:	d828      	bhi.n	80016e8 <HAL_PCD_EP_SetStall+0x60>
  if ((0x80U & ep_addr) == 0x80U)
 8001696:	060b      	lsls	r3, r1, #24
 8001698:	d51d      	bpl.n	80016d6 <HAL_PCD_EP_SetStall+0x4e>
    ep->is_in = 1U;
 800169a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800169c:	016b      	lsls	r3, r5, #5
 800169e:	f103 0128 	add.w	r1, r3, #40	; 0x28
    ep->is_in = 1U;
 80016a2:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016a4:	4401      	add	r1, r0
    ep->is_in = 1U;
 80016a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ep->is_stall = 1U;
 80016aa:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80016ac:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80016ae:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80016b0:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d019      	beq.n	80016ec <HAL_PCD_EP_SetStall+0x64>
 80016b8:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	f001 fe2a 	bl	8003316 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80016c2:	b925      	cbnz	r5, 80016ce <HAL_PCD_EP_SetStall+0x46>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80016c4:	f504 710c 	add.w	r1, r4, #560	; 0x230
 80016c8:	6820      	ldr	r0, [r4, #0]
 80016ca:	f001 fe9d 	bl	8003408 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f884 0228 	strb.w	r0, [r4, #552]	; 0x228
  return HAL_OK;
 80016d4:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80016d6:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80016d8:	014b      	lsls	r3, r1, #5
 80016da:	f503 7194 	add.w	r1, r3, #296	; 0x128
    ep->is_in = 0U;
 80016de:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80016e0:	4401      	add	r1, r0
    ep->is_in = 0U;
 80016e2:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
 80016e6:	e7e0      	b.n	80016aa <HAL_PCD_EP_SetStall+0x22>
    return HAL_ERROR;
 80016e8:	2001      	movs	r0, #1
 80016ea:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80016ec:	2002      	movs	r0, #2
}
 80016ee:	bd38      	pop	{r3, r4, r5, pc}

080016f0 <HAL_PCD_EP_ClrStall>:
{
 80016f0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016f2:	6843      	ldr	r3, [r0, #4]
 80016f4:	f001 020f 	and.w	r2, r1, #15
 80016f8:	429a      	cmp	r2, r3
{
 80016fa:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016fc:	d826      	bhi.n	800174c <HAL_PCD_EP_ClrStall+0x5c>
 80016fe:	f001 0307 	and.w	r3, r1, #7
  if ((0x80U & ep_addr) == 0x80U)
 8001702:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001706:	ea4f 1243 	mov.w	r2, r3, lsl #5
  if ((0x80U & ep_addr) == 0x80U)
 800170a:	d017      	beq.n	800173c <HAL_PCD_EP_ClrStall+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800170c:	f102 0128 	add.w	r1, r2, #40	; 0x28
 8001710:	4401      	add	r1, r0
    ep->is_in = 1U;
 8001712:	4402      	add	r2, r0
 8001714:	2001      	movs	r0, #1
 8001716:	f882 0029 	strb.w	r0, [r2, #41]	; 0x29
  ep->is_stall = 0U;
 800171a:	2500      	movs	r5, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 800171c:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800171e:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8001720:	f894 3228 	ldrb.w	r3, [r4, #552]	; 0x228
 8001724:	2b01      	cmp	r3, #1
 8001726:	d013      	beq.n	8001750 <HAL_PCD_EP_ClrStall+0x60>
 8001728:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800172a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800172c:	f884 3228 	strb.w	r3, [r4, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001730:	f001 fe11 	bl	8003356 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001734:	f884 5228 	strb.w	r5, [r4, #552]	; 0x228
  return HAL_OK;
 8001738:	4628      	mov	r0, r5
 800173a:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800173c:	f502 7194 	add.w	r1, r2, #296	; 0x128
 8001740:	4401      	add	r1, r0
    ep->is_in = 0U;
 8001742:	4402      	add	r2, r0
 8001744:	2000      	movs	r0, #0
 8001746:	f882 0129 	strb.w	r0, [r2, #297]	; 0x129
 800174a:	e7e6      	b.n	800171a <HAL_PCD_EP_ClrStall+0x2a>
    return HAL_ERROR;
 800174c:	2001      	movs	r0, #1
 800174e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001750:	2002      	movs	r0, #2
}
 8001752:	bd38      	pop	{r3, r4, r5, pc}

08001754 <HAL_PCDEx_PMAConfig>:
                                       uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001754:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001758:	bf1b      	ittet	ne
 800175a:	f001 0107 	andne.w	r1, r1, #7
 800175e:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001762:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001766:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001768:	bf08      	it	eq
 800176a:	f500 7094 	addeq.w	r0, r0, #296	; 0x128
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800176e:	b91a      	cbnz	r2, 8001778 <HAL_PCDEx_PMAConfig+0x24>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001770:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001772:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8001774:	2000      	movs	r0, #0
 8001776:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001778:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800177a:	8103      	strh	r3, [r0, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800177c:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 800177e:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001780:	8143      	strh	r3, [r0, #10]
 8001782:	e7f7      	b.n	8001774 <HAL_PCDEx_PMAConfig+0x20>

08001784 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001788:	4605      	mov	r5, r0
 800178a:	b908      	cbnz	r0, 8001790 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 800178c:	2001      	movs	r0, #1
 800178e:	e03c      	b.n	800180a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001790:	6803      	ldr	r3, [r0, #0]
 8001792:	07db      	lsls	r3, r3, #31
 8001794:	d410      	bmi.n	80017b8 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001796:	682b      	ldr	r3, [r5, #0]
 8001798:	079f      	lsls	r7, r3, #30
 800179a:	d45d      	bmi.n	8001858 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	682b      	ldr	r3, [r5, #0]
 800179e:	0719      	lsls	r1, r3, #28
 80017a0:	f100 8094 	bmi.w	80018cc <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a4:	682b      	ldr	r3, [r5, #0]
 80017a6:	075a      	lsls	r2, r3, #29
 80017a8:	f100 80be 	bmi.w	8001928 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ac:	69e8      	ldr	r0, [r5, #28]
 80017ae:	2800      	cmp	r0, #0
 80017b0:	f040 812c 	bne.w	8001a0c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 80017b4:	2000      	movs	r0, #0
 80017b6:	e028      	b.n	800180a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017b8:	4c8f      	ldr	r4, [pc, #572]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 80017ba:	6863      	ldr	r3, [r4, #4]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d007      	beq.n	80017d4 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c4:	6863      	ldr	r3, [r4, #4]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d109      	bne.n	80017e2 <HAL_RCC_OscConfig+0x5e>
 80017ce:	6863      	ldr	r3, [r4, #4]
 80017d0:	03de      	lsls	r6, r3, #15
 80017d2:	d506      	bpl.n	80017e2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	039c      	lsls	r4, r3, #14
 80017d8:	d5dd      	bpl.n	8001796 <HAL_RCC_OscConfig+0x12>
 80017da:	686b      	ldr	r3, [r5, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1da      	bne.n	8001796 <HAL_RCC_OscConfig+0x12>
 80017e0:	e7d4      	b.n	800178c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	686b      	ldr	r3, [r5, #4]
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e8:	d112      	bne.n	8001810 <HAL_RCC_OscConfig+0x8c>
 80017ea:	6823      	ldr	r3, [r4, #0]
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017f2:	f7ff f9d3 	bl	8000b9c <HAL_GetTick>
 80017f6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f8:	6823      	ldr	r3, [r4, #0]
 80017fa:	0398      	lsls	r0, r3, #14
 80017fc:	d4cb      	bmi.n	8001796 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fe:	f7ff f9cd 	bl	8000b9c <HAL_GetTick>
 8001802:	1b80      	subs	r0, r0, r6
 8001804:	2864      	cmp	r0, #100	; 0x64
 8001806:	d9f7      	bls.n	80017f8 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001808:	2003      	movs	r0, #3
}
 800180a:	b002      	add	sp, #8
 800180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001810:	b99b      	cbnz	r3, 800183a <HAL_RCC_OscConfig+0xb6>
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001818:	6023      	str	r3, [r4, #0]
 800181a:	6823      	ldr	r3, [r4, #0]
 800181c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001820:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001822:	f7ff f9bb 	bl	8000b9c <HAL_GetTick>
 8001826:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	0399      	lsls	r1, r3, #14
 800182c:	d5b3      	bpl.n	8001796 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800182e:	f7ff f9b5 	bl	8000b9c <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	2864      	cmp	r0, #100	; 0x64
 8001836:	d9f7      	bls.n	8001828 <HAL_RCC_OscConfig+0xa4>
 8001838:	e7e6      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	d103      	bne.n	800184a <HAL_RCC_OscConfig+0xc6>
 8001842:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001846:	6023      	str	r3, [r4, #0]
 8001848:	e7cf      	b.n	80017ea <HAL_RCC_OscConfig+0x66>
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6023      	str	r3, [r4, #0]
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001856:	e7cb      	b.n	80017f0 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001858:	4c67      	ldr	r4, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 800185a:	6863      	ldr	r3, [r4, #4]
 800185c:	f013 0f0c 	tst.w	r3, #12
 8001860:	d007      	beq.n	8001872 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001862:	6863      	ldr	r3, [r4, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b08      	cmp	r3, #8
 800186a:	d110      	bne.n	800188e <HAL_RCC_OscConfig+0x10a>
 800186c:	6863      	ldr	r3, [r4, #4]
 800186e:	03da      	lsls	r2, r3, #15
 8001870:	d40d      	bmi.n	800188e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	079b      	lsls	r3, r3, #30
 8001876:	d502      	bpl.n	800187e <HAL_RCC_OscConfig+0xfa>
 8001878:	692b      	ldr	r3, [r5, #16]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d186      	bne.n	800178c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	696a      	ldr	r2, [r5, #20]
 8001882:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001886:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800188a:	6023      	str	r3, [r4, #0]
 800188c:	e786      	b.n	800179c <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800188e:	692a      	ldr	r2, [r5, #16]
 8001890:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <HAL_RCC_OscConfig+0x278>)
 8001892:	b16a      	cbz	r2, 80018b0 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8001894:	2201      	movs	r2, #1
 8001896:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001898:	f7ff f980 	bl	8000b9c <HAL_GetTick>
 800189c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	079f      	lsls	r7, r3, #30
 80018a2:	d4ec      	bmi.n	800187e <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff f97a 	bl	8000b9c <HAL_GetTick>
 80018a8:	1b80      	subs	r0, r0, r6
 80018aa:	2802      	cmp	r0, #2
 80018ac:	d9f7      	bls.n	800189e <HAL_RCC_OscConfig+0x11a>
 80018ae:	e7ab      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 80018b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018b2:	f7ff f973 	bl	8000b9c <HAL_GetTick>
 80018b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	0798      	lsls	r0, r3, #30
 80018bc:	f57f af6e 	bpl.w	800179c <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff f96c 	bl	8000b9c <HAL_GetTick>
 80018c4:	1b80      	subs	r0, r0, r6
 80018c6:	2802      	cmp	r0, #2
 80018c8:	d9f6      	bls.n	80018b8 <HAL_RCC_OscConfig+0x134>
 80018ca:	e79d      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018cc:	69aa      	ldr	r2, [r5, #24]
 80018ce:	4c4a      	ldr	r4, [pc, #296]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <HAL_RCC_OscConfig+0x27c>)
 80018d2:	b1da      	cbz	r2, 800190c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80018d8:	f7ff f960 	bl	8000b9c <HAL_GetTick>
 80018dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018e0:	079b      	lsls	r3, r3, #30
 80018e2:	d50d      	bpl.n	8001900 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018e4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80018e8:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <HAL_RCC_OscConfig+0x280>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80018f0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80018f2:	bf00      	nop
  }
  while (Delay --);
 80018f4:	9b01      	ldr	r3, [sp, #4]
 80018f6:	1e5a      	subs	r2, r3, #1
 80018f8:	9201      	str	r2, [sp, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f9      	bne.n	80018f2 <HAL_RCC_OscConfig+0x16e>
 80018fe:	e751      	b.n	80017a4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff f94c 	bl	8000b9c <HAL_GetTick>
 8001904:	1b80      	subs	r0, r0, r6
 8001906:	2802      	cmp	r0, #2
 8001908:	d9e9      	bls.n	80018de <HAL_RCC_OscConfig+0x15a>
 800190a:	e77d      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 800190c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800190e:	f7ff f945 	bl	8000b9c <HAL_GetTick>
 8001912:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001914:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001916:	079f      	lsls	r7, r3, #30
 8001918:	f57f af44 	bpl.w	80017a4 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff f93e 	bl	8000b9c <HAL_GetTick>
 8001920:	1b80      	subs	r0, r0, r6
 8001922:	2802      	cmp	r0, #2
 8001924:	d9f6      	bls.n	8001914 <HAL_RCC_OscConfig+0x190>
 8001926:	e76f      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001928:	4c33      	ldr	r4, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x274>)
 800192a:	69e3      	ldr	r3, [r4, #28]
 800192c:	00d8      	lsls	r0, r3, #3
 800192e:	d424      	bmi.n	800197a <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8001930:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	69e3      	ldr	r3, [r4, #28]
 8001934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001938:	61e3      	str	r3, [r4, #28]
 800193a:	69e3      	ldr	r3, [r4, #28]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	4e30      	ldr	r6, [pc, #192]	; (8001a08 <HAL_RCC_OscConfig+0x284>)
 8001946:	6833      	ldr	r3, [r6, #0]
 8001948:	05d9      	lsls	r1, r3, #23
 800194a:	d518      	bpl.n	800197e <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800194c:	68eb      	ldr	r3, [r5, #12]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d126      	bne.n	80019a0 <HAL_RCC_OscConfig+0x21c>
 8001952:	6a23      	ldr	r3, [r4, #32]
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800195a:	f7ff f91f 	bl	8000b9c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001962:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	6a23      	ldr	r3, [r4, #32]
 8001966:	079b      	lsls	r3, r3, #30
 8001968:	d53f      	bpl.n	80019ea <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 800196a:	2f00      	cmp	r7, #0
 800196c:	f43f af1e 	beq.w	80017ac <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001970:	69e3      	ldr	r3, [r4, #28]
 8001972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001976:	61e3      	str	r3, [r4, #28]
 8001978:	e718      	b.n	80017ac <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 800197a:	2700      	movs	r7, #0
 800197c:	e7e2      	b.n	8001944 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800197e:	6833      	ldr	r3, [r6, #0]
 8001980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001984:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001986:	f7ff f909 	bl	8000b9c <HAL_GetTick>
 800198a:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198c:	6833      	ldr	r3, [r6, #0]
 800198e:	05da      	lsls	r2, r3, #23
 8001990:	d4dc      	bmi.n	800194c <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001992:	f7ff f903 	bl	8000b9c <HAL_GetTick>
 8001996:	eba0 0008 	sub.w	r0, r0, r8
 800199a:	2864      	cmp	r0, #100	; 0x64
 800199c:	d9f6      	bls.n	800198c <HAL_RCC_OscConfig+0x208>
 800199e:	e733      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a0:	b9ab      	cbnz	r3, 80019ce <HAL_RCC_OscConfig+0x24a>
 80019a2:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6223      	str	r3, [r4, #32]
 80019ae:	6a23      	ldr	r3, [r4, #32]
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019b6:	f7ff f8f1 	bl	8000b9c <HAL_GetTick>
 80019ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	6a23      	ldr	r3, [r4, #32]
 80019be:	0798      	lsls	r0, r3, #30
 80019c0:	d5d3      	bpl.n	800196a <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff f8eb 	bl	8000b9c <HAL_GetTick>
 80019c6:	1b80      	subs	r0, r0, r6
 80019c8:	4540      	cmp	r0, r8
 80019ca:	d9f7      	bls.n	80019bc <HAL_RCC_OscConfig+0x238>
 80019cc:	e71c      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	6a23      	ldr	r3, [r4, #32]
 80019d2:	d103      	bne.n	80019dc <HAL_RCC_OscConfig+0x258>
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6223      	str	r3, [r4, #32]
 80019da:	e7ba      	b.n	8001952 <HAL_RCC_OscConfig+0x1ce>
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	6223      	str	r3, [r4, #32]
 80019e2:	6a23      	ldr	r3, [r4, #32]
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	e7b6      	b.n	8001958 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff f8d7 	bl	8000b9c <HAL_GetTick>
 80019ee:	eba0 0008 	sub.w	r0, r0, r8
 80019f2:	42b0      	cmp	r0, r6
 80019f4:	d9b6      	bls.n	8001964 <HAL_RCC_OscConfig+0x1e0>
 80019f6:	e707      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
 80019f8:	40021000 	.word	0x40021000
 80019fc:	42420000 	.word	0x42420000
 8001a00:	42420480 	.word	0x42420480
 8001a04:	20000060 	.word	0x20000060
 8001a08:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_RCC_OscConfig+0x334>)
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	461c      	mov	r4, r3
 8001a12:	f002 020c 	and.w	r2, r2, #12
 8001a16:	2a08      	cmp	r2, #8
 8001a18:	d03d      	beq.n	8001a96 <HAL_RCC_OscConfig+0x312>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	4e27      	ldr	r6, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001a20:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a22:	d12b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001a24:	f7ff f8ba 	bl	8000b9c <HAL_GetTick>
 8001a28:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2a:	6823      	ldr	r3, [r4, #0]
 8001a2c:	0199      	lsls	r1, r3, #6
 8001a2e:	d41f      	bmi.n	8001a70 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a30:	6a2b      	ldr	r3, [r5, #32]
 8001a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a36:	d105      	bne.n	8001a44 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a38:	6862      	ldr	r2, [r4, #4]
 8001a3a:	68a9      	ldr	r1, [r5, #8]
 8001a3c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001a40:	430a      	orrs	r2, r1
 8001a42:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a44:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001a46:	6862      	ldr	r2, [r4, #4]
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a52:	2301      	movs	r3, #1
 8001a54:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a56:	f7ff f8a1 	bl	8000b9c <HAL_GetTick>
 8001a5a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	019a      	lsls	r2, r3, #6
 8001a60:	f53f aea8 	bmi.w	80017b4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f89a 	bl	8000b9c <HAL_GetTick>
 8001a68:	1b40      	subs	r0, r0, r5
 8001a6a:	2802      	cmp	r0, #2
 8001a6c:	d9f6      	bls.n	8001a5c <HAL_RCC_OscConfig+0x2d8>
 8001a6e:	e6cb      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff f894 	bl	8000b9c <HAL_GetTick>
 8001a74:	1bc0      	subs	r0, r0, r7
 8001a76:	2802      	cmp	r0, #2
 8001a78:	d9d7      	bls.n	8001a2a <HAL_RCC_OscConfig+0x2a6>
 8001a7a:	e6c5      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f88e 	bl	8000b9c <HAL_GetTick>
 8001a80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	019b      	lsls	r3, r3, #6
 8001a86:	f57f ae95 	bpl.w	80017b4 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f887 	bl	8000b9c <HAL_GetTick>
 8001a8e:	1b40      	subs	r0, r0, r5
 8001a90:	2802      	cmp	r0, #2
 8001a92:	d9f6      	bls.n	8001a82 <HAL_RCC_OscConfig+0x2fe>
 8001a94:	e6b8      	b.n	8001808 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a96:	2801      	cmp	r0, #1
 8001a98:	f43f aeb7 	beq.w	800180a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 8001a9c:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	6a2b      	ldr	r3, [r5, #32]
 8001aa0:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f47f ae71 	bne.w	800178c <HAL_RCC_OscConfig+0x8>
 8001aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aac:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8001ab0:	1ac0      	subs	r0, r0, r3
 8001ab2:	bf18      	it	ne
 8001ab4:	2001      	movne	r0, #1
 8001ab6:	e6a8      	b.n	800180a <HAL_RCC_OscConfig+0x86>
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	42420060 	.word	0x42420060

08001ac0 <HAL_RCC_GetSysClockFreq>:
{
 8001ac0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8001ac4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ac6:	ac02      	add	r4, sp, #8
 8001ac8:	f103 0510 	add.w	r5, r3, #16
 8001acc:	4622      	mov	r2, r4
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	6859      	ldr	r1, [r3, #4]
 8001ad2:	3308      	adds	r3, #8
 8001ad4:	c203      	stmia	r2!, {r0, r1}
 8001ad6:	42ab      	cmp	r3, r5
 8001ad8:	4614      	mov	r4, r2
 8001ada:	d1f7      	bne.n	8001acc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001adc:	2301      	movs	r3, #1
 8001ade:	f88d 3004 	strb.w	r3, [sp, #4]
 8001ae2:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8001ae4:	4911      	ldr	r1, [pc, #68]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ae6:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8001aea:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001aec:	f003 020c 	and.w	r2, r3, #12
 8001af0:	2a08      	cmp	r2, #8
 8001af2:	d117      	bne.n	8001b24 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001af4:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001af8:	a806      	add	r0, sp, #24
 8001afa:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001afc:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001afe:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b02:	d50c      	bpl.n	8001b1e <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b04:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b06:	480a      	ldr	r0, [pc, #40]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b08:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b0c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b0e:	aa06      	add	r2, sp, #24
 8001b10:	4413      	add	r3, r2
 8001b12:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b16:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001b1a:	b007      	add	sp, #28
 8001b1c:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x74>)
 8001b20:	4350      	muls	r0, r2
 8001b22:	e7fa      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8001b26:	e7f8      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x5a>
 8001b28:	080041cc 	.word	0x080041cc
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	007a1200 	.word	0x007a1200
 8001b34:	003d0900 	.word	0x003d0900

08001b38 <HAL_RCC_ClockConfig>:
{
 8001b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b3c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001b3e:	4604      	mov	r4, r0
 8001b40:	b910      	cbnz	r0, 8001b48 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
 8001b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b48:	4a45      	ldr	r2, [pc, #276]	; (8001c60 <HAL_RCC_ClockConfig+0x128>)
 8001b4a:	6813      	ldr	r3, [r2, #0]
 8001b4c:	f003 0307 	and.w	r3, r3, #7
 8001b50:	428b      	cmp	r3, r1
 8001b52:	d329      	bcc.n	8001ba8 <HAL_RCC_ClockConfig+0x70>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b54:	6821      	ldr	r1, [r4, #0]
 8001b56:	078e      	lsls	r6, r1, #30
 8001b58:	d431      	bmi.n	8001bbe <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	07ca      	lsls	r2, r1, #31
 8001b5c:	d444      	bmi.n	8001be8 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5e:	4a40      	ldr	r2, [pc, #256]	; (8001c60 <HAL_RCC_ClockConfig+0x128>)
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	429d      	cmp	r5, r3
 8001b68:	d367      	bcc.n	8001c3a <HAL_RCC_ClockConfig+0x102>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6a:	6822      	ldr	r2, [r4, #0]
 8001b6c:	4d3d      	ldr	r5, [pc, #244]	; (8001c64 <HAL_RCC_ClockConfig+0x12c>)
 8001b6e:	f012 0f04 	tst.w	r2, #4
 8001b72:	d16e      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x11a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	0713      	lsls	r3, r2, #28
 8001b76:	d506      	bpl.n	8001b86 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b78:	686b      	ldr	r3, [r5, #4]
 8001b7a:	6922      	ldr	r2, [r4, #16]
 8001b7c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b80:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b84:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b86:	f7ff ff9b 	bl	8001ac0 <HAL_RCC_GetSysClockFreq>
 8001b8a:	686b      	ldr	r3, [r5, #4]
 8001b8c:	4a36      	ldr	r2, [pc, #216]	; (8001c68 <HAL_RCC_ClockConfig+0x130>)
 8001b8e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	40d8      	lsrs	r0, r3
 8001b96:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_RCC_ClockConfig+0x134>)
 8001b98:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_RCC_ClockConfig+0x138>)
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	f7fe ffbb 	bl	8000b18 <HAL_InitTick>
  return HAL_OK;
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba8:	6813      	ldr	r3, [r2, #0]
 8001baa:	f023 0307 	bic.w	r3, r3, #7
 8001bae:	430b      	orrs	r3, r1
 8001bb0:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	6813      	ldr	r3, [r2, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	4299      	cmp	r1, r3
 8001bba:	d1c2      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xa>
 8001bbc:	e7ca      	b.n	8001b54 <HAL_RCC_ClockConfig+0x1c>
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <HAL_RCC_ClockConfig+0x12c>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc4:	bf1e      	ittt	ne
 8001bc6:	685a      	ldrne	r2, [r3, #4]
 8001bc8:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001bcc:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bce:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	bf42      	ittt	mi
 8001bd2:	685a      	ldrmi	r2, [r3, #4]
 8001bd4:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001bd8:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	68a0      	ldr	r0, [r4, #8]
 8001bde:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001be2:	4302      	orrs	r2, r0
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	e7b8      	b.n	8001b5a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be8:	6862      	ldr	r2, [r4, #4]
 8001bea:	4e1e      	ldr	r6, [pc, #120]	; (8001c64 <HAL_RCC_ClockConfig+0x12c>)
 8001bec:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf0:	d11b      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xf2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	d0a4      	beq.n	8001b42 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf8:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	f023 0303 	bic.w	r3, r3, #3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001c06:	f7fe ffc9 	bl	8000b9c <HAL_GetTick>
 8001c0a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0c:	6873      	ldr	r3, [r6, #4]
 8001c0e:	6862      	ldr	r2, [r4, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c18:	d0a1      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7fe ffbf 	bl	8000b9c <HAL_GetTick>
 8001c1e:	1bc0      	subs	r0, r0, r7
 8001c20:	4540      	cmp	r0, r8
 8001c22:	d9f3      	bls.n	8001c0c <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001c24:	2003      	movs	r0, #3
}
 8001c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	2a02      	cmp	r2, #2
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_ClockConfig+0xfc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c32:	e7e0      	b.n	8001bf6 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c34:	f013 0f02 	tst.w	r3, #2
 8001c38:	e7dd      	b.n	8001bf6 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	6813      	ldr	r3, [r2, #0]
 8001c3c:	f023 0307 	bic.w	r3, r3, #7
 8001c40:	432b      	orrs	r3, r5
 8001c42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c44:	6813      	ldr	r3, [r2, #0]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	429d      	cmp	r5, r3
 8001c4c:	f47f af79 	bne.w	8001b42 <HAL_RCC_ClockConfig+0xa>
 8001c50:	e78b      	b.n	8001b6a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c52:	686b      	ldr	r3, [r5, #4]
 8001c54:	68e1      	ldr	r1, [r4, #12]
 8001c56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	606b      	str	r3, [r5, #4]
 8001c5e:	e789      	b.n	8001b74 <HAL_RCC_ClockConfig+0x3c>
 8001c60:	40022000 	.word	0x40022000
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08004222 	.word	0x08004222
 8001c6c:	20000060 	.word	0x20000060
 8001c70:	20000068 	.word	0x20000068

08001c74 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c74:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c76:	4a05      	ldr	r2, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c82:	6810      	ldr	r0, [r2, #0]
}
 8001c84:	40d8      	lsrs	r0, r3
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08004232 	.word	0x08004232
 8001c90:	20000060 	.word	0x20000060

08001c94 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c94:	6803      	ldr	r3, [r0, #0]
{
 8001c96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c9a:	07d9      	lsls	r1, r3, #31
{
 8001c9c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c9e:	d520      	bpl.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca0:	4c35      	ldr	r4, [pc, #212]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001ca2:	69e3      	ldr	r3, [r4, #28]
 8001ca4:	00da      	lsls	r2, r3, #3
 8001ca6:	d432      	bmi.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001ca8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001caa:	69e3      	ldr	r3, [r4, #28]
 8001cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	61e3      	str	r3, [r4, #28]
 8001cb2:	69e3      	ldr	r3, [r4, #28]
 8001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	9301      	str	r3, [sp, #4]
 8001cba:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4e2f      	ldr	r6, [pc, #188]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001cbe:	6833      	ldr	r3, [r6, #0]
 8001cc0:	05db      	lsls	r3, r3, #23
 8001cc2:	d526      	bpl.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cc4:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cc6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001cca:	d136      	bne.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ccc:	6a23      	ldr	r3, [r4, #32]
 8001cce:	686a      	ldr	r2, [r5, #4]
 8001cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cd8:	b11f      	cbz	r7, 8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	69e3      	ldr	r3, [r4, #28]
 8001cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ce2:	6828      	ldr	r0, [r5, #0]
 8001ce4:	0783      	lsls	r3, r0, #30
 8001ce6:	d506      	bpl.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ce8:	4a23      	ldr	r2, [pc, #140]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001cea:	68a9      	ldr	r1, [r5, #8]
 8001cec:	6853      	ldr	r3, [r2, #4]
 8001cee:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001cf6:	f010 0010 	ands.w	r0, r0, #16
 8001cfa:	d01b      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001cfc:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001cfe:	6969      	ldr	r1, [r5, #20]
 8001d00:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001d02:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	6053      	str	r3, [r2, #4]
 8001d0c:	e012      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8001d0e:	2700      	movs	r7, #0
 8001d10:	e7d4      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d12:	6833      	ldr	r3, [r6, #0]
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d1a:	f7fe ff3f 	bl	8000b9c <HAL_GetTick>
 8001d1e:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	05d8      	lsls	r0, r3, #23
 8001d24:	d4ce      	bmi.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7fe ff39 	bl	8000b9c <HAL_GetTick>
 8001d2a:	eba0 0008 	sub.w	r0, r0, r8
 8001d2e:	2864      	cmp	r0, #100	; 0x64
 8001d30:	d9f6      	bls.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001d32:	2003      	movs	r0, #3
}
 8001d34:	b002      	add	sp, #8
 8001d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d3a:	686a      	ldr	r2, [r5, #4]
 8001d3c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d0c3      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d44:	2001      	movs	r0, #1
 8001d46:	4a0e      	ldr	r2, [pc, #56]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d48:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d4a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d4c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d52:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001d54:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d56:	07d9      	lsls	r1, r3, #31
 8001d58:	d5b8      	bpl.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001d5a:	f7fe ff1f 	bl	8000b9c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001d62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d64:	6a23      	ldr	r3, [r4, #32]
 8001d66:	079a      	lsls	r2, r3, #30
 8001d68:	d4b0      	bmi.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7fe ff17 	bl	8000b9c <HAL_GetTick>
 8001d6e:	1b80      	subs	r0, r0, r6
 8001d70:	4540      	cmp	r0, r8
 8001d72:	d9f7      	bls.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001d74:	e7dd      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420440 	.word	0x42420440

08001d84 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8001d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001d88:	b089      	sub	sp, #36	; 0x24
 8001d8a:	4605      	mov	r5, r0
 8001d8c:	460e      	mov	r6, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001d8e:	f7fe ff05 	bl	8000b9c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8001d92:	2300      	movs	r3, #0
  uint32_t tickstart = HAL_GetTick();
 8001d94:	4681      	mov	r9, r0
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001d96:	2108      	movs	r1, #8
 8001d98:	6828      	ldr	r0, [r5, #0]
  uint32_t tempscr[2U] = {0U, 0U};
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8001d9e:	f000 fe24 	bl	80029ea <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001da2:	4604      	mov	r4, r0
 8001da4:	bb40      	cbnz	r0, 8001df8 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8001da6:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8001da8:	6828      	ldr	r0, [r5, #0]
 8001daa:	0409      	lsls	r1, r1, #16
 8001dac:	f000 ff2e 	bl	8002c0c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001db0:	4604      	mov	r4, r0
 8001db2:	bb08      	cbnz	r0, 8001df8 <SD_FindSCR+0x74>
  {
    return errorstate;
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001db4:	f04f 33ff 	mov.w	r3, #4294967295
 8001db8:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8001dba:	2308      	movs	r3, #8
 8001dbc:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8001dbe:	2330      	movs	r3, #48	; 0x30
 8001dc0:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001dc6:	2301      	movs	r3, #1
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001dc8:	9006      	str	r0, [sp, #24]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001dca:	a902      	add	r1, sp, #8
 8001dcc:	6828      	ldr	r0, [r5, #0]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001dce:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8001dd0:	f000 fdf8 	bl	80029c4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8001dd4:	6828      	ldr	r0, [r5, #0]
 8001dd6:	f000 ff4a 	bl	8002c6e <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8001dda:	4604      	mov	r4, r0
 8001ddc:	b960      	cbnz	r0, 8001df8 <SD_FindSCR+0x74>
 8001dde:	4607      	mov	r7, r0
  {
    return errorstate;
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001de0:	f240 482a 	movw	r8, #1066	; 0x42a
 8001de4:	6828      	ldr	r0, [r5, #0]
 8001de6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001de8:	ea13 0f08 	tst.w	r3, r8
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001dec:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8001dee:	d007      	beq.n	8001e00 <SD_FindSCR+0x7c>
    {
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001df0:	0719      	lsls	r1, r3, #28
 8001df2:	d518      	bpl.n	8001e26 <SD_FindSCR+0xa2>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8001df4:	2408      	movs	r4, #8

    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001df6:	6384      	str	r4, [r0, #56]	; 0x38
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8001df8:	4620      	mov	r0, r4
 8001dfa:	b009      	add	sp, #36	; 0x24
 8001dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8001e00:	029b      	lsls	r3, r3, #10
 8001e02:	d507      	bpl.n	8001e14 <SD_FindSCR+0x90>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8001e04:	f000 fdb4 	bl	8002970 <SDIO_ReadFIFO>
 8001e08:	ab08      	add	r3, sp, #32
 8001e0a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8001e0e:	f843 0c20 	str.w	r0, [r3, #-32]
      index++;
 8001e12:	3701      	adds	r7, #1
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8001e14:	f7fe fec2 	bl	8000b9c <HAL_GetTick>
 8001e18:	eba0 0009 	sub.w	r0, r0, r9
 8001e1c:	3001      	adds	r0, #1
 8001e1e:	d1e1      	bne.n	8001de4 <SD_FindSCR+0x60>
      return HAL_SD_ERROR_TIMEOUT;
 8001e20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8001e24:	e7e8      	b.n	8001df8 <SD_FindSCR+0x74>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001e26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e28:	079a      	lsls	r2, r3, #30
 8001e2a:	d501      	bpl.n	8001e30 <SD_FindSCR+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8001e2c:	2402      	movs	r4, #2
 8001e2e:	e7e2      	b.n	8001df6 <SD_FindSCR+0x72>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e32:	069b      	lsls	r3, r3, #26
 8001e34:	d501      	bpl.n	8001e3a <SD_FindSCR+0xb6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8001e36:	2420      	movs	r4, #32
 8001e38:	e7dd      	b.n	8001df6 <SD_FindSCR+0x72>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001e3a:	f240 533a 	movw	r3, #1338	; 0x53a
 8001e3e:	6383      	str	r3, [r0, #56]	; 0x38
 8001e40:	9b01      	ldr	r3, [sp, #4]
 8001e42:	ba1b      	rev	r3, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8001e44:	6033      	str	r3, [r6, #0]
 8001e46:	9b00      	ldr	r3, [sp, #0]
 8001e48:	ba1b      	rev	r3, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8001e4a:	6073      	str	r3, [r6, #4]
  return HAL_SD_ERROR_NONE;
 8001e4c:	e7d4      	b.n	8001df8 <SD_FindSCR+0x74>
	...

08001e50 <HAL_SD_ReadBlocks>:
{
 8001e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e54:	b087      	sub	sp, #28
 8001e56:	4604      	mov	r4, r0
 8001e58:	460d      	mov	r5, r1
 8001e5a:	4616      	mov	r6, r2
 8001e5c:	4699      	mov	r9, r3
  uint32_t tickstart = HAL_GetTick();
 8001e5e:	f7fe fe9d 	bl	8000b9c <HAL_GetTick>
 8001e62:	4607      	mov	r7, r0
  if(NULL == pData)
 8001e64:	b92d      	cbnz	r5, 8001e72 <HAL_SD_ReadBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001e66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001e6c:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8001e6e:	2001      	movs	r0, #1
 8001e70:	e010      	b.n	8001e94 <HAL_SD_ReadBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8001e72:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8001e76:	b2c0      	uxtb	r0, r0
 8001e78:	2801      	cmp	r0, #1
 8001e7a:	f040 80f5 	bne.w	8002068 <HAL_SD_ReadBlocks+0x218>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e7e:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e80:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001e82:	eb06 0309 	add.w	r3, r6, r9
 8001e86:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001e88:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001e8a:	d906      	bls.n	8001e9a <HAL_SD_ReadBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001e8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e92:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8001e94:	b007      	add	sp, #28
 8001e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 8001e9a:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 8001e9c:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 8001e9e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ea2:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 8001ea4:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001ea6:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 8001eac:	bf18      	it	ne
 8001eae:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001eb0:	f000 fd9b 	bl	80029ea <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001eb4:	b148      	cbz	r0, 8001eca <HAL_SD_ReadBlocks+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	4a6d      	ldr	r2, [pc, #436]	; (8002070 <HAL_SD_ReadBlocks+0x220>)
 8001eba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001ebc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ebe:	4318      	orrs	r0, r3
 8001ec0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8001ec8:	e7e4      	b.n	8001e94 <HAL_SD_ReadBlocks+0x44>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001ed0:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001ed4:	9301      	str	r3, [sp, #4]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001ed6:	f04f 0a01 	mov.w	sl, #1
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001eda:	2390      	movs	r3, #144	; 0x90
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001edc:	f04f 0b02 	mov.w	fp, #2
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001ee0:	9004      	str	r0, [sp, #16]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001ee2:	4669      	mov	r1, sp
 8001ee4:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001ee6:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001ee8:	f8cd b00c 	str.w	fp, [sp, #12]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001eec:	f8cd a014 	str.w	sl, [sp, #20]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001ef0:	f000 fd68 	bl	80029c4 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 8001ef4:	45d1      	cmp	r9, sl
 8001ef6:	d912      	bls.n	8001f1e <HAL_SD_ReadBlocks+0xce>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001ef8:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8001efc:	4631      	mov	r1, r6
 8001efe:	6820      	ldr	r0, [r4, #0]
 8001f00:	f000 fda3 	bl	8002a4a <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8001f04:	b190      	cbz	r0, 8001f2c <HAL_SD_ReadBlocks+0xdc>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	4a59      	ldr	r2, [pc, #356]	; (8002070 <HAL_SD_ReadBlocks+0x220>)
 8001f0a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f0e:	4318      	orrs	r0, r3
 8001f10:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001f12:	2001      	movs	r0, #1
        hsd->Context = SD_CONTEXT_NONE;
 8001f14:	2300      	movs	r3, #0
        hsd->State= HAL_SD_STATE_READY;
 8001f16:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001f1a:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 8001f1c:	e7ba      	b.n	8001e94 <HAL_SD_ReadBlocks+0x44>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8001f1e:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001f22:	4631      	mov	r1, r6
 8001f24:	6820      	ldr	r0, [r4, #0]
 8001f26:	f000 fd78 	bl	8002a1a <SDMMC_CmdReadSingleBlock>
 8001f2a:	e7eb      	b.n	8001f04 <HAL_SD_ReadBlocks+0xb4>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f2c:	f240 3b2a 	movw	fp, #810	; 0x32a
    dataremaining = config.DataLength;
 8001f30:	f8dd a004 	ldr.w	sl, [sp, #4]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f34:	6820      	ldr	r0, [r4, #0]
 8001f36:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001f38:	ea13 0f0b 	tst.w	r3, fp
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001f3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001f3e:	d017      	beq.n	8001f70 <HAL_SD_ReadBlocks+0x120>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001f40:	05de      	lsls	r6, r3, #23
 8001f42:	d509      	bpl.n	8001f58 <HAL_SD_ReadBlocks+0x108>
 8001f44:	f1b9 0f01 	cmp.w	r9, #1
 8001f48:	d906      	bls.n	8001f58 <HAL_SD_ReadBlocks+0x108>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001f4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d003      	beq.n	8001f58 <HAL_SD_ReadBlocks+0x108>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001f50:	f000 fdc4 	bl	8002adc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d1d6      	bne.n	8001f06 <HAL_SD_ReadBlocks+0xb6>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001f58:	6823      	ldr	r3, [r4, #0]
 8001f5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f5c:	f011 0108 	ands.w	r1, r1, #8
 8001f60:	d036      	beq.n	8001fd0 <HAL_SD_ReadBlocks+0x180>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001f62:	4a43      	ldr	r2, [pc, #268]	; (8002070 <HAL_SD_ReadBlocks+0x220>)
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001f66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f68:	f043 0308 	orr.w	r3, r3, #8
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001f6c:	63a3      	str	r3, [r4, #56]	; 0x38
 8001f6e:	e7d0      	b.n	8001f12 <HAL_SD_ReadBlocks+0xc2>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	d519      	bpl.n	8001fa8 <HAL_SD_ReadBlocks+0x158>
 8001f74:	f1ba 0f00 	cmp.w	sl, #0
 8001f78:	d016      	beq.n	8001fa8 <HAL_SD_ReadBlocks+0x158>
 8001f7a:	1d2e      	adds	r6, r5, #4
 8001f7c:	f105 0824 	add.w	r8, r5, #36	; 0x24
          data = SDIO_ReadFIFO(hsd->Instance);
 8001f80:	6820      	ldr	r0, [r4, #0]
 8001f82:	f000 fcf5 	bl	8002970 <SDIO_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001f86:	0a02      	lsrs	r2, r0, #8
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001f88:	f806 0c04 	strb.w	r0, [r6, #-4]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001f8c:	f806 2c03 	strb.w	r2, [r6, #-3]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001f90:	0c02      	lsrs	r2, r0, #16
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001f92:	0e00      	lsrs	r0, r0, #24
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001f94:	f806 2c02 	strb.w	r2, [r6, #-2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001f98:	f806 0c01 	strb.w	r0, [r6, #-1]
 8001f9c:	3604      	adds	r6, #4
        for(count = 0U; count < 8U; count++)
 8001f9e:	4546      	cmp	r6, r8
 8001fa0:	d1ee      	bne.n	8001f80 <HAL_SD_ReadBlocks+0x130>
 8001fa2:	3520      	adds	r5, #32
 8001fa4:	f1aa 0a20 	sub.w	sl, sl, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001fa8:	f7fe fdf8 	bl	8000b9c <HAL_GetTick>
 8001fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001fae:	1bc0      	subs	r0, r0, r7
 8001fb0:	4298      	cmp	r0, r3
 8001fb2:	d3bf      	bcc.n	8001f34 <HAL_SD_ReadBlocks+0xe4>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	4a2e      	ldr	r2, [pc, #184]	; (8002070 <HAL_SD_ReadBlocks+0x220>)
        return HAL_TIMEOUT;
 8001fb8:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001fbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fc2:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 8001fce:	e761      	b.n	8001e94 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd2:	f012 0202 	ands.w	r2, r2, #2
 8001fd6:	d00a      	beq.n	8001fee <HAL_SD_ReadBlocks+0x19e>
      hsd->State = HAL_SD_STATE_READY;
 8001fd8:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <HAL_SD_ReadBlocks+0x220>)
 8001fdc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001fde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fe0:	f043 0302 	orr.w	r3, r3, #2
 8001fe4:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001fe6:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001fea:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 8001fec:	e752      	b.n	8001e94 <HAL_SD_ReadBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001fee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff0:	0689      	lsls	r1, r1, #26
 8001ff2:	d50a      	bpl.n	800200a <HAL_SD_ReadBlocks+0x1ba>
      hsd->State = HAL_SD_STATE_READY;
 8001ff4:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ff6:	491e      	ldr	r1, [pc, #120]	; (8002070 <HAL_SD_ReadBlocks+0x220>)
 8001ff8:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001ffa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ffc:	f043 0320 	orr.w	r3, r3, #32
 8002000:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002002:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002006:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002008:	e744      	b.n	8001e94 <HAL_SD_ReadBlocks+0x44>
 800200a:	1d2e      	adds	r6, r5, #4
 800200c:	f10a 0a04 	add.w	sl, sl, #4
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002010:	6820      	ldr	r0, [r4, #0]
 8002012:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002014:	029b      	lsls	r3, r3, #10
 8002016:	d407      	bmi.n	8002028 <HAL_SD_ReadBlocks+0x1d8>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002018:	f240 533a 	movw	r3, #1338	; 0x53a
 800201c:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800201e:	2301      	movs	r3, #1
    return HAL_OK;
 8002020:	2000      	movs	r0, #0
    hsd->State = HAL_SD_STATE_READY;
 8002022:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8002026:	e735      	b.n	8001e94 <HAL_SD_ReadBlocks+0x44>
 8002028:	ebaa 0306 	sub.w	r3, sl, r6
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800202c:	42dd      	cmn	r5, r3
 800202e:	d0f3      	beq.n	8002018 <HAL_SD_ReadBlocks+0x1c8>
      data = SDIO_ReadFIFO(hsd->Instance);
 8002030:	f000 fc9e 	bl	8002970 <SDIO_ReadFIFO>
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002034:	0a03      	lsrs	r3, r0, #8
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002036:	f806 0c04 	strb.w	r0, [r6, #-4]
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800203a:	f806 3c03 	strb.w	r3, [r6, #-3]
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800203e:	0c03      	lsrs	r3, r0, #16
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002040:	0e00      	lsrs	r0, r0, #24
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002042:	f806 3c02 	strb.w	r3, [r6, #-2]
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002046:	f806 0c01 	strb.w	r0, [r6, #-1]
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800204a:	f7fe fda7 	bl	8000b9c <HAL_GetTick>
 800204e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002050:	1bc0      	subs	r0, r0, r7
 8002052:	4283      	cmp	r3, r0
 8002054:	f106 0604 	add.w	r6, r6, #4
 8002058:	d8da      	bhi.n	8002010 <HAL_SD_ReadBlocks+0x1c0>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800205a:	6823      	ldr	r3, [r4, #0]
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_SD_ReadBlocks+0x220>)
 800205e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002060:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002062:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002066:	e781      	b.n	8001f6c <HAL_SD_ReadBlocks+0x11c>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002068:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800206a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800206e:	e6fd      	b.n	8001e6c <HAL_SD_ReadBlocks+0x1c>
 8002070:	004005ff 	.word	0x004005ff

08002074 <HAL_SD_WriteBlocks>:
{
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002078:	b089      	sub	sp, #36	; 0x24
 800207a:	4604      	mov	r4, r0
 800207c:	460e      	mov	r6, r1
 800207e:	4691      	mov	r9, r2
 8002080:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8002082:	f7fe fd8b 	bl	8000b9c <HAL_GetTick>
 8002086:	4680      	mov	r8, r0
  if(NULL == pData)
 8002088:	b92e      	cbnz	r6, 8002096 <HAL_SD_WriteBlocks+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800208a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800208c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002090:	63a3      	str	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002092:	2001      	movs	r0, #1
 8002094:	e010      	b.n	80020b8 <HAL_SD_WriteBlocks+0x44>
  if(hsd->State == HAL_SD_STATE_READY)
 8002096:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 800209a:	b2c0      	uxtb	r0, r0
 800209c:	2801      	cmp	r0, #1
 800209e:	f040 80b9 	bne.w	8002214 <HAL_SD_WriteBlocks+0x1a0>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80020a2:	2100      	movs	r1, #0
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80020a4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020a6:	eb09 0307 	add.w	r3, r9, r7
 80020aa:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80020ac:	63a1      	str	r1, [r4, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80020ae:	d906      	bls.n	80020be <HAL_SD_WriteBlocks+0x4a>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80020b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020b6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80020b8:	b009      	add	sp, #36	; 0x24
 80020ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->State = HAL_SD_STATE_BUSY;
 80020be:	2303      	movs	r3, #3
    hsd->Instance->DCTRL = 0U;
 80020c0:	6820      	ldr	r0, [r4, #0]
    hsd->State = HAL_SD_STATE_BUSY;
 80020c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->Instance->DCTRL = 0U;
 80020c8:	62c1      	str	r1, [r0, #44]	; 0x2c
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80020ca:	2b01      	cmp	r3, #1
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80020cc:	f44f 7100 	mov.w	r1, #512	; 0x200
      add *= 512U;
 80020d0:	bf18      	it	ne
 80020d2:	ea4f 2949 	movne.w	r9, r9, lsl #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80020d6:	f000 fc88 	bl	80029ea <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80020da:	b148      	cbz	r0, 80020f0 <HAL_SD_WriteBlocks+0x7c>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	4a4f      	ldr	r2, [pc, #316]	; (800221c <HAL_SD_WriteBlocks+0x1a8>)
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80020e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020e4:	4318      	orrs	r0, r3
 80020e6:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80020e8:	2001      	movs	r0, #1
 80020ea:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 80020ee:	e7e3      	b.n	80020b8 <HAL_SD_WriteBlocks+0x44>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80020f6:	027b      	lsls	r3, r7, #9
 80020f8:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80020fa:	2390      	movs	r3, #144	; 0x90
 80020fc:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDIO_DPSM_ENABLE;
 80020fe:	2301      	movs	r3, #1
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002100:	9005      	str	r0, [sp, #20]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002102:	9006      	str	r0, [sp, #24]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002104:	a902      	add	r1, sp, #8
 8002106:	6820      	ldr	r0, [r4, #0]
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002108:	9307      	str	r3, [sp, #28]
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800210a:	f000 fc5b 	bl	80029c4 <SDIO_ConfigData>
    if(NumberOfBlocks > 1U)
 800210e:	2f01      	cmp	r7, #1
 8002110:	d912      	bls.n	8002138 <HAL_SD_WriteBlocks+0xc4>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002112:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002114:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002116:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002118:	6820      	ldr	r0, [r4, #0]
 800211a:	f000 fcc6 	bl	8002aaa <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 800211e:	b190      	cbz	r0, 8002146 <HAL_SD_WriteBlocks+0xd2>
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	4a3e      	ldr	r2, [pc, #248]	; (800221c <HAL_SD_WriteBlocks+0x1a8>)
 8002124:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002126:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002128:	4318      	orrs	r0, r3
 800212a:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800212c:	2001      	movs	r0, #1
      hsd->Context = SD_CONTEXT_NONE;
 800212e:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8002130:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002134:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002136:	e7bf      	b.n	80020b8 <HAL_SD_WriteBlocks+0x44>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002138:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800213a:	4649      	mov	r1, r9
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800213c:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800213e:	6820      	ldr	r0, [r4, #0]
 8002140:	f000 fc9b 	bl	8002a7a <SDMMC_CmdWriteSingleBlock>
 8002144:	e7eb      	b.n	800211e <HAL_SD_WriteBlocks+0xaa>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002146:	f240 3a1a 	movw	sl, #794	; 0x31a
    dataremaining = config.DataLength;
 800214a:	9d03      	ldr	r5, [sp, #12]
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800214c:	6820      	ldr	r0, [r4, #0]
 800214e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002150:	ea13 0f0a 	tst.w	r3, sl
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002154:	6b43      	ldr	r3, [r0, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002156:	d016      	beq.n	8002186 <HAL_SD_WriteBlocks+0x112>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002158:	05db      	lsls	r3, r3, #23
 800215a:	d508      	bpl.n	800216e <HAL_SD_WriteBlocks+0xfa>
 800215c:	2f01      	cmp	r7, #1
 800215e:	d906      	bls.n	800216e <HAL_SD_WriteBlocks+0xfa>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002160:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002162:	2b03      	cmp	r3, #3
 8002164:	d003      	beq.n	800216e <HAL_SD_WriteBlocks+0xfa>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002166:	f000 fcb9 	bl	8002adc <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800216a:	2800      	cmp	r0, #0
 800216c:	d1d8      	bne.n	8002120 <HAL_SD_WriteBlocks+0xac>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002172:	f011 0108 	ands.w	r1, r1, #8
 8002176:	d028      	beq.n	80021ca <HAL_SD_WriteBlocks+0x156>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002178:	4a28      	ldr	r2, [pc, #160]	; (800221c <HAL_SD_WriteBlocks+0x1a8>)
 800217a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800217c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	63a3      	str	r3, [r4, #56]	; 0x38
 8002184:	e7d2      	b.n	800212c <HAL_SD_WriteBlocks+0xb8>
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002186:	045a      	lsls	r2, r3, #17
 8002188:	d50c      	bpl.n	80021a4 <HAL_SD_WriteBlocks+0x130>
 800218a:	b15d      	cbz	r5, 80021a4 <HAL_SD_WriteBlocks+0x130>
 800218c:	f106 0b20 	add.w	fp, r6, #32
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002190:	f856 3b04 	ldr.w	r3, [r6], #4
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002194:	a901      	add	r1, sp, #4
 8002196:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002198:	9301      	str	r3, [sp, #4]
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800219a:	f000 fbec 	bl	8002976 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800219e:	45b3      	cmp	fp, r6
 80021a0:	d1f6      	bne.n	8002190 <HAL_SD_WriteBlocks+0x11c>
 80021a2:	3d20      	subs	r5, #32
      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80021a4:	f7fe fcfa 	bl	8000b9c <HAL_GetTick>
 80021a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80021aa:	eba0 0008 	sub.w	r0, r0, r8
 80021ae:	4298      	cmp	r0, r3
 80021b0:	d3cc      	bcc.n	800214c <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021b2:	6823      	ldr	r3, [r4, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <HAL_SD_WriteBlocks+0x1a8>)
        return HAL_TIMEOUT;
 80021b6:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80021ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021bc:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80021be:	2301      	movs	r3, #1
 80021c0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_TIMEOUT;
 80021c8:	e776      	b.n	80020b8 <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80021ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021cc:	f012 0202 	ands.w	r2, r2, #2
 80021d0:	d00a      	beq.n	80021e8 <HAL_SD_WriteBlocks+0x174>
      hsd->State = HAL_SD_STATE_READY;
 80021d2:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021d4:	4a11      	ldr	r2, [pc, #68]	; (800221c <HAL_SD_WriteBlocks+0x1a8>)
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80021d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021e0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80021e4:	6321      	str	r1, [r4, #48]	; 0x30
      return HAL_ERROR;
 80021e6:	e767      	b.n	80020b8 <HAL_SD_WriteBlocks+0x44>
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80021e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80021ea:	f010 0010 	ands.w	r0, r0, #16
 80021ee:	d00a      	beq.n	8002206 <HAL_SD_WriteBlocks+0x192>
      hsd->State = HAL_SD_STATE_READY;
 80021f0:	2001      	movs	r0, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80021f2:	490a      	ldr	r1, [pc, #40]	; (800221c <HAL_SD_WriteBlocks+0x1a8>)
 80021f4:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80021f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80021f8:	f043 0310 	orr.w	r3, r3, #16
 80021fc:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80021fe:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002202:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8002204:	e758      	b.n	80020b8 <HAL_SD_WriteBlocks+0x44>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002206:	f240 523a 	movw	r2, #1338	; 0x53a
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800220c:	2301      	movs	r3, #1
 800220e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_OK;
 8002212:	e751      	b.n	80020b8 <HAL_SD_WriteBlocks+0x44>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002214:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800221a:	e739      	b.n	8002090 <HAL_SD_WriteBlocks+0x1c>
 800221c:	004005ff 	.word	0x004005ff

08002220 <HAL_SD_GetCardCSD>:
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002220:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8002222:	b510      	push	{r4, lr}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002224:	0f9a      	lsrs	r2, r3, #30
 8002226:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002228:	f3c3 6283 	ubfx	r2, r3, #26, #4
 800222c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800222e:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8002232:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002234:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8002238:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800223a:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800223e:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002240:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002242:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002244:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8002246:	0d1a      	lsrs	r2, r3, #20
 8002248:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800224a:	f3c3 4203 	ubfx	r2, r3, #16, #4
 800224e:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002250:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8002254:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002256:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800225a:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800225c:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8002260:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002262:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8002266:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002268:	2200      	movs	r2, #0
 800226a:	734a      	strb	r2, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 800226c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800226e:	2a00      	cmp	r2, #0
 8002270:	d16b      	bne.n	800234a <HAL_SD_GetCardCSD+0x12a>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002272:	f640 74fc 	movw	r4, #4092	; 0xffc
 8002276:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8002278:	ea04 0383 	and.w	r3, r4, r3, lsl #2
 800227c:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8002280:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002282:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 8002286:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002288:	f3c2 6302 	ubfx	r3, r2, #24, #3
 800228c:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800228e:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8002292:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002294:	f3c2 4382 	ubfx	r3, r2, #18, #3
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002298:	f3c2 32c2 	ubfx	r2, r2, #15, #3
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800229c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800229e:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80022a0:	690b      	ldr	r3, [r1, #16]
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80022a2:	7e0a      	ldrb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80022a4:	3301      	adds	r3, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80022a6:	f002 0207 	and.w	r2, r2, #7
 80022aa:	3202      	adds	r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80022b0:	7a0a      	ldrb	r2, [r1, #8]
 80022b2:	f002 040f 	and.w	r4, r2, #15
 80022b6:	2201      	movs	r2, #1
 80022b8:	40a2      	lsls	r2, r4
 80022ba:	6582      	str	r2, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80022bc:	0a52      	lsrs	r2, r2, #9
 80022be:	4353      	muls	r3, r2
 80022c0:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80022c2:	f44f 7300 	mov.w	r3, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80022c6:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80022c8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80022ca:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80022ce:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80022d0:	f3c3 12c6 	ubfx	r2, r3, #7, #7
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80022d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80022d8:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80022da:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80022dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->Reserved3 = 0;
 80022de:	2000      	movs	r0, #0
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80022e0:	0fda      	lsrs	r2, r3, #31
 80022e2:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80022e4:	f3c3 7241 	ubfx	r2, r3, #29, #2
 80022e8:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80022ea:	f3c3 6282 	ubfx	r2, r3, #26, #3
 80022ee:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80022f0:	f3c3 5283 	ubfx	r2, r3, #22, #4
 80022f4:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80022f6:	f3c3 5240 	ubfx	r2, r3, #21, #1
 80022fa:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80022fe:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3 = 0;
 8002302:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002306:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800230a:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 800230e:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002312:	f3c3 3280 	ubfx	r2, r3, #14, #1
 8002316:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800231a:	f3c3 3240 	ubfx	r2, r3, #13, #1
 800231e:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002322:	f3c3 3200 	ubfx	r2, r3, #12, #1
 8002326:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800232a:	f3c3 2281 	ubfx	r2, r3, #10, #2
 800232e:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002332:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002336:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800233a:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800233e:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8002348:	bd10      	pop	{r4, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800234a:	2a01      	cmp	r2, #1
 800234c:	d10f      	bne.n	800236e <HAL_SD_GetCardCSD+0x14e>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800234e:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002358:	4313      	orrs	r3, r2
 800235a:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800235c:	690b      	ldr	r3, [r1, #16]
 800235e:	3301      	adds	r3, #1
 8002360:	029b      	lsls	r3, r3, #10
 8002362:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002364:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800236a:	6583      	str	r3, [r0, #88]	; 0x58
 800236c:	e7ab      	b.n	80022c6 <HAL_SD_GetCardCSD+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800236e:	6803      	ldr	r3, [r0, #0]
 8002370:	4a05      	ldr	r2, [pc, #20]	; (8002388 <HAL_SD_GetCardCSD+0x168>)
 8002372:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002374:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237a:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800237c:	2301      	movs	r3, #1
 800237e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8002382:	4618      	mov	r0, r3
 8002384:	bd10      	pop	{r4, pc}
 8002386:	bf00      	nop
 8002388:	004005ff 	.word	0x004005ff

0800238c <HAL_SD_InitCard>:
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800238c:	2300      	movs	r3, #0
{
 800238e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002392:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002394:	9307      	str	r3, [sp, #28]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002396:	9308      	str	r3, [sp, #32]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002398:	9309      	str	r3, [sp, #36]	; 0x24
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800239a:	930a      	str	r3, [sp, #40]	; 0x28
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800239c:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800239e:	2376      	movs	r3, #118	; 0x76
{
 80023a0:	4604      	mov	r4, r0
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80023a2:	930c      	str	r3, [sp, #48]	; 0x30
  status = SDIO_Init(hsd->Instance, Init);
 80023a4:	ab0a      	add	r3, sp, #40	; 0x28
 80023a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023aa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80023ae:	ab07      	add	r3, sp, #28
 80023b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023b2:	6820      	ldr	r0, [r4, #0]
 80023b4:	f000 fac0 	bl	8002938 <SDIO_Init>
  if(status != HAL_OK)
 80023b8:	4605      	mov	r5, r0
 80023ba:	2800      	cmp	r0, #0
 80023bc:	f040 808d 	bne.w	80024da <HAL_SD_InitCard+0x14e>
  __HAL_SD_ENABLE(hsd);
 80023c0:	2601      	movs	r6, #1
  __HAL_SD_DISABLE(hsd);
 80023c2:	4f6d      	ldr	r7, [pc, #436]	; (8002578 <HAL_SD_InitCard+0x1ec>)
 80023c4:	6038      	str	r0, [r7, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 80023c6:	6820      	ldr	r0, [r4, #0]
 80023c8:	f000 fada 	bl	8002980 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 80023cc:	603e      	str	r6, [r7, #0]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023ce:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 80023d0:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023d2:	f000 fbb5 	bl	8002b40 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 80023d6:	4605      	mov	r5, r0
 80023d8:	2800      	cmp	r0, #0
 80023da:	d178      	bne.n	80024ce <HAL_SD_InitCard+0x142>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80023dc:	6820      	ldr	r0, [r4, #0]
 80023de:	f000 fbd7 	bl	8002b90 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80023e2:	b130      	cbz	r0, 80023f2 <HAL_SD_InitCard+0x66>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80023e4:	64a5      	str	r5, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80023e6:	6820      	ldr	r0, [r4, #0]
 80023e8:	f000 fbaa 	bl	8002b40 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 80023ec:	b110      	cbz	r0, 80023f4 <HAL_SD_InitCard+0x68>
 80023ee:	4605      	mov	r5, r0
 80023f0:	e06d      	b.n	80024ce <HAL_SD_InitCard+0x142>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80023f2:	64a6      	str	r6, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80023f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d061      	beq.n	80024be <HAL_SD_InitCard+0x132>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80023fa:	f64f 76fe 	movw	r6, #65534	; 0xfffe
{
 80023fe:	2100      	movs	r1, #0
 8002400:	4637      	mov	r7, r6
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002402:	f8df 8178 	ldr.w	r8, [pc, #376]	; 800257c <HAL_SD_InitCard+0x1f0>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002406:	9b06      	ldr	r3, [sp, #24]
 8002408:	42b3      	cmp	r3, r6
 800240a:	d968      	bls.n	80024de <HAL_SD_InitCard+0x152>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800240c:	9b06      	ldr	r3, [sp, #24]
 800240e:	42bb      	cmp	r3, r7
 8002410:	f200 80a9 	bhi.w	8002566 <HAL_SD_InitCard+0x1da>
 8002414:	2301      	movs	r3, #1
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002416:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
 800241a:	bf18      	it	ne
 800241c:	461d      	movne	r5, r3
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800241e:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002420:	6465      	str	r5, [r4, #68]	; 0x44
  uint16_t sd_rca = 1U;
 8002422:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002426:	f000 fab3 	bl	8002990 <SDIO_GetPowerState>
 800242a:	2800      	cmp	r0, #0
 800242c:	f000 809e 	beq.w	800256c <HAL_SD_InitCard+0x1e0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002430:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002432:	2b03      	cmp	r3, #3
 8002434:	d019      	beq.n	800246a <HAL_SD_InitCard+0xde>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002436:	6820      	ldr	r0, [r4, #0]
 8002438:	f000 fc31 	bl	8002c9e <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800243c:	2800      	cmp	r0, #0
 800243e:	d16d      	bne.n	800251c <HAL_SD_InitCard+0x190>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002440:	4601      	mov	r1, r0
 8002442:	6820      	ldr	r0, [r4, #0]
 8002444:	f000 fabb 	bl	80029be <SDIO_GetResponse>
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002448:	2104      	movs	r1, #4
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800244a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800244c:	6820      	ldr	r0, [r4, #0]
 800244e:	f000 fab6 	bl	80029be <SDIO_GetResponse>
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002452:	2108      	movs	r1, #8
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002454:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002456:	6820      	ldr	r0, [r4, #0]
 8002458:	f000 fab1 	bl	80029be <SDIO_GetResponse>
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800245c:	210c      	movs	r1, #12
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800245e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002460:	6820      	ldr	r0, [r4, #0]
 8002462:	f000 faac 	bl	80029be <SDIO_GetResponse>
 8002466:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED)
 800246a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800246c:	2b03      	cmp	r3, #3
 800246e:	d14e      	bne.n	800250e <HAL_SD_InitCard+0x182>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002470:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002472:	2b03      	cmp	r3, #3
 8002474:	d159      	bne.n	800252a <HAL_SD_InitCard+0x19e>
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002476:	2104      	movs	r1, #4
 8002478:	6820      	ldr	r0, [r4, #0]
 800247a:	f000 faa0 	bl	80029be <SDIO_GetResponse>
 800247e:	0d00      	lsrs	r0, r0, #20
 8002480:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002482:	a90d      	add	r1, sp, #52	; 0x34
 8002484:	4620      	mov	r0, r4
 8002486:	f7ff fecb 	bl	8002220 <HAL_SD_GetCardCSD>
 800248a:	4605      	mov	r5, r0
 800248c:	2800      	cmp	r0, #0
 800248e:	d170      	bne.n	8002572 <HAL_SD_InitCard+0x1e6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002490:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002492:	4603      	mov	r3, r0
 8002494:	0412      	lsls	r2, r2, #16
 8002496:	6820      	ldr	r0, [r4, #0]
 8002498:	f000 fb3a 	bl	8002b10 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800249c:	2800      	cmp	r0, #0
 800249e:	d13d      	bne.n	800251c <HAL_SD_InitCard+0x190>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80024a0:	f104 0310 	add.w	r3, r4, #16
 80024a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80024ac:	1d23      	adds	r3, r4, #4
 80024ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024b0:	6820      	ldr	r0, [r4, #0]
 80024b2:	f000 fa41 	bl	8002938 <SDIO_Init>
}
 80024b6:	4628      	mov	r0, r5
 80024b8:	b018      	add	sp, #96	; 0x60
 80024ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80024be:	2100      	movs	r1, #0
 80024c0:	6820      	ldr	r0, [r4, #0]
 80024c2:	f000 fba3 	bl	8002c0c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d097      	beq.n	80023fa <HAL_SD_InitCard+0x6e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80024ca:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80024d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80024d6:	4315      	orrs	r5, r2
 80024d8:	63a5      	str	r5, [r4, #56]	; 0x38
    return HAL_ERROR;
 80024da:	2501      	movs	r5, #1
 80024dc:	e7eb      	b.n	80024b6 <HAL_SD_InitCard+0x12a>
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80024de:	2900      	cmp	r1, #0
 80024e0:	d194      	bne.n	800240c <HAL_SD_InitCard+0x80>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80024e2:	6820      	ldr	r0, [r4, #0]
 80024e4:	f000 fb92 	bl	8002c0c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024e8:	4605      	mov	r5, r0
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d1ef      	bne.n	80024ce <HAL_SD_InitCard+0x142>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80024ee:	4641      	mov	r1, r8
 80024f0:	6820      	ldr	r0, [r4, #0]
 80024f2:	f000 fba3 	bl	8002c3c <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80024f6:	2800      	cmp	r0, #0
 80024f8:	d1e7      	bne.n	80024ca <HAL_SD_InitCard+0x13e>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80024fa:	4629      	mov	r1, r5
 80024fc:	6820      	ldr	r0, [r4, #0]
 80024fe:	f000 fa5e 	bl	80029be <SDIO_GetResponse>
    count++;
 8002502:	9b06      	ldr	r3, [sp, #24]
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002504:	4605      	mov	r5, r0
    count++;
 8002506:	3301      	adds	r3, #1
 8002508:	9306      	str	r3, [sp, #24]
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800250a:	0fc1      	lsrs	r1, r0, #31
 800250c:	e77b      	b.n	8002406 <HAL_SD_InitCard+0x7a>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800250e:	f10d 0116 	add.w	r1, sp, #22
 8002512:	6820      	ldr	r0, [r4, #0]
 8002514:	f000 fbee 	bl	8002cf4 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002518:	2800      	cmp	r0, #0
 800251a:	d0a9      	beq.n	8002470 <HAL_SD_InitCard+0xe4>
    hsd->State = HAL_SD_STATE_READY;
 800251c:	2501      	movs	r5, #1
 800251e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002522:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002524:	4308      	orrs	r0, r1
 8002526:	63a0      	str	r0, [r4, #56]	; 0x38
 8002528:	e7c5      	b.n	80024b6 <HAL_SD_InitCard+0x12a>
    hsd->SdCard.RelCardAdd = sd_rca;
 800252a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800252e:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 8002530:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002532:	0409      	lsls	r1, r1, #16
 8002534:	f000 fbc8 	bl	8002cc8 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002538:	2800      	cmp	r0, #0
 800253a:	d1ef      	bne.n	800251c <HAL_SD_InitCard+0x190>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800253c:	4601      	mov	r1, r0
 800253e:	6820      	ldr	r0, [r4, #0]
 8002540:	f000 fa3d 	bl	80029be <SDIO_GetResponse>
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002544:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002546:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002548:	6820      	ldr	r0, [r4, #0]
 800254a:	f000 fa38 	bl	80029be <SDIO_GetResponse>
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800254e:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002550:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	f000 fa33 	bl	80029be <SDIO_GetResponse>
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002558:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800255a:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800255c:	6820      	ldr	r0, [r4, #0]
 800255e:	f000 fa2e 	bl	80029be <SDIO_GetResponse>
 8002562:	6720      	str	r0, [r4, #112]	; 0x70
 8002564:	e787      	b.n	8002476 <HAL_SD_InitCard+0xea>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002566:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800256a:	e7b0      	b.n	80024ce <HAL_SD_InitCard+0x142>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800256c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002570:	e7d4      	b.n	800251c <HAL_SD_InitCard+0x190>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002572:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002576:	e7d1      	b.n	800251c <HAL_SD_InitCard+0x190>
 8002578:	423000a0 	.word	0x423000a0
 800257c:	c1100000 	.word	0xc1100000

08002580 <HAL_SD_Init>:
{
 8002580:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8002582:	4604      	mov	r4, r0
 8002584:	b908      	cbnz	r0, 800258a <HAL_SD_Init+0xa>
    return HAL_ERROR;
 8002586:	2001      	movs	r0, #1
 8002588:	bd10      	pop	{r4, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 800258a:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800258e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002592:	b913      	cbnz	r3, 800259a <HAL_SD_Init+0x1a>
    hsd->Lock = HAL_UNLOCKED;
 8002594:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8002596:	f7fe f811 	bl	80005bc <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 800259a:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800259c:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 800259e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80025a2:	f7ff fef3 	bl	800238c <HAL_SD_InitCard>
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d1ed      	bne.n	8002586 <HAL_SD_Init+0x6>
  hsd->State = HAL_SD_STATE_READY;
 80025aa:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80025ac:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80025ae:	6320      	str	r0, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80025b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80025b4:	bd10      	pop	{r4, pc}

080025b6 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80025b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80025b8:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80025ba:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80025bc:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80025be:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80025c0:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80025c2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80025c4:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80025c6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80025c8:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80025ca:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80025cc:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80025ce:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80025d0:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80025d2:	6e03      	ldr	r3, [r0, #96]	; 0x60
}
 80025d4:	2000      	movs	r0, #0
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80025d6:	61cb      	str	r3, [r1, #28]
}
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_SD_ConfigWideBusOperation>:
  hsd->State = HAL_SD_STATE_BUSY;
 80025dc:	2303      	movs	r3, #3
{
 80025de:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80025e0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80025e6:	b08a      	sub	sp, #40	; 0x28
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025e8:	2b03      	cmp	r3, #3
{
 80025ea:	4604      	mov	r4, r0
 80025ec:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED)
 80025ee:	d002      	beq.n	80025f6 <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDIO_BUS_WIDE_8B)
 80025f0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80025f4:	d103      	bne.n	80025fe <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80025f6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	e055      	b.n	80026aa <HAL_SD_ConfigWideBusOperation+0xce>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80025fe:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8002602:	d12c      	bne.n	800265e <HAL_SD_ConfigWideBusOperation+0x82>
  uint32_t scr[2U] = {0U, 0U};
 8002604:	2100      	movs	r1, #0
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002606:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002608:	9104      	str	r1, [sp, #16]
 800260a:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800260c:	f000 f9d7 	bl	80029be <SDIO_GetResponse>
 8002610:	0180      	lsls	r0, r0, #6
 8002612:	d41f      	bmi.n	8002654 <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 8002614:	a904      	add	r1, sp, #16
 8002616:	4620      	mov	r0, r4
 8002618:	f7ff fbb4 	bl	8001d84 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800261c:	b960      	cbnz	r0, 8002638 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800261e:	9b05      	ldr	r3, [sp, #20]
 8002620:	0359      	lsls	r1, r3, #13
 8002622:	d519      	bpl.n	8002658 <HAL_SD_ConfigWideBusOperation+0x7c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002624:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002626:	6820      	ldr	r0, [r4, #0]
 8002628:	0409      	lsls	r1, r1, #16
 800262a:	f000 faef 	bl	8002c0c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800262e:	b918      	cbnz	r0, 8002638 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8002630:	2102      	movs	r1, #2
 8002632:	6820      	ldr	r0, [r4, #0]
 8002634:	f000 fbde 	bl	8002df4 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800263a:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 800263c:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800263e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8002640:	2d00      	cmp	r5, #0
 8002642:	d034      	beq.n	80026ae <HAL_SD_ConfigWideBusOperation+0xd2>
    hsd->State = HAL_SD_STATE_READY;
 8002644:	2001      	movs	r0, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002646:	6823      	ldr	r3, [r4, #0]
 8002648:	4a26      	ldr	r2, [pc, #152]	; (80026e4 <HAL_SD_ConfigWideBusOperation+0x108>)
 800264a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800264c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8002650:	b00a      	add	sp, #40	; 0x28
 8002652:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002654:	4630      	mov	r0, r6
 8002656:	e7ef      	b.n	8002638 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002658:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800265c:	e7ec      	b.n	8002638 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800265e:	bb09      	cbnz	r1, 80026a4 <HAL_SD_ConfigWideBusOperation+0xc8>
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002660:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0U, 0U};
 8002662:	9104      	str	r1, [sp, #16]
 8002664:	9105      	str	r1, [sp, #20]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8002666:	f000 f9aa 	bl	80029be <SDIO_GetResponse>
 800266a:	0182      	lsls	r2, r0, #6
 800266c:	d414      	bmi.n	8002698 <HAL_SD_ConfigWideBusOperation+0xbc>
  errorstate = SD_FindSCR(hsd, scr);
 800266e:	a904      	add	r1, sp, #16
 8002670:	4620      	mov	r0, r4
 8002672:	f7ff fb87 	bl	8001d84 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8002676:	b960      	cbnz	r0, 8002692 <HAL_SD_ConfigWideBusOperation+0xb6>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8002678:	9b05      	ldr	r3, [sp, #20]
 800267a:	03db      	lsls	r3, r3, #15
 800267c:	d50f      	bpl.n	800269e <HAL_SD_ConfigWideBusOperation+0xc2>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800267e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002680:	6820      	ldr	r0, [r4, #0]
 8002682:	0409      	lsls	r1, r1, #16
 8002684:	f000 fac2 	bl	8002c0c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002688:	b918      	cbnz	r0, 8002692 <HAL_SD_ConfigWideBusOperation+0xb6>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800268a:	4601      	mov	r1, r0
 800268c:	6820      	ldr	r0, [r4, #0]
 800268e:	f000 fbb1 	bl	8002df4 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8002692:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8002694:	4308      	orrs	r0, r1
 8002696:	e7d1      	b.n	800263c <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8002698:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800269c:	e7f9      	b.n	8002692 <HAL_SD_ConfigWideBusOperation+0xb6>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800269e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80026a2:	e7f6      	b.n	8002692 <HAL_SD_ConfigWideBusOperation+0xb6>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80026a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80026aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80026ac:	e7c7      	b.n	800263e <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80026ae:	6863      	ldr	r3, [r4, #4]
    Init.BusWide             = WideMode;
 80026b0:	9607      	str	r6, [sp, #28]
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80026b2:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80026b4:	68a3      	ldr	r3, [r4, #8]
 80026b6:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80026b8:	68e3      	ldr	r3, [r4, #12]
 80026ba:	9306      	str	r3, [sp, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80026bc:	6963      	ldr	r3, [r4, #20]
 80026be:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80026c0:	69a3      	ldr	r3, [r4, #24]
 80026c2:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 80026c4:	ab0a      	add	r3, sp, #40	; 0x28
 80026c6:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80026ca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80026ce:	ab04      	add	r3, sp, #16
 80026d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026d2:	6820      	ldr	r0, [r4, #0]
 80026d4:	f000 f930 	bl	8002938 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 80026d8:	2301      	movs	r3, #1
  return HAL_OK;
 80026da:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 80026dc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80026e0:	e7b6      	b.n	8002650 <HAL_SD_ConfigWideBusOperation+0x74>
 80026e2:	bf00      	nop
 80026e4:	004005ff 	.word	0x004005ff

080026e8 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026e8:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 80026ea:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026ec:	0409      	lsls	r1, r1, #16
{
 80026ee:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80026f0:	6800      	ldr	r0, [r0, #0]
 80026f2:	f000 fb4f 	bl	8002d94 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80026f6:	4601      	mov	r1, r0
 80026f8:	b928      	cbnz	r0, 8002706 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80026fa:	6820      	ldr	r0, [r4, #0]
 80026fc:	f000 f95f 	bl	80029be <SDIO_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002700:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8002704:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8002706:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 8002708:	2000      	movs	r0, #0
    hsd->ErrorCode |= errorstate;
 800270a:	4319      	orrs	r1, r3
 800270c:	63a1      	str	r1, [r4, #56]	; 0x38
 800270e:	e7f7      	b.n	8002700 <HAL_SD_GetCardState+0x18>

08002710 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002710:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002712:	4604      	mov	r4, r0
 8002714:	2800      	cmp	r0, #0
 8002716:	d034      	beq.n	8002782 <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002718:	2300      	movs	r3, #0
 800271a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800271c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8002720:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002724:	b91b      	cbnz	r3, 800272e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002726:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800272a:	f7fd ff8d 	bl	8000648 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800272e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002730:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002732:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002736:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002738:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800273a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800273e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002740:	6863      	ldr	r3, [r4, #4]
 8002742:	69a1      	ldr	r1, [r4, #24]
 8002744:	4303      	orrs	r3, r0
 8002746:	68e0      	ldr	r0, [r4, #12]
 8002748:	4303      	orrs	r3, r0
 800274a:	6920      	ldr	r0, [r4, #16]
 800274c:	4303      	orrs	r3, r0
 800274e:	6960      	ldr	r0, [r4, #20]
 8002750:	4303      	orrs	r3, r0
 8002752:	69e0      	ldr	r0, [r4, #28]
 8002754:	4303      	orrs	r3, r0
 8002756:	6a20      	ldr	r0, [r4, #32]
 8002758:	4303      	orrs	r3, r0
 800275a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800275c:	4303      	orrs	r3, r0
 800275e:	f401 7000 	and.w	r0, r1, #512	; 0x200
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002762:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002764:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002766:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800276a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800276c:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800276e:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002770:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002776:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8002778:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800277a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800277c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8002780:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002782:	2001      	movs	r0, #1
}
 8002784:	bd10      	pop	{r4, pc}
	...

08002788 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002788:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <SDMMC_GetCmdResp2+0x4c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fbb3 f2f2 	udiv	r2, r3, r2
 8002794:	f241 3388 	movw	r3, #5000	; 0x1388
 8002798:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 800279a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800279e:	d315      	bcc.n	80027cc <SDMMC_GetCmdResp2+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80027a0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80027a2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80027a6:	d0f8      	beq.n	800279a <SDMMC_GetCmdResp2+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80027a8:	0512      	lsls	r2, r2, #20
 80027aa:	d4f6      	bmi.n	800279a <SDMMC_GetCmdResp2+0x12>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80027ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027ae:	075b      	lsls	r3, r3, #29
 80027b0:	d503      	bpl.n	80027ba <SDMMC_GetCmdResp2+0x32>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80027b2:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80027b4:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	4770      	bx	lr
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80027ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027bc:	f013 0301 	ands.w	r3, r3, #1
 80027c0:	d001      	beq.n	80027c6 <SDMMC_GetCmdResp2+0x3e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80027c2:	2301      	movs	r3, #1
 80027c4:	e7f6      	b.n	80027b4 <SDMMC_GetCmdResp2+0x2c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80027c6:	22c5      	movs	r2, #197	; 0xc5
 80027c8:	6382      	str	r2, [r0, #56]	; 0x38
 80027ca:	e7f4      	b.n	80027b6 <SDMMC_GetCmdResp2+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80027cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80027d0:	e7f1      	b.n	80027b6 <SDMMC_GetCmdResp2+0x2e>
 80027d2:	bf00      	nop
 80027d4:	20000060 	.word	0x20000060

080027d8 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80027d8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <SDMMC_GetCmdResp3+0x40>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80027e4:	f241 3388 	movw	r3, #5000	; 0x1388
 80027e8:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 80027ea:	f113 33ff 	adds.w	r3, r3, #4294967295
 80027ee:	d30f      	bcc.n	8002810 <SDMMC_GetCmdResp3+0x38>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80027f0:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80027f2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80027f6:	d0f8      	beq.n	80027ea <SDMMC_GetCmdResp3+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80027f8:	0512      	lsls	r2, r2, #20
 80027fa:	d4f6      	bmi.n	80027ea <SDMMC_GetCmdResp3+0x12>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80027fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027fe:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002802:	bf15      	itete	ne
 8002804:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002806:	22c5      	moveq	r2, #197	; 0xc5
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002808:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800280a:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800280c:	4618      	mov	r0, r3
 800280e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8002810:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000060 	.word	0x20000060

0800281c <SDMMC_GetCmdResp1>:
{
 800281c:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800281e:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8002822:	4b43      	ldr	r3, [pc, #268]	; (8002930 <SDMMC_GetCmdResp1+0x114>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	fbb3 f3f4 	udiv	r3, r3, r4
 800282a:	435a      	muls	r2, r3
    if (count-- == 0U)
 800282c:	2a00      	cmp	r2, #0
 800282e:	d04a      	beq.n	80028c6 <SDMMC_GetCmdResp1+0xaa>
    sta_reg = SDIOx->STA;
 8002830:	6b43      	ldr	r3, [r0, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002832:	f013 0f45 	tst.w	r3, #69	; 0x45
 8002836:	d008      	beq.n	800284a <SDMMC_GetCmdResp1+0x2e>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002838:	051c      	lsls	r4, r3, #20
 800283a:	d406      	bmi.n	800284a <SDMMC_GetCmdResp1+0x2e>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800283c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800283e:	075b      	lsls	r3, r3, #29
 8002840:	d505      	bpl.n	800284e <SDMMC_GetCmdResp1+0x32>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002842:	2304      	movs	r3, #4
 8002844:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002846:	4618      	mov	r0, r3
 8002848:	bd10      	pop	{r4, pc}
 800284a:	3a01      	subs	r2, #1
 800284c:	e7ee      	b.n	800282c <SDMMC_GetCmdResp1+0x10>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800284e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002850:	07dc      	lsls	r4, r3, #31
 8002852:	d503      	bpl.n	800285c <SDMMC_GetCmdResp1+0x40>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002854:	2301      	movs	r3, #1
 8002856:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002858:	2001      	movs	r0, #1
 800285a:	bd10      	pop	{r4, pc}
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800285c:	23c5      	movs	r3, #197	; 0xc5
 800285e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDIOx->RESPCMD);
 8002860:	6903      	ldr	r3, [r0, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4299      	cmp	r1, r3
 8002866:	d1f7      	bne.n	8002858 <SDMMC_GetCmdResp1+0x3c>
  return (*(__IO uint32_t *) tmp);
 8002868:	6943      	ldr	r3, [r0, #20]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800286a:	4832      	ldr	r0, [pc, #200]	; (8002934 <SDMMC_GetCmdResp1+0x118>)
 800286c:	4018      	ands	r0, r3
 800286e:	2800      	cmp	r0, #0
 8002870:	d05c      	beq.n	800292c <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002872:	2b00      	cmp	r3, #0
 8002874:	db2a      	blt.n	80028cc <SDMMC_GetCmdResp1+0xb0>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002876:	005a      	lsls	r2, r3, #1
 8002878:	d42b      	bmi.n	80028d2 <SDMMC_GetCmdResp1+0xb6>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800287a:	009c      	lsls	r4, r3, #2
 800287c:	d42b      	bmi.n	80028d6 <SDMMC_GetCmdResp1+0xba>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800287e:	00d9      	lsls	r1, r3, #3
 8002880:	d42b      	bmi.n	80028da <SDMMC_GetCmdResp1+0xbe>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002882:	011a      	lsls	r2, r3, #4
 8002884:	d42c      	bmi.n	80028e0 <SDMMC_GetCmdResp1+0xc4>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002886:	015c      	lsls	r4, r3, #5
 8002888:	d42d      	bmi.n	80028e6 <SDMMC_GetCmdResp1+0xca>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800288a:	01d9      	lsls	r1, r3, #7
 800288c:	d42e      	bmi.n	80028ec <SDMMC_GetCmdResp1+0xd0>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800288e:	021a      	lsls	r2, r3, #8
 8002890:	d42f      	bmi.n	80028f2 <SDMMC_GetCmdResp1+0xd6>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002892:	025c      	lsls	r4, r3, #9
 8002894:	d430      	bmi.n	80028f8 <SDMMC_GetCmdResp1+0xdc>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002896:	0299      	lsls	r1, r3, #10
 8002898:	d431      	bmi.n	80028fe <SDMMC_GetCmdResp1+0xe2>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800289a:	02da      	lsls	r2, r3, #11
 800289c:	d432      	bmi.n	8002904 <SDMMC_GetCmdResp1+0xe8>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800289e:	035c      	lsls	r4, r3, #13
 80028a0:	d433      	bmi.n	800290a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80028a2:	0399      	lsls	r1, r3, #14
 80028a4:	d434      	bmi.n	8002910 <SDMMC_GetCmdResp1+0xf4>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80028a6:	03da      	lsls	r2, r3, #15
 80028a8:	d435      	bmi.n	8002916 <SDMMC_GetCmdResp1+0xfa>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80028aa:	041c      	lsls	r4, r3, #16
 80028ac:	d436      	bmi.n	800291c <SDMMC_GetCmdResp1+0x100>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80028ae:	0459      	lsls	r1, r3, #17
 80028b0:	d437      	bmi.n	8002922 <SDMMC_GetCmdResp1+0x106>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80028b2:	049a      	lsls	r2, r3, #18
 80028b4:	d438      	bmi.n	8002928 <SDMMC_GetCmdResp1+0x10c>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80028b6:	f013 0f08 	tst.w	r3, #8
 80028ba:	bf0c      	ite	eq
 80028bc:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80028c0:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 80028c4:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80028c6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80028ca:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80028cc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80028d0:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80028d2:	2040      	movs	r0, #64	; 0x40
 80028d4:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80028d6:	2080      	movs	r0, #128	; 0x80
 80028d8:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80028da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80028de:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80028e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028e4:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80028e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80028ea:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80028ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80028f0:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_COM_CRC_FAILED;
 80028f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80028f6:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 80028f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80028fc:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80028fe:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002902:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CC_ERR;
 8002904:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002908:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800290a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800290e:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002910:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002914:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002916:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800291a:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800291c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002920:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002922:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8002926:	bd10      	pop	{r4, pc}
    return SDMMC_ERROR_ERASE_RESET;
 8002928:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800292c:	bd10      	pop	{r4, pc}
 800292e:	bf00      	nop
 8002930:	20000060 	.word	0x20000060
 8002934:	fdffe008 	.word	0xfdffe008

08002938 <SDIO_Init>:
{
 8002938:	b084      	sub	sp, #16
 800293a:	b510      	push	{r4, lr}
 800293c:	ac03      	add	r4, sp, #12
 800293e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8002942:	9904      	ldr	r1, [sp, #16]
 8002944:	9b03      	ldr	r3, [sp, #12]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002946:	6842      	ldr	r2, [r0, #4]
  tmpreg |= (Init.ClockEdge           |\
 8002948:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 800294a:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800294c:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
             Init.ClockBypass         |\
 8002950:	430b      	orrs	r3, r1
             Init.ClockPowerSave      |\
 8002952:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002954:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
             Init.ClockPowerSave      |\
 8002958:	430b      	orrs	r3, r1
             Init.BusWide             |\
 800295a:	9907      	ldr	r1, [sp, #28]
 800295c:	430b      	orrs	r3, r1
             Init.HardwareFlowControl |\
 800295e:	9908      	ldr	r1, [sp, #32]
}
 8002960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
             Init.HardwareFlowControl |\
 8002964:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002966:	4313      	orrs	r3, r2
 8002968:	6043      	str	r3, [r0, #4]
}
 800296a:	b004      	add	sp, #16
 800296c:	2000      	movs	r0, #0
 800296e:	4770      	bx	lr

08002970 <SDIO_ReadFIFO>:
 8002970:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8002974:	4770      	bx	lr

08002976 <SDIO_WriteFIFO>:
  SDIOx->FIFO = *pWriteData;
 8002976:	680b      	ldr	r3, [r1, #0]
 8002978:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800297c:	2000      	movs	r0, #0
 800297e:	4770      	bx	lr

08002980 <SDIO_PowerState_ON>:
{  
 8002980:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002982:	2303      	movs	r3, #3
 8002984:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8002986:	2002      	movs	r0, #2
 8002988:	f7fe f90e 	bl	8000ba8 <HAL_Delay>
}
 800298c:	2000      	movs	r0, #0
 800298e:	bd08      	pop	{r3, pc}

08002990 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8002990:	6800      	ldr	r0, [r0, #0]
}
 8002992:	f000 0003 	and.w	r0, r0, #3
 8002996:	4770      	bx	lr

08002998 <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8002998:	680b      	ldr	r3, [r1, #0]
{
 800299a:	b510      	push	{r4, lr}
  SDIOx->ARG = Command->Argument;
 800299c:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800299e:	688c      	ldr	r4, [r1, #8]
 80029a0:	684b      	ldr	r3, [r1, #4]
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80029a2:	68c2      	ldr	r2, [r0, #12]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80029a4:	4323      	orrs	r3, r4
                       Command->Response         |\
 80029a6:	68cc      	ldr	r4, [r1, #12]
                       Command->WaitForInterrupt |\
 80029a8:	6909      	ldr	r1, [r1, #16]
                       Command->Response         |\
 80029aa:	4323      	orrs	r3, r4
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80029ac:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
                       Command->WaitForInterrupt |\
 80029b0:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80029b2:	f022 020f 	bic.w	r2, r2, #15
 80029b6:	4313      	orrs	r3, r2
 80029b8:	60c3      	str	r3, [r0, #12]
}
 80029ba:	2000      	movs	r0, #0
 80029bc:	bd10      	pop	{r4, pc}

080029be <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80029be:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 80029c0:	5840      	ldr	r0, [r0, r1]
}  
 80029c2:	4770      	bx	lr

080029c4 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 80029c4:	680b      	ldr	r3, [r1, #0]
{
 80029c6:	b510      	push	{r4, lr}
  SDIOx->DTIMER = Data->DataTimeOut;
 80029c8:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 80029ca:	684b      	ldr	r3, [r1, #4]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80029cc:	68cc      	ldr	r4, [r1, #12]
  SDIOx->DLEN = Data->DataLength;
 80029ce:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80029d0:	688b      	ldr	r3, [r1, #8]
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80029d2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80029d4:	4323      	orrs	r3, r4
                       Data->TransferDir   |\
 80029d6:	690c      	ldr	r4, [r1, #16]
                       Data->TransferMode  |\
 80029d8:	6949      	ldr	r1, [r1, #20]
                       Data->TransferDir   |\
 80029da:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 80029dc:	430b      	orrs	r3, r1
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80029de:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 80029e2:	4313      	orrs	r3, r2
 80029e4:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 80029e6:	2000      	movs	r0, #0
 80029e8:	bd10      	pop	{r4, pc}

080029ea <SDMMC_CmdBlockLength>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029ea:	2340      	movs	r3, #64	; 0x40
{
 80029ec:	b530      	push	{r4, r5, lr}
 80029ee:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029f0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029f2:	2300      	movs	r3, #0
{
 80029f4:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80029f6:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029f8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80029fe:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a00:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a02:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8002a04:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a06:	f7ff ffc7 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4621      	mov	r1, r4
 8002a10:	4628      	mov	r0, r5
 8002a12:	f7ff ff03 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002a16:	b007      	add	sp, #28
 8002a18:	bd30      	pop	{r4, r5, pc}

08002a1a <SDMMC_CmdReadSingleBlock>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a1a:	2340      	movs	r3, #64	; 0x40
{
 8002a1c:	b530      	push	{r4, r5, lr}
 8002a1e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a20:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a22:	2300      	movs	r3, #0
{
 8002a24:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002a26:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a28:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002a2e:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a30:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a32:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002a34:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a36:	f7ff ffaf 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3e:	4621      	mov	r1, r4
 8002a40:	4628      	mov	r0, r5
 8002a42:	f7ff feeb 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002a46:	b007      	add	sp, #28
 8002a48:	bd30      	pop	{r4, r5, pc}

08002a4a <SDMMC_CmdReadMultiBlock>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a4a:	2340      	movs	r3, #64	; 0x40
{
 8002a4c:	b530      	push	{r4, r5, lr}
 8002a4e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a50:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a52:	2300      	movs	r3, #0
{
 8002a54:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002a56:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a58:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002a5e:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a60:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a62:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8002a64:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a66:	f7ff ff97 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4628      	mov	r0, r5
 8002a72:	f7ff fed3 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002a76:	b007      	add	sp, #28
 8002a78:	bd30      	pop	{r4, r5, pc}

08002a7a <SDMMC_CmdWriteSingleBlock>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a7a:	2340      	movs	r3, #64	; 0x40
{
 8002a7c:	b530      	push	{r4, r5, lr}
 8002a7e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a80:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a82:	2300      	movs	r3, #0
{
 8002a84:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002a86:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a88:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002a8e:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a90:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a92:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8002a94:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a96:	f7ff ff7f 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	4628      	mov	r0, r5
 8002aa2:	f7ff febb 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002aa6:	b007      	add	sp, #28
 8002aa8:	bd30      	pop	{r4, r5, pc}

08002aaa <SDMMC_CmdWriteMultiBlock>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002aaa:	2340      	movs	r3, #64	; 0x40
{
 8002aac:	b530      	push	{r4, r5, lr}
 8002aae:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ab0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ab2:	2300      	movs	r3, #0
{
 8002ab4:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002ab6:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ab8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8002abe:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ac0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ac2:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8002ac4:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ac6:	f7ff ff67 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4621      	mov	r1, r4
 8002ad0:	4628      	mov	r0, r5
 8002ad2:	f7ff fea3 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002ad6:	b007      	add	sp, #28
 8002ad8:	bd30      	pop	{r4, r5, pc}
	...

08002adc <SDMMC_CmdStopTransfer>:
  sdmmc_cmdinit.Argument         = 0U;
 8002adc:	2300      	movs	r3, #0
{
 8002ade:	b530      	push	{r4, r5, lr}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002ae4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002ae6:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002ae8:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002aea:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002af0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002af2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002af4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002af6:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002af8:	f7ff ff4e 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <SDMMC_CmdStopTransfer+0x30>)
 8002afe:	4621      	mov	r1, r4
 8002b00:	4628      	mov	r0, r5
 8002b02:	f7ff fe8b 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002b06:	b007      	add	sp, #28
 8002b08:	bd30      	pop	{r4, r5, pc}
 8002b0a:	bf00      	nop
 8002b0c:	05f5e100 	.word	0x05f5e100

08002b10 <SDMMC_CmdSelDesel>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b10:	2340      	movs	r3, #64	; 0x40
{
 8002b12:	b530      	push	{r4, r5, lr}
 8002b14:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b16:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b18:	2300      	movs	r3, #0
{
 8002b1a:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002b1c:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b1e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b24:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002b26:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b28:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8002b2a:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b2c:	f7ff ff34 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4621      	mov	r1, r4
 8002b36:	4628      	mov	r0, r5
 8002b38:	f7ff fe70 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002b3c:	b007      	add	sp, #28
 8002b3e:	bd30      	pop	{r4, r5, pc}

08002b40 <SDMMC_CmdGoIdleState>:
  sdmmc_cmdinit.Argument         = 0U;
 8002b40:	2300      	movs	r3, #0
{
 8002b42:	b510      	push	{r4, lr}
 8002b44:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0U;
 8002b46:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002b48:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002b4a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b52:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b54:	9305      	str	r3, [sp, #20]
{
 8002b56:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b58:	f7ff ff1e 	bl	8002998 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002b5c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <SDMMC_CmdGoIdleState+0x4c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b68:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b6c:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002b6e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002b72:	d307      	bcc.n	8002b84 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002b74:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002b76:	0612      	lsls	r2, r2, #24
 8002b78:	d5f9      	bpl.n	8002b6e <SDMMC_CmdGoIdleState+0x2e>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002b7a:	23c5      	movs	r3, #197	; 0xc5
  return SDMMC_ERROR_NONE;
 8002b7c:	2000      	movs	r0, #0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002b7e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002b80:	b006      	add	sp, #24
 8002b82:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8002b84:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 8002b88:	e7fa      	b.n	8002b80 <SDMMC_CmdGoIdleState+0x40>
 8002b8a:	bf00      	nop
 8002b8c:	20000060 	.word	0x20000060

08002b90 <SDMMC_CmdOperCond>:
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002b90:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
{
 8002b94:	b510      	push	{r4, lr}
 8002b96:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8002b98:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b9e:	2340      	movs	r3, #64	; 0x40
 8002ba0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002baa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bac:	9305      	str	r3, [sp, #20]
{
 8002bae:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bb0:	f7ff fef2 	bl	8002998 <SDIO_SendCommand>
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002bb4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <SDMMC_CmdOperCond+0x78>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bc0:	f241 3388 	movw	r3, #5000	; 0x1388
 8002bc4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0U)
 8002bc6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002bca:	d31a      	bcc.n	8002c02 <SDMMC_CmdOperCond+0x72>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8002bcc:	6b62      	ldr	r2, [r4, #52]	; 0x34
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002bce:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002bd2:	d0f8      	beq.n	8002bc6 <SDMMC_CmdOperCond+0x36>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002bd4:	0512      	lsls	r2, r2, #20
 8002bd6:	d4f6      	bmi.n	8002bc6 <SDMMC_CmdOperCond+0x36>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bda:	075b      	lsls	r3, r3, #29
 8002bdc:	d503      	bpl.n	8002be6 <SDMMC_CmdOperCond+0x56>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002bde:	2004      	movs	r0, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002be0:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002be2:	b006      	add	sp, #24
 8002be4:	bd10      	pop	{r4, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002be6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002be8:	f012 0201 	ands.w	r2, r2, #1
 8002bec:	d001      	beq.n	8002bf2 <SDMMC_CmdOperCond+0x62>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002bee:	2001      	movs	r0, #1
 8002bf0:	e7f6      	b.n	8002be0 <SDMMC_CmdOperCond+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8002bf2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002bf4:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002bf8:	d0f3      	beq.n	8002be2 <SDMMC_CmdOperCond+0x52>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002bfa:	2340      	movs	r3, #64	; 0x40
  }
  
  return SDMMC_ERROR_NONE;
 8002bfc:	4610      	mov	r0, r2
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8002bfe:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c00:	e7ef      	b.n	8002be2 <SDMMC_CmdOperCond+0x52>
      return SDMMC_ERROR_TIMEOUT;
 8002c02:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002c06:	e7ec      	b.n	8002be2 <SDMMC_CmdOperCond+0x52>
 8002c08:	20000060 	.word	0x20000060

08002c0c <SDMMC_CmdAppCommand>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c0c:	2340      	movs	r3, #64	; 0x40
{
 8002c0e:	b530      	push	{r4, r5, lr}
 8002c10:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c12:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c14:	2300      	movs	r3, #0
{
 8002c16:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002c18:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c1a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002c20:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c22:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c24:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002c26:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c28:	f7ff feb6 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4621      	mov	r1, r4
 8002c32:	4628      	mov	r0, r5
 8002c34:	f7ff fdf2 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002c38:	b007      	add	sp, #28
 8002c3a:	bd30      	pop	{r4, r5, pc}

08002c3c <SDMMC_CmdAppOperCommand>:
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002c3c:	2329      	movs	r3, #41	; 0x29
{
 8002c3e:	b510      	push	{r4, lr}
 8002c40:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002c42:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c44:	2340      	movs	r3, #64	; 0x40
 8002c46:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c48:	2300      	movs	r3, #0
{
 8002c4a:	4604      	mov	r4, r0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002c52:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002c56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002c5a:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c5c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c5e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c60:	f7ff fe9a 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002c64:	4620      	mov	r0, r4
 8002c66:	f7ff fdb7 	bl	80027d8 <SDMMC_GetCmdResp3>
}
 8002c6a:	b006      	add	sp, #24
 8002c6c:	bd10      	pop	{r4, pc}

08002c6e <SDMMC_CmdSendSCR>:
  sdmmc_cmdinit.Argument         = 0U;
 8002c6e:	2300      	movs	r3, #0
{
 8002c70:	b530      	push	{r4, r5, lr}
 8002c72:	b087      	sub	sp, #28
 8002c74:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002c76:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002c78:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c7a:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c7c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c82:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c84:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c86:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8002c88:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c8a:	f7ff fe85 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8002c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c92:	4621      	mov	r1, r4
 8002c94:	4628      	mov	r0, r5
 8002c96:	f7ff fdc1 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002c9a:	b007      	add	sp, #28
 8002c9c:	bd30      	pop	{r4, r5, pc}

08002c9e <SDMMC_CmdSendCID>:
  sdmmc_cmdinit.Argument         = 0U;
 8002c9e:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002ca0:	2202      	movs	r2, #2
{
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	b086      	sub	sp, #24
 8002ca6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8002ca8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002caa:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002cac:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002cae:	22c0      	movs	r2, #192	; 0xc0
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cb4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002cb6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002cb8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002cba:	f7ff fe6d 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002cbe:	4620      	mov	r0, r4
 8002cc0:	f7ff fd62 	bl	8002788 <SDMMC_GetCmdResp2>
}
 8002cc4:	b006      	add	sp, #24
 8002cc6:	bd10      	pop	{r4, pc}

08002cc8 <SDMMC_CmdSendCSD>:
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002cc8:	2309      	movs	r3, #9
{
 8002cca:	b510      	push	{r4, lr}
 8002ccc:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002cce:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002cd0:	23c0      	movs	r3, #192	; 0xc0
 8002cd2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002cd4:	2300      	movs	r3, #0
{
 8002cd6:	4604      	mov	r4, r0
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002cd8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = Argument;
 8002cde:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ce0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ce2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ce4:	f7ff fe58 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7ff fd4d 	bl	8002788 <SDMMC_GetCmdResp2>
}
 8002cee:	b006      	add	sp, #24
 8002cf0:	bd10      	pop	{r4, pc}
	...

08002cf4 <SDMMC_CmdSetRelAdd>:
  sdmmc_cmdinit.Argument         = 0U;
 8002cf4:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002cf6:	2203      	movs	r2, #3
{
 8002cf8:	b530      	push	{r4, r5, lr}
 8002cfa:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0U;
 8002cfc:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002cfe:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d00:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d02:	2240      	movs	r2, #64	; 0x40
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
{
 8002d08:	460d      	mov	r5, r1
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d0a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d0c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002d0e:	9305      	str	r3, [sp, #20]
{
 8002d10:	4604      	mov	r4, r0
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002d12:	f7ff fe41 	bl	8002998 <SDIO_SendCommand>
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002d16:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <SDMMC_CmdSetRelAdd+0x9c>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002d22:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d26:	4353      	muls	r3, r2
    if (count-- == 0U)
 8002d28:	f113 33ff 	adds.w	r3, r3, #4294967295
 8002d2c:	d328      	bcc.n	8002d80 <SDMMC_CmdSetRelAdd+0x8c>
    sta_reg = SDIOx->STA;
 8002d2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002d30:	f012 0f45 	tst.w	r2, #69	; 0x45
 8002d34:	d0f8      	beq.n	8002d28 <SDMMC_CmdSetRelAdd+0x34>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002d36:	0512      	lsls	r2, r2, #20
 8002d38:	d4f6      	bmi.n	8002d28 <SDMMC_CmdSetRelAdd+0x34>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d3c:	0758      	lsls	r0, r3, #29
 8002d3e:	d503      	bpl.n	8002d48 <SDMMC_CmdSetRelAdd+0x54>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002d40:	2004      	movs	r0, #4
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002d42:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8002d44:	b007      	add	sp, #28
 8002d46:	bd30      	pop	{r4, r5, pc}
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d4a:	07d9      	lsls	r1, r3, #31
 8002d4c:	d501      	bpl.n	8002d52 <SDMMC_CmdSetRelAdd+0x5e>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002d4e:	2001      	movs	r0, #1
 8002d50:	e7f7      	b.n	8002d42 <SDMMC_CmdSetRelAdd+0x4e>
  return (uint8_t)(SDIOx->RESPCMD);
 8002d52:	6923      	ldr	r3, [r4, #16]
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d115      	bne.n	8002d86 <SDMMC_CmdSetRelAdd+0x92>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002d5a:	23c5      	movs	r3, #197	; 0xc5
 8002d5c:	63a3      	str	r3, [r4, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8002d5e:	6963      	ldr	r3, [r4, #20]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002d60:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8002d64:	d102      	bne.n	8002d6c <SDMMC_CmdSetRelAdd+0x78>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	802b      	strh	r3, [r5, #0]
 8002d6a:	e7eb      	b.n	8002d44 <SDMMC_CmdSetRelAdd+0x50>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002d6c:	045a      	lsls	r2, r3, #17
 8002d6e:	d40c      	bmi.n	8002d8a <SDMMC_CmdSetRelAdd+0x96>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002d70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002d74:	bf0c      	ite	eq
 8002d76:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8002d7a:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002d7e:	e7e1      	b.n	8002d44 <SDMMC_CmdSetRelAdd+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8002d80:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8002d84:	e7de      	b.n	8002d44 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002d86:	2001      	movs	r0, #1
 8002d88:	e7dc      	b.n	8002d44 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002d8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d8e:	e7d9      	b.n	8002d44 <SDMMC_CmdSetRelAdd+0x50>
 8002d90:	20000060 	.word	0x20000060

08002d94 <SDMMC_CmdSendStatus>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d94:	2340      	movs	r3, #64	; 0x40
{
 8002d96:	b530      	push	{r4, r5, lr}
 8002d98:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002d9a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002d9c:	2300      	movs	r3, #0
{
 8002d9e:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002da0:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002da2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = Argument;
 8002da8:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002daa:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dac:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002dae:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002db0:	f7ff fdf2 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002db8:	4621      	mov	r1, r4
 8002dba:	4628      	mov	r0, r5
 8002dbc:	f7ff fd2e 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002dc0:	b007      	add	sp, #28
 8002dc2:	bd30      	pop	{r4, r5, pc}

08002dc4 <SDMMC_CmdSwitch>:
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dc4:	2340      	movs	r3, #64	; 0x40
{
 8002dc6:	b530      	push	{r4, r5, lr}
 8002dc8:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002dca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dcc:	2300      	movs	r3, #0
{
 8002dce:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8002dd0:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002dd2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 8002dd8:	9101      	str	r1, [sp, #4]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002dda:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ddc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8002dde:	9402      	str	r4, [sp, #8]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002de0:	f7ff fdda 	bl	8002998 <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8002de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002de8:	4621      	mov	r1, r4
 8002dea:	4628      	mov	r0, r5
 8002dec:	f7ff fd16 	bl	800281c <SDMMC_GetCmdResp1>
}
 8002df0:	b007      	add	sp, #28
 8002df2:	bd30      	pop	{r4, r5, pc}

08002df4 <SDMMC_CmdBusWidth>:
 8002df4:	f7ff bfe6 	b.w	8002dc4 <SDMMC_CmdSwitch>

08002df8 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002df8:	b084      	sub	sp, #16
 8002dfa:	a801      	add	r0, sp, #4
 8002dfc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8002e00:	b004      	add	sp, #16
 8002e02:	2000      	movs	r0, #0
 8002e04:	4770      	bx	lr

08002e06 <USB_EnableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002e06:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002e10:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002e14:	2000      	movs	r0, #0
 8002e16:	4770      	bx	lr

08002e18 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002e18:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002e1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e20:	045b      	lsls	r3, r3, #17
 8002e22:	0c5b      	lsrs	r3, r3, #17
 8002e24:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  return HAL_OK;
}
 8002e28:	2000      	movs	r0, #0
 8002e2a:	4770      	bx	lr

08002e2c <USB_SetCurrentMode>:
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	4770      	bx	lr

08002e30 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002e30:	b084      	sub	sp, #16
 8002e32:	b510      	push	{r4, lr}
 8002e34:	ac03      	add	r4, sp, #12
 8002e36:	e884 000e 	stmia.w	r4, {r1, r2, r3}

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8002e3e:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002e46:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8002e4a:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002e4e:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 8002e52:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 8002e56:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8002e5e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002e62:	4610      	mov	r0, r2
 8002e64:	4770      	bx	lr
	...

08002e68 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002e68:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e6a:	780d      	ldrb	r5, [r1, #0]
{
 8002e6c:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e6e:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 8002e72:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002e74:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002e78:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e7c:	0412      	lsls	r2, r2, #16
 8002e7e:	0c12      	lsrs	r2, r2, #16
  switch (ep->type)
 8002e80:	2803      	cmp	r0, #3
 8002e82:	d84e      	bhi.n	8002f22 <USB_ActivateEndpoint+0xba>
 8002e84:	e8df f000 	tbb	[pc, r0]
 8002e88:	47044a02 	.word	0x47044a02
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002e8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  HAL_StatusTypeDef ret = HAL_OK;
 8002e90:	2000      	movs	r0, #0
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8002e92:	f248 0480 	movw	r4, #32896	; 0x8080
 8002e96:	4322      	orrs	r2, r4
 8002e98:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002e9c:	780e      	ldrb	r6, [r1, #0]
 8002e9e:	4dab      	ldr	r5, [pc, #684]	; (800314c <USB_ActivateEndpoint+0x2e4>)
 8002ea0:	f833 2026 	ldrh.w	r2, [r3, r6, lsl #2]
 8002ea4:	4334      	orrs	r4, r6
 8002ea6:	b292      	uxth	r2, r2
 8002ea8:	402a      	ands	r2, r5
 8002eaa:	4322      	orrs	r2, r4
 8002eac:	f823 2026 	strh.w	r2, [r3, r6, lsl #2]

  if (ep->doublebuffer == 0U)
 8002eb0:	7b0c      	ldrb	r4, [r1, #12]
 8002eb2:	780a      	ldrb	r2, [r1, #0]
 8002eb4:	2c00      	cmp	r4, #0
 8002eb6:	f040 8088 	bne.w	8002fca <USB_ActivateEndpoint+0x162>
  {
    if (ep->is_in != 0U)
 8002eba:	784e      	ldrb	r6, [r1, #1]
 8002ebc:	88cc      	ldrh	r4, [r1, #6]
 8002ebe:	b396      	cbz	r6, 8002f26 <USB_ActivateEndpoint+0xbe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002ec0:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002ec4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002ec8:	f024 0401 	bic.w	r4, r4, #1
 8002ecc:	b2b6      	uxth	r6, r6
 8002ece:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ed2:	b2a4      	uxth	r4, r4
 8002ed4:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ed6:	780c      	ldrb	r4, [r1, #0]
 8002ed8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002edc:	0656      	lsls	r6, r2, #25
 8002ede:	d509      	bpl.n	8002ef4 <USB_ActivateEndpoint+0x8c>
 8002ee0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	402a      	ands	r2, r5
 8002ee8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eec:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002ef0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8002ef4:	78ca      	ldrb	r2, [r1, #3]
 8002ef6:	7809      	ldrb	r1, [r1, #0]
 8002ef8:	2a01      	cmp	r2, #1
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002efa:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002efe:	4c94      	ldr	r4, [pc, #592]	; (8003150 <USB_ActivateEndpoint+0x2e8>)
 8002f00:	b292      	uxth	r2, r2
 8002f02:	ea02 0204 	and.w	r2, r2, r4
      if (ep->type != EP_TYPE_ISOC)
 8002f06:	d001      	beq.n	8002f0c <USB_ActivateEndpoint+0xa4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f08:	f082 0220 	eor.w	r2, r2, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f14:	e0cb      	b.n	80030ae <USB_ActivateEndpoint+0x246>
      wEpRegVal |= USB_EP_INTERRUPT;
 8002f16:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002f1a:	e7b9      	b.n	8002e90 <USB_ActivateEndpoint+0x28>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002f1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f20:	e7b6      	b.n	8002e90 <USB_ActivateEndpoint+0x28>
      ret = HAL_ERROR;
 8002f22:	2001      	movs	r0, #1
 8002f24:	e7b5      	b.n	8002e92 <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002f26:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002f2a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002f2e:	f024 0401 	bic.w	r4, r4, #1
 8002f32:	b2ad      	uxth	r5, r5
 8002f34:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 8002f38:	b2a4      	uxth	r4, r4
 8002f3a:	5354      	strh	r4, [r2, r5]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002f3c:	780a      	ldrb	r2, [r1, #0]
 8002f3e:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002f42:	690d      	ldr	r5, [r1, #16]
 8002f44:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002f48:	b2b6      	uxth	r6, r6
 8002f4a:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8002f4e:	bb5d      	cbnz	r5, 8002fa8 <USB_ActivateEndpoint+0x140>
 8002f50:	5b94      	ldrh	r4, [r2, r6]
 8002f52:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
 8002f56:	0424      	lsls	r4, r4, #16
 8002f58:	0c24      	lsrs	r4, r4, #16
 8002f5a:	5394      	strh	r4, [r2, r6]
 8002f5c:	5b94      	ldrh	r4, [r2, r6]
 8002f5e:	ea6f 4444 	mvn.w	r4, r4, lsl #17
 8002f62:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002f66:	b2a4      	uxth	r4, r4
 8002f68:	5394      	strh	r4, [r2, r6]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f6a:	780c      	ldrb	r4, [r1, #0]
 8002f6c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f70:	0455      	lsls	r5, r2, #17
 8002f72:	d50d      	bpl.n	8002f90 <USB_ActivateEndpoint+0x128>
 8002f74:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002f78:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002f7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f80:	0412      	lsls	r2, r2, #16
 8002f82:	0c12      	lsrs	r2, r2, #16
 8002f84:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f8c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f90:	7809      	ldrb	r1, [r1, #0]
 8002f92:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002f96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f9e:	0412      	lsls	r2, r2, #16
 8002fa0:	0c12      	lsrs	r2, r2, #16
 8002fa2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8002fa6:	e7b1      	b.n	8002f0c <USB_ActivateEndpoint+0xa4>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002fa8:	2d3e      	cmp	r5, #62	; 0x3e
 8002faa:	d805      	bhi.n	8002fb8 <USB_ActivateEndpoint+0x150>
 8002fac:	086c      	lsrs	r4, r5, #1
 8002fae:	07ed      	lsls	r5, r5, #31
 8002fb0:	bf48      	it	mi
 8002fb2:	3401      	addmi	r4, #1
 8002fb4:	02a4      	lsls	r4, r4, #10
 8002fb6:	e7d6      	b.n	8002f66 <USB_ActivateEndpoint+0xfe>
 8002fb8:	096f      	lsrs	r7, r5, #5
 8002fba:	06ec      	lsls	r4, r5, #27
 8002fbc:	4c65      	ldr	r4, [pc, #404]	; (8003154 <USB_ActivateEndpoint+0x2ec>)
 8002fbe:	bf08      	it	eq
 8002fc0:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002fc4:	ea44 2487 	orr.w	r4, r4, r7, lsl #10
 8002fc8:	e7cd      	b.n	8002f66 <USB_ActivateEndpoint+0xfe>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002fca:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8002fce:	b2a4      	uxth	r4, r4
 8002fd0:	402c      	ands	r4, r5
 8002fd2:	f444 4401 	orr.w	r4, r4, #33024	; 0x8100
 8002fd6:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8002fda:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002fde:	780a      	ldrb	r2, [r1, #0]
 8002fe0:	890c      	ldrh	r4, [r1, #8]
 8002fe2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8002fe6:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8002fea:	f024 0401 	bic.w	r4, r4, #1
 8002fee:	b2b6      	uxth	r6, r6
 8002ff0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ff4:	b2a4      	uxth	r4, r4
 8002ff6:	5394      	strh	r4, [r2, r6]
 8002ff8:	780a      	ldrb	r2, [r1, #0]
 8002ffa:	894c      	ldrh	r4, [r1, #10]
 8002ffc:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 8003000:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8003004:	f024 0401 	bic.w	r4, r4, #1
 8003008:	f502 6281 	add.w	r2, r2, #1032	; 0x408
 800300c:	b2a4      	uxth	r4, r4
 800300e:	b2b6      	uxth	r6, r6
 8003010:	5394      	strh	r4, [r2, r6]
    if (ep->is_in == 0U)
 8003012:	784a      	ldrb	r2, [r1, #1]
 8003014:	780c      	ldrb	r4, [r1, #0]
 8003016:	2a00      	cmp	r2, #0
 8003018:	d14c      	bne.n	80030b4 <USB_ActivateEndpoint+0x24c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800301a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800301e:	0452      	lsls	r2, r2, #17
 8003020:	d509      	bpl.n	8003036 <USB_ActivateEndpoint+0x1ce>
 8003022:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003026:	b292      	uxth	r2, r2
 8003028:	402a      	ands	r2, r5
 800302a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800302e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003032:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003036:	780c      	ldrb	r4, [r1, #0]
 8003038:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800303c:	0657      	lsls	r7, r2, #25
 800303e:	d50d      	bpl.n	800305c <USB_ActivateEndpoint+0x1f4>
 8003040:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003044:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003048:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800304c:	0412      	lsls	r2, r2, #16
 800304e:	0c12      	lsrs	r2, r2, #16
 8003050:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003054:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003058:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800305c:	780c      	ldrb	r4, [r1, #0]
 800305e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003062:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003066:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800306a:	0412      	lsls	r2, r2, #16
 800306c:	0c12      	lsrs	r2, r2, #16
 800306e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003072:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003076:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800307a:	f248 0480 	movw	r4, #32896	; 0x8080
 800307e:	780d      	ldrb	r5, [r1, #0]
 8003080:	f833 2025 	ldrh.w	r2, [r3, r5, lsl #2]
 8003084:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003088:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800308c:	0412      	lsls	r2, r2, #16
 800308e:	0c12      	lsrs	r2, r2, #16
 8003090:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003094:	4322      	orrs	r2, r4
 8003096:	f823 2025 	strh.w	r2, [r3, r5, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800309a:	7809      	ldrb	r1, [r1, #0]
 800309c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 80030a0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80030a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a8:	0412      	lsls	r2, r2, #16
 80030aa:	0c12      	lsrs	r2, r2, #16
 80030ac:	4322      	orrs	r2, r4
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030ae:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  }

  return ret;
}
 80030b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030b4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030b8:	0456      	lsls	r6, r2, #17
 80030ba:	d509      	bpl.n	80030d0 <USB_ActivateEndpoint+0x268>
 80030bc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030c0:	b292      	uxth	r2, r2
 80030c2:	402a      	ands	r2, r5
 80030c4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030cc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030d0:	780c      	ldrb	r4, [r1, #0]
 80030d2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030d6:	0652      	lsls	r2, r2, #25
 80030d8:	d50d      	bpl.n	80030f6 <USB_ActivateEndpoint+0x28e>
 80030da:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030de:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80030e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030e6:	0412      	lsls	r2, r2, #16
 80030e8:	0c12      	lsrs	r2, r2, #16
 80030ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030ee:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80030f2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80030f6:	780c      	ldrb	r4, [r1, #0]
 80030f8:	4d15      	ldr	r5, [pc, #84]	; (8003150 <USB_ActivateEndpoint+0x2e8>)
 80030fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80030fe:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003102:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003106:	0412      	lsls	r2, r2, #16
 8003108:	0c12      	lsrs	r2, r2, #16
 800310a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800310e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003112:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      if (ep->type != EP_TYPE_ISOC)
 8003116:	78ca      	ldrb	r2, [r1, #3]
 8003118:	780c      	ldrb	r4, [r1, #0]
 800311a:	2a01      	cmp	r2, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800311c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003120:	b292      	uxth	r2, r2
 8003122:	ea02 0205 	and.w	r2, r2, r5
 8003126:	bf18      	it	ne
 8003128:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800312c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003130:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003134:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003138:	7809      	ldrb	r1, [r1, #0]
 800313a:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800313e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003142:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003146:	0412      	lsls	r2, r2, #16
 8003148:	0c12      	lsrs	r2, r2, #16
 800314a:	e6df      	b.n	8002f0c <USB_ActivateEndpoint+0xa4>
 800314c:	ffff8f8f 	.word	0xffff8f8f
 8003150:	ffff8fbf 	.word	0xffff8fbf
 8003154:	ffff8000 	.word	0xffff8000

08003158 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003158:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 800315a:	7b0c      	ldrb	r4, [r1, #12]
 800315c:	784b      	ldrb	r3, [r1, #1]
 800315e:	780a      	ldrb	r2, [r1, #0]
 8003160:	2c00      	cmp	r4, #0
 8003162:	d13d      	bne.n	80031e0 <USB_DeactivateEndpoint+0x88>
  {
    if (ep->is_in != 0U)
 8003164:	b313      	cbz	r3, 80031ac <USB_DeactivateEndpoint+0x54>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003166:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800316a:	065c      	lsls	r4, r3, #25
 800316c:	d50d      	bpl.n	800318a <USB_DeactivateEndpoint+0x32>
 800316e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003186:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800318a:	780a      	ldrb	r2, [r1, #0]
 800318c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }

  return HAL_OK;
}
 80031a8:	2000      	movs	r0, #0
 80031aa:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031b0:	045b      	lsls	r3, r3, #17
 80031b2:	d50d      	bpl.n	80031d0 <USB_DeactivateEndpoint+0x78>
 80031b4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c0:	041b      	lsls	r3, r3, #16
 80031c2:	0c1b      	lsrs	r3, r3, #16
 80031c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031cc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031d0:	780a      	ldrb	r2, [r1, #0]
 80031d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031de:	e7db      	b.n	8003198 <USB_DeactivateEndpoint+0x40>
    if (ep->is_in == 0U)
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d14e      	bne.n	8003282 <USB_DeactivateEndpoint+0x12a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031e4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031e8:	045c      	lsls	r4, r3, #17
 80031ea:	d50d      	bpl.n	8003208 <USB_DeactivateEndpoint+0xb0>
 80031ec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80031f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f8:	041b      	lsls	r3, r3, #16
 80031fa:	0c1b      	lsrs	r3, r3, #16
 80031fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003204:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003208:	780a      	ldrb	r2, [r1, #0]
 800320a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800320e:	065b      	lsls	r3, r3, #25
 8003210:	d50d      	bpl.n	800322e <USB_DeactivateEndpoint+0xd6>
 8003212:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800321a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800322a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800322e:	780a      	ldrb	r2, [r1, #0]
 8003230:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003234:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003244:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003248:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800324c:	f248 0280 	movw	r2, #32896	; 0x8080
 8003250:	780c      	ldrb	r4, [r1, #0]
 8003252:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8003256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	041b      	lsls	r3, r3, #16
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	4313      	orrs	r3, r2
 8003264:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003268:	7809      	ldrb	r1, [r1, #0]
 800326a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800326e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	0c1b      	lsrs	r3, r3, #16
 800327a:	4313      	orrs	r3, r2
 800327c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8003280:	e792      	b.n	80031a8 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003282:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003286:	045c      	lsls	r4, r3, #17
 8003288:	d50d      	bpl.n	80032a6 <USB_DeactivateEndpoint+0x14e>
 800328a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800328e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	0c1b      	lsrs	r3, r3, #16
 800329a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a2:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80032a6:	780a      	ldrb	r2, [r1, #0]
 80032a8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032ac:	065b      	lsls	r3, r3, #25
 80032ae:	d50d      	bpl.n	80032cc <USB_DeactivateEndpoint+0x174>
 80032b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80032c8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 80032cc:	780a      	ldrb	r2, [r1, #0]
 80032ce:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80032d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032ea:	f248 0280 	movw	r2, #32896	; 0x8080
 80032ee:	780c      	ldrb	r4, [r1, #0]
 80032f0:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80032f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032fc:	041b      	lsls	r3, r3, #16
 80032fe:	0c1b      	lsrs	r3, r3, #16
 8003300:	4313      	orrs	r3, r2
 8003302:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003306:	7809      	ldrb	r1, [r1, #0]
 8003308:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800330c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003314:	e7af      	b.n	8003276 <USB_DeactivateEndpoint+0x11e>

08003316 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8003316:	784b      	ldrb	r3, [r1, #1]
 8003318:	780a      	ldrb	r2, [r1, #0]
 800331a:	b18b      	cbz	r3, 8003340 <USB_EPSetStall+0x2a>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800331c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003328:	041b      	lsls	r3, r3, #16
 800332a:	0c1b      	lsrs	r3, r3, #16
 800332c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003338:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800333c:	2000      	movs	r0, #0
 800333e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003340:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003344:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003348:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800334c:	041b      	lsls	r3, r3, #16
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003354:	e7ec      	b.n	8003330 <USB_EPSetStall+0x1a>

08003356 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8003356:	7b0b      	ldrb	r3, [r1, #12]
 8003358:	bb43      	cbnz	r3, 80033ac <USB_EPClearStall+0x56>
  {
    if (ep->is_in != 0U)
 800335a:	784b      	ldrb	r3, [r1, #1]
 800335c:	780a      	ldrb	r2, [r1, #0]
 800335e:	b33b      	cbz	r3, 80033b0 <USB_EPClearStall+0x5a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003360:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003364:	065b      	lsls	r3, r3, #25
 8003366:	d50d      	bpl.n	8003384 <USB_EPClearStall+0x2e>
 8003368:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800336c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003374:	041b      	lsls	r3, r3, #16
 8003376:	0c1b      	lsrs	r3, r3, #16
 8003378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003380:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8003384:	78cb      	ldrb	r3, [r1, #3]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d010      	beq.n	80033ac <USB_EPClearStall+0x56>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800338a:	780a      	ldrb	r2, [r1, #0]
 800338c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8003390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003398:	041b      	lsls	r3, r3, #16
 800339a:	0c1b      	lsrs	r3, r3, #16
 800339c:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80033ac:	2000      	movs	r0, #0
 80033ae:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033b0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033b4:	045b      	lsls	r3, r3, #17
 80033b6:	d50d      	bpl.n	80033d4 <USB_EPClearStall+0x7e>
 80033b8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	0c1b      	lsrs	r3, r3, #16
 80033c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033d0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033d4:	780a      	ldrb	r2, [r1, #0]
 80033d6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80033da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80033ea:	e7d9      	b.n	80033a0 <USB_EPClearStall+0x4a>

080033ec <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80033ec:	b911      	cbnz	r1, 80033f4 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80033ee:	2380      	movs	r3, #128	; 0x80
 80033f0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 80033f4:	2000      	movs	r0, #0
 80033f6:	4770      	bx	lr

080033f8 <USB_DevConnect>:
 80033f8:	2000      	movs	r0, #0
 80033fa:	4770      	bx	lr

080033fc <USB_DevDisconnect>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 80033fc:	2000      	movs	r0, #0
 80033fe:	4770      	bx	lr

08003400 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003400:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8003404:	b280      	uxth	r0, r0
 8003406:	4770      	bx	lr

08003408 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8003408:	2000      	movs	r0, #0
 800340a:	4770      	bx	lr

0800340c <USB_WritePMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800340c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003410:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003412:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003416:	085b      	lsrs	r3, r3, #1
 8003418:	eb02 0383 	add.w	r3, r2, r3, lsl #2

  for (i = n; i != 0U; i--)
 800341c:	429a      	cmp	r2, r3
 800341e:	d100      	bne.n	8003422 <USB_WritePMA+0x16>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8003420:	4770      	bx	lr
 8003422:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal = (uint16_t)temp2;
 8003426:	f822 0b04 	strh.w	r0, [r2], #4
 800342a:	e7f7      	b.n	800341c <USB_WritePMA+0x10>

0800342c <USB_EPStartXfer>:
{
 800342c:	b570      	push	{r4, r5, r6, lr}
 800342e:	460d      	mov	r5, r1
  if (ep->is_in == 1U)
 8003430:	7849      	ldrb	r1, [r1, #1]
{
 8003432:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8003434:	2901      	cmp	r1, #1
 8003436:	69aa      	ldr	r2, [r5, #24]
 8003438:	692b      	ldr	r3, [r5, #16]
 800343a:	7b28      	ldrb	r0, [r5, #12]
 800343c:	d166      	bne.n	800350c <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 800343e:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 8003440:	bf9d      	ittte	ls
 8003442:	2300      	movls	r3, #0
 8003444:	61ab      	strls	r3, [r5, #24]
 8003446:	4613      	movls	r3, r2
      ep->xfer_len -= len;
 8003448:	1ad2      	subhi	r2, r2, r3
 800344a:	bf88      	it	hi
 800344c:	61aa      	strhi	r2, [r5, #24]
 800344e:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0U)
 8003450:	bb08      	cbnz	r0, 8003496 <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003452:	4633      	mov	r3, r6
 8003454:	88ea      	ldrh	r2, [r5, #6]
 8003456:	6969      	ldr	r1, [r5, #20]
 8003458:	4620      	mov	r0, r4
 800345a:	f7ff ffd7 	bl	800340c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800345e:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8003462:	782a      	ldrb	r2, [r5, #0]
 8003464:	b299      	uxth	r1, r3
 8003466:	f204 4304 	addw	r3, r4, #1028	; 0x404
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	440b      	add	r3, r1
 800346e:	52d6      	strh	r6, [r2, r3]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003470:	782a      	ldrb	r2, [r5, #0]
 8003472:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800348e:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 8003492:	2000      	movs	r0, #0
 8003494:	bd70      	pop	{r4, r5, r6, pc}
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003496:	782b      	ldrb	r3, [r5, #0]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003498:	4620      	mov	r0, r4
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800349a:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034a4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80034a8:	b291      	uxth	r1, r2
 80034aa:	bf15      	itete	ne
 80034ac:	f204 420c 	addwne	r2, r4, #1036	; 0x40c
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034b0:	f204 4204 	addweq	r2, r4, #1028	; 0x404
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034b4:	1852      	addne	r2, r2, r1
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034b6:	1852      	addeq	r2, r2, r1
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80034b8:	bf15      	itete	ne
 80034ba:	52d6      	strhne	r6, [r2, r3]
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80034bc:	52d6      	strheq	r6, [r2, r3]
        pmabuffer = ep->pmaaddr1;
 80034be:	896a      	ldrhne	r2, [r5, #10]
        pmabuffer = ep->pmaaddr0;
 80034c0:	892a      	ldrheq	r2, [r5, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034c2:	4633      	mov	r3, r6
 80034c4:	6969      	ldr	r1, [r5, #20]
 80034c6:	f7ff ffa1 	bl	800340c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80034ca:	786b      	ldrb	r3, [r5, #1]
 80034cc:	782a      	ldrb	r2, [r5, #0]
 80034ce:	b973      	cbnz	r3, 80034ee <USB_EPStartXfer+0xc2>
 80034d0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80034d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034dc:	041b      	lsls	r3, r3, #16
 80034de:	0c1b      	lsrs	r3, r3, #16
 80034e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80034e8:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80034ec:	e7c0      	b.n	8003470 <USB_EPStartXfer+0x44>
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d1be      	bne.n	8003470 <USB_EPStartXfer+0x44>
 80034f2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80034f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350a:	e7ed      	b.n	80034e8 <USB_EPStartXfer+0xbc>
    if (ep->xfer_len > ep->maxpacket)
 800350c:	429a      	cmp	r2, r3
      ep->xfer_len = 0U;
 800350e:	bf93      	iteet	ls
 8003510:	2300      	movls	r3, #0
      ep->xfer_len -= len;
 8003512:	1ad2      	subhi	r2, r2, r3
 8003514:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len = 0U;
 8003516:	61ab      	strls	r3, [r5, #24]
 8003518:	bf98      	it	ls
 800351a:	4613      	movls	r3, r2
 800351c:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0U)
 800351e:	b9b0      	cbnz	r0, 800354e <USB_EPStartXfer+0x122>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003520:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	b281      	uxth	r1, r0
 8003528:	f204 400c 	addw	r0, r4, #1036	; 0x40c
 800352c:	4408      	add	r0, r1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d144      	bne.n	80035bc <USB_EPStartXfer+0x190>
 8003532:	5a83      	ldrh	r3, [r0, r2]
 8003534:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	5283      	strh	r3, [r0, r2]
 800353e:	5a83      	ldrh	r3, [r0, r2]
 8003540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003548:	b29b      	uxth	r3, r3
 800354a:	5283      	strh	r3, [r0, r2]
 800354c:	e03f      	b.n	80035ce <USB_EPStartXfer+0x1a2>
 800354e:	b9a1      	cbnz	r1, 800357a <USB_EPStartXfer+0x14e>
 8003550:	f8b4 0050 	ldrh.w	r0, [r4, #80]	; 0x50
 8003554:	0112      	lsls	r2, r2, #4
 8003556:	b281      	uxth	r1, r0
 8003558:	f204 4004 	addw	r0, r4, #1028	; 0x404
 800355c:	4408      	add	r0, r1
 800355e:	b9e3      	cbnz	r3, 800359a <USB_EPStartXfer+0x16e>
 8003560:	5a81      	ldrh	r1, [r0, r2]
 8003562:	f421 41f8 	bic.w	r1, r1, #31744	; 0x7c00
 8003566:	0409      	lsls	r1, r1, #16
 8003568:	0c09      	lsrs	r1, r1, #16
 800356a:	5281      	strh	r1, [r0, r2]
 800356c:	5a81      	ldrh	r1, [r0, r2]
 800356e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8003572:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8003576:	b289      	uxth	r1, r1
 8003578:	5281      	strh	r1, [r0, r2]
 800357a:	7869      	ldrb	r1, [r5, #1]
 800357c:	782a      	ldrb	r2, [r5, #0]
 800357e:	2900      	cmp	r1, #0
 8003580:	d0ce      	beq.n	8003520 <USB_EPStartXfer+0xf4>
 8003582:	2901      	cmp	r1, #1
 8003584:	d123      	bne.n	80035ce <USB_EPStartXfer+0x1a2>
 8003586:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 800358a:	0112      	lsls	r2, r2, #4
 800358c:	b288      	uxth	r0, r1
 800358e:	f204 410c 	addw	r1, r4, #1036	; 0x40c
 8003592:	4401      	add	r1, r0
 8003594:	b29b      	uxth	r3, r3
 8003596:	528b      	strh	r3, [r1, r2]
 8003598:	e019      	b.n	80035ce <USB_EPStartXfer+0x1a2>
 800359a:	2b3e      	cmp	r3, #62	; 0x3e
 800359c:	d805      	bhi.n	80035aa <USB_EPStartXfer+0x17e>
 800359e:	0859      	lsrs	r1, r3, #1
 80035a0:	07de      	lsls	r6, r3, #31
 80035a2:	bf48      	it	mi
 80035a4:	3101      	addmi	r1, #1
 80035a6:	0289      	lsls	r1, r1, #10
 80035a8:	e7e5      	b.n	8003576 <USB_EPStartXfer+0x14a>
 80035aa:	095e      	lsrs	r6, r3, #5
 80035ac:	06d9      	lsls	r1, r3, #27
 80035ae:	4912      	ldr	r1, [pc, #72]	; (80035f8 <USB_EPStartXfer+0x1cc>)
 80035b0:	bf08      	it	eq
 80035b2:	f106 36ff 	addeq.w	r6, r6, #4294967295
 80035b6:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80035ba:	e7dc      	b.n	8003576 <USB_EPStartXfer+0x14a>
 80035bc:	2b3e      	cmp	r3, #62	; 0x3e
 80035be:	d812      	bhi.n	80035e6 <USB_EPStartXfer+0x1ba>
 80035c0:	0859      	lsrs	r1, r3, #1
 80035c2:	07de      	lsls	r6, r3, #31
 80035c4:	bf48      	it	mi
 80035c6:	3101      	addmi	r1, #1
 80035c8:	0289      	lsls	r1, r1, #10
 80035ca:	b289      	uxth	r1, r1
 80035cc:	5281      	strh	r1, [r0, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80035ce:	782a      	ldrb	r2, [r5, #0]
 80035d0:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80035d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80035e4:	e74f      	b.n	8003486 <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80035e6:	0959      	lsrs	r1, r3, #5
 80035e8:	06db      	lsls	r3, r3, #27
 80035ea:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <USB_EPStartXfer+0x1cc>)
 80035ec:	bf08      	it	eq
 80035ee:	f101 31ff 	addeq.w	r1, r1, #4294967295
 80035f2:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 80035f6:	e7a7      	b.n	8003548 <USB_EPStartXfer+0x11c>
 80035f8:	ffff8000 	.word	0xffff8000

080035fc <USB_ReadPMA>:
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80035fc:	eb00 0242 	add.w	r2, r0, r2, lsl #1
{
 8003600:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003602:	f502 6280 	add.w	r2, r2, #1024	; 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003606:	085d      	lsrs	r5, r3, #1
 8003608:	4608      	mov	r0, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800360a:	4617      	mov	r7, r2

  for (i = n; i != 0U; i--)
 800360c:	462e      	mov	r6, r5
 800360e:	3002      	adds	r0, #2
 8003610:	b936      	cbnz	r6, 8003620 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003612:	07db      	lsls	r3, r3, #31
  {
    temp = *pdwVal;
 8003614:	bf44      	itt	mi
 8003616:	f832 3025 	ldrhmi.w	r3, [r2, r5, lsl #2]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800361a:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
 800361e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8003620:	f837 4b04 	ldrh.w	r4, [r7], #4
  for (i = n; i != 0U; i--)
 8003624:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8003626:	b2a4      	uxth	r4, r4
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003628:	f800 4c02 	strb.w	r4, [r0, #-2]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800362c:	0a24      	lsrs	r4, r4, #8
 800362e:	f800 4c01 	strb.w	r4, [r0, #-1]
 8003632:	e7ec      	b.n	800360e <USB_ReadPMA+0x12>

08003634 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003634:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <FATFS_LinkDriverEx+0x40>)
 8003638:	7a5c      	ldrb	r4, [r3, #9]
 800363a:	2c01      	cmp	r4, #1
 800363c:	d818      	bhi.n	8003670 <FATFS_LinkDriverEx+0x3c>
  {
    disk.is_initialized[disk.nbr] = 0;
 800363e:	2400      	movs	r4, #0
 8003640:	7a5d      	ldrb	r5, [r3, #9]
 8003642:	b2ed      	uxtb	r5, r5
 8003644:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 8003646:	7a5d      	ldrb	r5, [r3, #9]
 8003648:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800364c:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 800364e:	7a58      	ldrb	r0, [r3, #9]
 8003650:	4418      	add	r0, r3
 8003652:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8003654:	7a5a      	ldrb	r2, [r3, #9]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	1c50      	adds	r0, r2, #1
 800365a:	b2c0      	uxtb	r0, r0
 800365c:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 800365e:	233a      	movs	r3, #58	; 0x3a
 8003660:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8003662:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8003664:	3230      	adds	r2, #48	; 0x30
 8003666:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8003668:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800366a:	70cc      	strb	r4, [r1, #3]
 800366c:	4620      	mov	r0, r4
 800366e:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003670:	2001      	movs	r0, #1
    ret = 0;
  }
  
  return ret;
}
 8003672:	bd30      	pop	{r4, r5, pc}
 8003674:	200003bc 	.word	0x200003bc

08003678 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003678:	2200      	movs	r2, #0
 800367a:	f7ff bfdb 	b.w	8003634 <FATFS_LinkDriverEx>
	...

08003680 <SD_initialize>:
  * @param  lun : not used 
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
  Stat = STA_NOINIT;
 8003680:	2301      	movs	r3, #1
{
 8003682:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8003684:	4c05      	ldr	r4, [pc, #20]	; (800369c <SD_initialize+0x1c>)
 8003686:	7023      	strb	r3, [r4, #0]
  
  /* Configure the uSD device */
  if(BSP_SD_Init() == MSD_OK)
 8003688:	f7fc fdf2 	bl	8000270 <BSP_SD_Init>
 800368c:	4623      	mov	r3, r4
 800368e:	b918      	cbnz	r0, 8003698 <SD_initialize+0x18>
  {
    Stat &= ~STA_NOINIT;
 8003690:	7822      	ldrb	r2, [r4, #0]
 8003692:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003696:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8003698:	7818      	ldrb	r0, [r3, #0]
}
 800369a:	bd10      	pop	{r4, pc}
 800369c:	2000006c 	.word	0x2000006c

080036a0 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  Stat = STA_NOINIT;
 80036a0:	2301      	movs	r3, #1
{
 80036a2:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 80036a4:	4c05      	ldr	r4, [pc, #20]	; (80036bc <SD_status+0x1c>)
 80036a6:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80036a8:	f7fc fe1c 	bl	80002e4 <BSP_SD_GetCardState>
 80036ac:	4623      	mov	r3, r4
 80036ae:	b918      	cbnz	r0, 80036b8 <SD_status+0x18>
  {
    Stat &= ~STA_NOINIT;
 80036b0:	7822      	ldrb	r2, [r4, #0]
 80036b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b6:	7022      	strb	r2, [r4, #0]
  }
  
  return Stat;
 80036b8:	7818      	ldrb	r0, [r3, #0]
}
 80036ba:	bd10      	pop	{r4, pc}
 80036bc:	2000006c 	.word	0x2000006c

080036c0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4608      	mov	r0, r1
 80036c4:	4611      	mov	r1, r2
 80036c6:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;
  uint32_t timeout = 100000;

  if(BSP_SD_ReadBlocks((uint32_t*)buff, 
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <SD_read+0x28>)
 80036ca:	f7fc fdeb 	bl	80002a4 <BSP_SD_ReadBlocks>
 80036ce:	b140      	cbz	r0, 80036e2 <SD_read+0x22>
  DRESULT res = RES_ERROR;
 80036d0:	2001      	movs	r0, #1
 80036d2:	bd10      	pop	{r4, pc}
                        (uint32_t)(sector), 
                        count, SD_DATATIMEOUT) == MSD_OK)
  {
    while(BSP_SD_GetCardState()!= MSD_OK)
    {
      if (timeout-- == 0)
 80036d4:	3c01      	subs	r4, #1
 80036d6:	d0fb      	beq.n	80036d0 <SD_read+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 80036d8:	f7fc fe04 	bl	80002e4 <BSP_SD_GetCardState>
 80036dc:	2800      	cmp	r0, #0
 80036de:	d1f9      	bne.n	80036d4 <SD_read+0x14>
}
 80036e0:	bd10      	pop	{r4, pc}
 80036e2:	4c02      	ldr	r4, [pc, #8]	; (80036ec <SD_read+0x2c>)
 80036e4:	e7f8      	b.n	80036d8 <SD_read+0x18>
 80036e6:	bf00      	nop
 80036e8:	05f5e100 	.word	0x05f5e100
 80036ec:	000186a1 	.word	0x000186a1

080036f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80036f0:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;
  
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <SD_ioctl+0x48>)
{
 80036f4:	b088      	sub	sp, #32
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80036f6:	781b      	ldrb	r3, [r3, #0]
{
 80036f8:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80036fa:	07db      	lsls	r3, r3, #31
 80036fc:	d41a      	bmi.n	8003734 <SD_ioctl+0x44>
  
  switch (cmd)
 80036fe:	2903      	cmp	r1, #3
 8003700:	d803      	bhi.n	800370a <SD_ioctl+0x1a>
 8003702:	e8df f001 	tbb	[pc, r1]
 8003706:	0510      	.short	0x0510
 8003708:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize;
    res = RES_OK;
    break;
  
  default:
    res = RES_PARERR;
 800370a:	2004      	movs	r0, #4
  }
  
  return res;
}
 800370c:	b008      	add	sp, #32
 800370e:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8003710:	4668      	mov	r0, sp
 8003712:	f7fc fdf1 	bl	80002f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003716:	9b06      	ldr	r3, [sp, #24]
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	e004      	b.n	8003726 <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 800371c:	4668      	mov	r0, sp
 800371e:	f7fc fdeb 	bl	80002f8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8003722:	9b07      	ldr	r3, [sp, #28]
 8003724:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8003726:	2000      	movs	r0, #0
 8003728:	e7f0      	b.n	800370c <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 800372a:	4668      	mov	r0, sp
 800372c:	f7fc fde4 	bl	80002f8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize;
 8003730:	9b07      	ldr	r3, [sp, #28]
 8003732:	e7f1      	b.n	8003718 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8003734:	2003      	movs	r0, #3
 8003736:	e7e9      	b.n	800370c <SD_ioctl+0x1c>
 8003738:	2000006c 	.word	0x2000006c

0800373c <SD_write>:
{
 800373c:	b510      	push	{r4, lr}
 800373e:	4608      	mov	r0, r1
 8003740:	4611      	mov	r1, r2
 8003742:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff, 
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <SD_write+0x28>)
 8003746:	f7fc fdbd 	bl	80002c4 <BSP_SD_WriteBlocks>
 800374a:	b140      	cbz	r0, 800375e <SD_write+0x22>
  DRESULT res = RES_ERROR;
 800374c:	2001      	movs	r0, #1
 800374e:	bd10      	pop	{r4, pc}
      if (timeout-- == 0)
 8003750:	3c01      	subs	r4, #1
 8003752:	d0fb      	beq.n	800374c <SD_write+0x10>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003754:	f7fc fdc6 	bl	80002e4 <BSP_SD_GetCardState>
 8003758:	2800      	cmp	r0, #0
 800375a:	d1f9      	bne.n	8003750 <SD_write+0x14>
}
 800375c:	bd10      	pop	{r4, pc}
 800375e:	4c02      	ldr	r4, [pc, #8]	; (8003768 <SD_write+0x2c>)
 8003760:	e7f8      	b.n	8003754 <SD_write+0x18>
 8003762:	bf00      	nop
 8003764:	05f5e100 	.word	0x05f5e100
 8003768:	000186a1 	.word	0x000186a1

0800376c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800376c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8003770:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003772:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003776:	b15b      	cbz	r3, 8003790 <USBD_CDC_EP0_RxReady+0x24>
 8003778:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800377c:	28ff      	cmp	r0, #255	; 0xff
 800377e:	d007      	beq.n	8003790 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8003786:	4621      	mov	r1, r4
 8003788:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800378a:	23ff      	movs	r3, #255	; 0xff
 800378c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }
  return USBD_OK;
}
 8003790:	2000      	movs	r0, #0
 8003792:	bd10      	pop	{r4, pc}

08003794 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003794:	2343      	movs	r3, #67	; 0x43
 8003796:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8003798:	4800      	ldr	r0, [pc, #0]	; (800379c <USBD_CDC_GetFSCfgDesc+0x8>)
 800379a:	4770      	bx	lr
 800379c:	200000a8 	.word	0x200000a8

080037a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80037a0:	2343      	movs	r3, #67	; 0x43
 80037a2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80037a4:	4800      	ldr	r0, [pc, #0]	; (80037a8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80037a6:	4770      	bx	lr
 80037a8:	200000ec 	.word	0x200000ec

080037ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80037ac:	2343      	movs	r3, #67	; 0x43
 80037ae:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80037b0:	4800      	ldr	r0, [pc, #0]	; (80037b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80037b2:	4770      	bx	lr
 80037b4:	2000013c 	.word	0x2000013c

080037b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80037b8:	230a      	movs	r3, #10
 80037ba:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80037bc:	4800      	ldr	r0, [pc, #0]	; (80037c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80037be:	4770      	bx	lr
 80037c0:	20000130 	.word	0x20000130

080037c4 <USBD_CDC_DataOut>:
{
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80037c8:	f8d0 42b8 	ldr.w	r4, [r0, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80037cc:	f7fd f8fc 	bl	80009c8 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 80037d0:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80037d4:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if (pdev->pClassData != NULL)
 80037d8:	b14b      	cbz	r3, 80037ee <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80037da:	f8d5 32bc 	ldr.w	r3, [r5, #700]	; 0x2bc
 80037de:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80037e8:	4798      	blx	r3
    return USBD_OK;
 80037ea:	2000      	movs	r0, #0
 80037ec:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80037ee:	2002      	movs	r0, #2
}
 80037f0:	bd38      	pop	{r3, r4, r5, pc}

080037f2 <USBD_CDC_DataIn>:
{
 80037f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80037f4:	f8d0 62b8 	ldr.w	r6, [r0, #696]	; 0x2b8
  if (pdev->pClassData != NULL)
 80037f8:	b1ce      	cbz	r6, 800382e <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80037fa:	2314      	movs	r3, #20
 80037fc:	fb03 0301 	mla	r3, r3, r1, r0
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	b182      	cbz	r2, 8003826 <USBD_CDC_DataIn+0x34>
 8003804:	f8d0 42c0 	ldr.w	r4, [r0, #704]	; 0x2c0
 8003808:	eb04 1441 	add.w	r4, r4, r1, lsl #5
 800380c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800380e:	fbb2 f4f5 	udiv	r4, r2, r5
 8003812:	fb05 2414 	mls	r4, r5, r4, r2
 8003816:	b934      	cbnz	r4, 8003826 <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8003818:	61dc      	str	r4, [r3, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800381a:	4622      	mov	r2, r4
 800381c:	4623      	mov	r3, r4
 800381e:	f7fd f8b7 	bl	8000990 <USBD_LL_Transmit>
    return USBD_OK;
 8003822:	4620      	mov	r0, r4
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8003826:	2000      	movs	r0, #0
 8003828:	f8c6 0214 	str.w	r0, [r6, #532]	; 0x214
 800382c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBD_FAIL;
 800382e:	2002      	movs	r0, #2
}
 8003830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003832 <USBD_CDC_Setup>:
{
 8003832:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t ifalt = 0U;
 8003836:	f04f 0800 	mov.w	r8, #0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800383a:	780a      	ldrb	r2, [r1, #0]
{
 800383c:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800383e:	f012 0460 	ands.w	r4, r2, #96	; 0x60
{
 8003842:	460e      	mov	r6, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003844:	f8d0 72b8 	ldr.w	r7, [r0, #696]	; 0x2b8
  uint8_t ifalt = 0U;
 8003848:	f88d 8005 	strb.w	r8, [sp, #5]
  uint16_t status_info = 0U;
 800384c:	f8ad 8006 	strh.w	r8, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003850:	d028      	beq.n	80038a4 <USBD_CDC_Setup+0x72>
 8003852:	2c20      	cmp	r4, #32
 8003854:	d147      	bne.n	80038e6 <USBD_CDC_Setup+0xb4>
      if (req->wLength)
 8003856:	88cc      	ldrh	r4, [r1, #6]
 8003858:	784b      	ldrb	r3, [r1, #1]
 800385a:	b1e4      	cbz	r4, 8003896 <USBD_CDC_Setup+0x64>
        if (req->bmRequest & 0x80U)
 800385c:	0612      	lsls	r2, r2, #24
 800385e:	d511      	bpl.n	8003884 <USBD_CDC_Setup+0x52>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003860:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 8003864:	4639      	mov	r1, r7
 8003866:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	4622      	mov	r2, r4
 800386e:	47c8      	blx	r9
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003870:	88f2      	ldrh	r2, [r6, #6]
 8003872:	4639      	mov	r1, r7
 8003874:	4628      	mov	r0, r5
 8003876:	f000 fc2e 	bl	80040d6 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800387a:	4644      	mov	r4, r8
}
 800387c:	4620      	mov	r0, r4
 800387e:	b003      	add	sp, #12
 8003880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hcdc->CmdOpCode = req->bRequest;
 8003884:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003888:	f887 4201 	strb.w	r4, [r7, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800388c:	4622      	mov	r2, r4
 800388e:	4639      	mov	r1, r7
 8003890:	f000 fc36 	bl	8004100 <USBD_CtlPrepareRx>
 8003894:	e7f1      	b.n	800387a <USBD_CDC_Setup+0x48>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003896:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 800389a:	4618      	mov	r0, r3
 800389c:	6895      	ldr	r5, [r2, #8]
 800389e:	4622      	mov	r2, r4
 80038a0:	47a8      	blx	r5
 80038a2:	e7eb      	b.n	800387c <USBD_CDC_Setup+0x4a>
      switch (req->bRequest)
 80038a4:	784f      	ldrb	r7, [r1, #1]
 80038a6:	2f0a      	cmp	r7, #10
 80038a8:	d00d      	beq.n	80038c6 <USBD_CDC_Setup+0x94>
 80038aa:	2f0b      	cmp	r7, #11
 80038ac:	d015      	beq.n	80038da <USBD_CDC_Setup+0xa8>
 80038ae:	b9d7      	cbnz	r7, 80038e6 <USBD_CDC_Setup+0xb4>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80038b0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80038b4:	2b03      	cmp	r3, #3
 80038b6:	d114      	bne.n	80038e2 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80038b8:	2202      	movs	r2, #2
 80038ba:	f10d 0106 	add.w	r1, sp, #6
 80038be:	f000 fc0a 	bl	80040d6 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80038c2:	463c      	mov	r4, r7
 80038c4:	e7da      	b.n	800387c <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80038c6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d109      	bne.n	80038e2 <USBD_CDC_Setup+0xb0>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80038ce:	2201      	movs	r2, #1
 80038d0:	f10d 0105 	add.w	r1, sp, #5
 80038d4:	f000 fbff 	bl	80040d6 <USBD_CtlSendData>
 80038d8:	e7d0      	b.n	800387c <USBD_CDC_Setup+0x4a>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80038da:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d0cc      	beq.n	800387c <USBD_CDC_Setup+0x4a>
            USBD_CtlError(pdev, req);
 80038e2:	4631      	mov	r1, r6
 80038e4:	4628      	mov	r0, r5
      USBD_CtlError(pdev, req);
 80038e6:	f000 fbcf 	bl	8004088 <USBD_CtlError>
      ret = USBD_FAIL;
 80038ea:	2402      	movs	r4, #2
      break;
 80038ec:	e7c6      	b.n	800387c <USBD_CDC_Setup+0x4a>

080038ee <USBD_CDC_DeInit>:
{
 80038ee:	b538      	push	{r3, r4, r5, lr}
 80038f0:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80038f2:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80038f4:	2181      	movs	r1, #129	; 0x81
 80038f6:	f7fd f803 	bl	8000900 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80038fa:	2101      	movs	r1, #1
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80038fc:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80038fe:	4620      	mov	r0, r4
 8003900:	f7fc fffe 	bl	8000900 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003904:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003908:	2182      	movs	r1, #130	; 0x82
 800390a:	4620      	mov	r0, r4
 800390c:	f7fc fff8 	bl	8000900 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8003910:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003914:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8003916:	b14b      	cbz	r3, 800392c <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003918:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003920:	f8d4 02b8 	ldr.w	r0, [r4, #696]	; 0x2b8
 8003924:	f7fd f858 	bl	80009d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8003928:	f8c4 52b8 	str.w	r5, [r4, #696]	; 0x2b8
}
 800392c:	2000      	movs	r0, #0
 800392e:	bd38      	pop	{r3, r4, r5, pc}

08003930 <USBD_CDC_Init>:
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003930:	7c03      	ldrb	r3, [r0, #16]
{
 8003932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003936:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003938:	bbcb      	cbnz	r3, 80039ae <USBD_CDC_Init+0x7e>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800393a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800393e:	2202      	movs	r2, #2
 8003940:	2181      	movs	r1, #129	; 0x81
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003942:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003944:	f7fc ffcc 	bl	80008e0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003948:	f44f 7300 	mov.w	r3, #512	; 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800394c:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800394e:	4629      	mov	r1, r5
 8003950:	2202      	movs	r2, #2
 8003952:	4620      	mov	r0, r4
 8003954:	f7fc ffc4 	bl	80008e0 <USBD_LL_OpenEP>
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003958:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800395c:	2501      	movs	r5, #1
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800395e:	2308      	movs	r3, #8
 8003960:	2203      	movs	r2, #3
 8003962:	2182      	movs	r1, #130	; 0x82
 8003964:	4620      	mov	r0, r4
 8003966:	f7fc ffbb 	bl	80008e0 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800396a:	6425      	str	r5, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800396c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003970:	f7fd f82e 	bl	80009d0 <USBD_static_malloc>
 8003974:	4606      	mov	r6, r0
 8003976:	f8c4 02b8 	str.w	r0, [r4, #696]	; 0x2b8
  if (pdev->pClassData == NULL)
 800397a:	b358      	cbz	r0, 80039d4 <USBD_CDC_Init+0xa4>
    hcdc->TxState = 0U;
 800397c:	2700      	movs	r7, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800397e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4798      	blx	r3
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003986:	f894 8010 	ldrb.w	r8, [r4, #16]
    hcdc->TxState = 0U;
 800398a:	f8c6 7214 	str.w	r7, [r6, #532]	; 0x214
    hcdc->RxState = 0U;
 800398e:	f8c6 7218 	str.w	r7, [r6, #536]	; 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003992:	f1b8 0f00 	cmp.w	r8, #0
 8003996:	d113      	bne.n	80039c0 <USBD_CDC_Init+0x90>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800399c:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80039a0:	4629      	mov	r1, r5
 80039a2:	4620      	mov	r0, r4
 80039a4:	f7fd f802 	bl	80009ac <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80039a8:	4640      	mov	r0, r8
 80039aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80039ae:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80039b0:	2340      	movs	r3, #64	; 0x40
 80039b2:	2202      	movs	r2, #2
 80039b4:	2181      	movs	r1, #129	; 0x81
 80039b6:	f7fc ff93 	bl	80008e0 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80039ba:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80039bc:	2340      	movs	r3, #64	; 0x40
 80039be:	e7c6      	b.n	800394e <USBD_CDC_Init+0x1e>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80039c0:	2340      	movs	r3, #64	; 0x40
 80039c2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 80039c6:	4629      	mov	r1, r5
 80039c8:	4620      	mov	r0, r4
 80039ca:	f7fc ffef 	bl	80009ac <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 80039ce:	4638      	mov	r0, r7
 80039d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = 1U;
 80039d4:	4628      	mov	r0, r5
}
 80039d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039da <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 80039da:	b119      	cbz	r1, 80039e4 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 80039dc:	f8c0 12bc 	str.w	r1, [r0, #700]	; 0x2bc
    ret = USBD_OK;
 80039e0:	2000      	movs	r0, #0
 80039e2:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80039e4:	2002      	movs	r0, #2
  }

  return ret;
}
 80039e6:	4770      	bx	lr

080039e8 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80039e8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 80039ec:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 80039ee:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80039f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 80039f6:	4770      	bx	lr

080039f8 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80039f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8

  return USBD_OK;
}
 80039fc:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80039fe:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8003a02:	4770      	bx	lr

08003a04 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003a04:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8003a08:	b510      	push	{r4, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8003a0a:	b162      	cbz	r2, 8003a26 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003a0c:	7c04      	ldrb	r4, [r0, #16]
 8003a0e:	b944      	cbnz	r4, 8003a22 <USBD_CDC_ReceivePacket+0x1e>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003a10:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8003a14:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003a18:	2101      	movs	r1, #1
 8003a1a:	f7fc ffc7 	bl	80009ac <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8003a1e:	2000      	movs	r0, #0
 8003a20:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8003a22:	2340      	movs	r3, #64	; 0x40
 8003a24:	e7f6      	b.n	8003a14 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8003a26:	2002      	movs	r0, #2
  }
}
 8003a28:	bd10      	pop	{r4, pc}

08003a2a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003a2a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8003a2c:	b180      	cbz	r0, 8003a50 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8003a2e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a32:	b113      	cbz	r3, 8003a3a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c0 32b4 	str.w	r3, [r0, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8003a3a:	b109      	cbz	r1, 8003a40 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003a3c:	f8c0 12b0 	str.w	r1, [r0, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a40:	2301      	movs	r3, #1
  pdev->id = id;
 8003a42:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a44:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003a48:	f7fc fefc 	bl	8000844 <USBD_LL_Init>

  return USBD_OK;
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8003a50:	2002      	movs	r0, #2
}
 8003a52:	bd08      	pop	{r3, pc}

08003a54 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8003a54:	b119      	cbz	r1, 8003a5e <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003a56:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
    status = USBD_OK;
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003a5e:	2002      	movs	r0, #2
  }

  return status;
}
 8003a60:	4770      	bx	lr

08003a62 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003a62:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003a64:	f7fc ff2e 	bl	80008c4 <USBD_LL_Start>

  return USBD_OK;
}
 8003a68:	2000      	movs	r0, #0
 8003a6a:	bd08      	pop	{r3, pc}

08003a6c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003a6c:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8003a6e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a72:	b90b      	cbnz	r3, 8003a78 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003a74:	2002      	movs	r0, #2
 8003a76:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4798      	blx	r3
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d1f9      	bne.n	8003a74 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8003a80:	bd08      	pop	{r3, pc}

08003a82 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003a82:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003a84:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4798      	blx	r3

  return USBD_OK;
}
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	bd08      	pop	{r3, pc}

08003a90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003a90:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003a92:	f500 752a 	add.w	r5, r0, #680	; 0x2a8
{
 8003a96:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 fae1 	bl	8004060 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003a9e:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8003aa0:	f894 12a8 	ldrb.w	r1, [r4, #680]	; 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8003aa4:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8003aa8:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	; 0x2ae
 8003aac:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8003ab0:	f001 031f 	and.w	r3, r1, #31
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d00e      	beq.n	8003ad6 <USBD_LL_SetupStage+0x46>
 8003ab8:	d307      	bcc.n	8003aca <USBD_LL_SetupStage+0x3a>
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d010      	beq.n	8003ae0 <USBD_LL_SetupStage+0x50>
    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003abe:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f7fc ff2a 	bl	800091c <USBD_LL_StallEP>
      break;
 8003ac8:	e003      	b.n	8003ad2 <USBD_LL_SetupStage+0x42>
      USBD_StdDevReq(pdev, &pdev->request);
 8003aca:	4629      	mov	r1, r5
 8003acc:	4620      	mov	r0, r4
 8003ace:	f000 f8f5 	bl	8003cbc <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8003ad6:	4629      	mov	r1, r5
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f000 fa13 	bl	8003f04 <USBD_StdItfReq>
      break;
 8003ade:	e7f8      	b.n	8003ad2 <USBD_LL_SetupStage+0x42>
      USBD_StdEPReq(pdev, &pdev->request);
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f000 fa33 	bl	8003f4e <USBD_StdEPReq>
      break;
 8003ae8:	e7f3      	b.n	8003ad2 <USBD_LL_SetupStage+0x42>

08003aea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003aea:	b570      	push	{r4, r5, r6, lr}
 8003aec:	4605      	mov	r5, r0
 8003aee:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003af0:	bb49      	cbnz	r1, 8003b46 <USBD_LL_DataOutStage+0x5c>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003af2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d11e      	bne.n	8003b38 <USBD_LL_DataOutStage+0x4e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003afa:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160
 8003afe:	f8d0 2164 	ldr.w	r2, [r0, #356]	; 0x164
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d90b      	bls.n	8003b1e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -= pep->maxpacket;
 8003b06:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx(pdev, pdata,
 8003b08:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 8003b0a:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8003b0e:	bf8c      	ite	hi
 8003b10:	b29a      	uxthhi	r2, r3
 8003b12:	b292      	uxthls	r2, r2
 8003b14:	4631      	mov	r1, r6
 8003b16:	f000 fb02 	bl	800411e <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003b1a:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003b1e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	b123      	cbz	r3, 8003b30 <USBD_LL_DataOutStage+0x46>
 8003b26:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003b2a:	2a03      	cmp	r2, #3
 8003b2c:	d100      	bne.n	8003b30 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 8003b2e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 fafc 	bl	800412e <USBD_CtlSendStatus>
 8003b36:	e7f0      	b.n	8003b1a <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d1ee      	bne.n	8003b1a <USBD_LL_DataOutStage+0x30>
        pdev->ep0_state = USBD_EP0_IDLE;
 8003b3c:	f8c5 1294 	str.w	r1, [r5, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003b40:	f7fc feec 	bl	800091c <USBD_LL_StallEP>
 8003b44:	e7e9      	b.n	8003b1a <USBD_LL_DataOutStage+0x30>
  else if ((pdev->pClass->DataOut != NULL) &&
 8003b46:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	b12b      	cbz	r3, 8003b5a <USBD_LL_DataOutStage+0x70>
 8003b4e:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003b52:	2a03      	cmp	r2, #3
 8003b54:	d101      	bne.n	8003b5a <USBD_LL_DataOutStage+0x70>
    pdev->pClass->DataOut(pdev, epnum);
 8003b56:	4798      	blx	r3
 8003b58:	e7df      	b.n	8003b1a <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 8003b5a:	2002      	movs	r0, #2
}
 8003b5c:	bd70      	pop	{r4, r5, r6, pc}

08003b5e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003b5e:	b570      	push	{r4, r5, r6, lr}
 8003b60:	4613      	mov	r3, r2
 8003b62:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003b64:	460e      	mov	r6, r1
 8003b66:	2900      	cmp	r1, #0
 8003b68:	d147      	bne.n	8003bfa <USBD_LL_DataInStage+0x9c>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003b6a:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8003b6e:	2a02      	cmp	r2, #2
 8003b70:	d13c      	bne.n	8003bec <USBD_LL_DataInStage+0x8e>
    {
      if (pep->rem_length > pep->maxpacket)
 8003b72:	6a05      	ldr	r5, [r0, #32]
 8003b74:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003b76:	4295      	cmp	r5, r2
 8003b78:	d913      	bls.n	8003ba2 <USBD_LL_DataInStage+0x44>
      {
        pep->rem_length -= pep->maxpacket;
 8003b7a:	1aaa      	subs	r2, r5, r2
 8003b7c:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003b7e:	4619      	mov	r1, r3
 8003b80:	b292      	uxth	r2, r2
 8003b82:	f000 fab5 	bl	80040f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003b86:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f7fc ff0d 	bl	80009ac <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003b92:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8003b96:	2000      	movs	r0, #0
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d13a      	bne.n	8003c12 <USBD_LL_DataInStage+0xb4>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8003b9c:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
 8003ba0:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003ba2:	69c3      	ldr	r3, [r0, #28]
 8003ba4:	fbb3 f5f2 	udiv	r5, r3, r2
 8003ba8:	fb02 3515 	mls	r5, r2, r5, r3
 8003bac:	b965      	cbnz	r5, 8003bc8 <USBD_LL_DataInStage+0x6a>
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d80a      	bhi.n	8003bc8 <USBD_LL_DataInStage+0x6a>
            (pep->total_length >= pep->maxpacket) &&
 8003bb2:	f8d0 2298 	ldr.w	r2, [r0, #664]	; 0x298
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d206      	bcs.n	8003bc8 <USBD_LL_DataInStage+0x6a>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003bba:	462a      	mov	r2, r5
 8003bbc:	f000 fa98 	bl	80040f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003bc0:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003bc4:	462b      	mov	r3, r5
 8003bc6:	e7df      	b.n	8003b88 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003bc8:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	b12b      	cbz	r3, 8003bdc <USBD_LL_DataInStage+0x7e>
 8003bd0:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8003bd4:	2a03      	cmp	r2, #3
 8003bd6:	d101      	bne.n	8003bdc <USBD_LL_DataInStage+0x7e>
            pdev->pClass->EP0_TxSent(pdev);
 8003bd8:	4620      	mov	r0, r4
 8003bda:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8003bdc:	2180      	movs	r1, #128	; 0x80
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7fc fe9c 	bl	800091c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003be4:	4620      	mov	r0, r4
 8003be6:	f000 faad 	bl	8004144 <USBD_CtlReceiveStatus>
 8003bea:	e7d2      	b.n	8003b92 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003bec:	f032 0304 	bics.w	r3, r2, #4
 8003bf0:	d1cf      	bne.n	8003b92 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8003bf2:	2180      	movs	r1, #128	; 0x80
 8003bf4:	f7fc fe92 	bl	800091c <USBD_LL_StallEP>
 8003bf8:	e7cb      	b.n	8003b92 <USBD_LL_DataInStage+0x34>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003bfa:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	b133      	cbz	r3, 8003c10 <USBD_LL_DataInStage+0xb2>
 8003c02:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c06:	2a03      	cmp	r2, #3
 8003c08:	d102      	bne.n	8003c10 <USBD_LL_DataInStage+0xb2>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003c0a:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8003c0c:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 8003c0e:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 8003c10:	2002      	movs	r0, #2
}
 8003c12:	bd70      	pop	{r4, r5, r6, pc}

08003c14 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003c14:	2200      	movs	r2, #0
{
 8003c16:	b570      	push	{r4, r5, r6, lr}
 8003c18:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003c1a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003c1c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003c1e:	4611      	mov	r1, r2
 8003c20:	2340      	movs	r3, #64	; 0x40
 8003c22:	f7fc fe5d 	bl	80008e0 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003c26:	4633      	mov	r3, r6
 8003c28:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003c2a:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003c2e:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003c32:	2200      	movs	r2, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fc fe53 	bl	80008e0 <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8003c3a:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8003c3c:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003c40:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003c42:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003c44:	f884 529c 	strb.w	r5, [r4, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003c48:	f8c4 1294 	str.w	r1, [r4, #660]	; 0x294
  pdev->dev_config = 0U;
 8003c4c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8003c4e:	f8c4 12a4 	str.w	r1, [r4, #676]	; 0x2a4
  if (pdev->pClassData)
 8003c52:	b123      	cbz	r3, 8003c5e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003c54:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003c58:	4620      	mov	r0, r4
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4798      	blx	r3
  }

  return USBD_OK;
}
 8003c5e:	2000      	movs	r0, #0
 8003c60:	bd70      	pop	{r4, r5, r6, pc}

08003c62 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003c62:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8003c64:	2000      	movs	r0, #0
 8003c66:	4770      	bx	lr

08003c68 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8003c68:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c6c:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003c70:	2304      	movs	r3, #4
 8003c72:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 8003c76:	2000      	movs	r0, #0
 8003c78:	4770      	bx	lr

08003c7a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003c7a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003c7e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8003c80:	bf04      	itt	eq
 8003c82:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8003c86:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	4770      	bx	lr

08003c8e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003c8e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003c90:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003c94:	2a03      	cmp	r2, #3
 8003c96:	d104      	bne.n	8003ca2 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8003c98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	b103      	cbz	r3, 8003ca2 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003ca0:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	bd08      	pop	{r3, pc}

08003ca6 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8003ca6:	b510      	push	{r4, lr}
 8003ca8:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8003caa:	2180      	movs	r1, #128	; 0x80
 8003cac:	f7fc fe36 	bl	800091c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8003cb0:	4620      	mov	r0, r4
}
 8003cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f7fc be30 	b.w	800091c <USBD_LL_StallEP>

08003cbc <USBD_StdDevReq>:
{
 8003cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cbe:	780b      	ldrb	r3, [r1, #0]
{
 8003cc0:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003cc6:	2b20      	cmp	r3, #32
{
 8003cc8:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cca:	d012      	beq.n	8003cf2 <USBD_StdDevReq+0x36>
 8003ccc:	2b40      	cmp	r3, #64	; 0x40
 8003cce:	d010      	beq.n	8003cf2 <USBD_StdDevReq+0x36>
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d15c      	bne.n	8003d8e <USBD_StdDevReq+0xd2>
      switch (req->bRequest)
 8003cd4:	784b      	ldrb	r3, [r1, #1]
 8003cd6:	2b09      	cmp	r3, #9
 8003cd8:	d858      	bhi.n	8003d8c <USBD_StdDevReq+0xd0>
 8003cda:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003cde:	00e9      	.short	0x00e9
 8003ce0:	00570105 	.word	0x00570105
 8003ce4:	005700fe 	.word	0x005700fe
 8003ce8:	00130084 	.word	0x00130084
 8003cec:	00d20057 	.word	0x00d20057
 8003cf0:	00a0      	.short	0x00a0
      pdev->pClass->Setup(pdev, req);
 8003cf2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	4798      	blx	r3
}
 8003cfe:	2000      	movs	r0, #0
 8003d00:	b003      	add	sp, #12
 8003d02:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8003d0a:	884b      	ldrh	r3, [r1, #2]
 8003d0c:	0a1a      	lsrs	r2, r3, #8
 8003d0e:	3a01      	subs	r2, #1
 8003d10:	2a06      	cmp	r2, #6
 8003d12:	d83b      	bhi.n	8003d8c <USBD_StdDevReq+0xd0>
 8003d14:	e8df f002 	tbb	[pc, r2]
 8003d18:	3a2d2004 	.word	0x3a2d2004
 8003d1c:	523a      	.short	0x523a
 8003d1e:	5c          	.byte	0x5c
 8003d1f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003d20:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003d24:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003d26:	f10d 0106 	add.w	r1, sp, #6
 8003d2a:	7c20      	ldrb	r0, [r4, #16]
 8003d2c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8003d2e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8003d32:	b152      	cbz	r2, 8003d4a <USBD_StdDevReq+0x8e>
 8003d34:	88eb      	ldrh	r3, [r5, #6]
 8003d36:	b143      	cbz	r3, 8003d4a <USBD_StdDevReq+0x8e>
      len = MIN(len, req->wLength);
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	bf28      	it	cs
 8003d3c:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003d3e:	4601      	mov	r1, r0
 8003d40:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8003d42:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8003d46:	f000 f9c6 	bl	80040d6 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8003d4a:	88eb      	ldrh	r3, [r5, #6]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1d6      	bne.n	8003cfe <USBD_StdDevReq+0x42>
        USBD_CtlSendStatus(pdev);
 8003d50:	4620      	mov	r0, r4
 8003d52:	f000 f9ec 	bl	800412e <USBD_CtlSendStatus>
 8003d56:	e7d2      	b.n	8003cfe <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d58:	7c02      	ldrb	r2, [r0, #16]
 8003d5a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003d5e:	b932      	cbnz	r2, 8003d6e <USBD_StdDevReq+0xb2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003d62:	f10d 0006 	add.w	r0, sp, #6
 8003d66:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003d68:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003d6a:	7043      	strb	r3, [r0, #1]
 8003d6c:	e7df      	b.n	8003d2e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8003d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d70:	e7f7      	b.n	8003d62 <USBD_StdDevReq+0xa6>
      switch ((uint8_t)(req->wValue))
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d809      	bhi.n	8003d8c <USBD_StdDevReq+0xd0>
 8003d78:	e8df f003 	tbb	[pc, r3]
 8003d7c:	14100c03 	.word	0x14100c03
 8003d80:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8003d82:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003d86:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1cc      	bne.n	8003d26 <USBD_StdDevReq+0x6a>
          USBD_CtlError(pdev, req);
 8003d8c:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8003d8e:	f7ff ff8a 	bl	8003ca6 <USBD_CtlError.constprop.1>
  return ret;
 8003d92:	e7b4      	b.n	8003cfe <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8003d94:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	e7f5      	b.n	8003d88 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8003d9c:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	e7f1      	b.n	8003d88 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8003da4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	e7ed      	b.n	8003d88 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8003dac:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	e7e9      	b.n	8003d88 <USBD_StdDevReq+0xcc>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8003db4:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	e7e5      	b.n	8003d88 <USBD_StdDevReq+0xcc>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003dbc:	7c03      	ldrb	r3, [r0, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e4      	bne.n	8003d8c <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003dc2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003dc6:	f10d 0006 	add.w	r0, sp, #6
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	4798      	blx	r3
 8003dce:	e7ae      	b.n	8003d2e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003dd0:	7c03      	ldrb	r3, [r0, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1da      	bne.n	8003d8c <USBD_StdDevReq+0xd0>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003dd6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8003dda:	f10d 0006 	add.w	r0, sp, #6
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003de2:	2307      	movs	r3, #7
 8003de4:	e7c1      	b.n	8003d6a <USBD_StdDevReq+0xae>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8003de6:	888b      	ldrh	r3, [r1, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1cf      	bne.n	8003d8c <USBD_StdDevReq+0xd0>
 8003dec:	88cb      	ldrh	r3, [r1, #6]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1cc      	bne.n	8003d8c <USBD_StdDevReq+0xd0>
 8003df2:	884d      	ldrh	r5, [r1, #2]
 8003df4:	2d7f      	cmp	r5, #127	; 0x7f
 8003df6:	d8c9      	bhi.n	8003d8c <USBD_StdDevReq+0xd0>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003df8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8003dfc:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d0c4      	beq.n	8003d8c <USBD_StdDevReq+0xd0>
      pdev->dev_address = dev_addr;
 8003e02:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8003e06:	f7fc fdb5 	bl	8000974 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	f000 f98f 	bl	800412e <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8003e10:	b11d      	cbz	r5, 8003e1a <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003e12:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8003e14:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8003e18:	e771      	b.n	8003cfe <USBD_StdDevReq+0x42>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e7fa      	b.n	8003e14 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 8003e1e:	7889      	ldrb	r1, [r1, #2]
 8003e20:	4d37      	ldr	r5, [pc, #220]	; (8003f00 <USBD_StdDevReq+0x244>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003e22:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8003e24:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8003e26:	d8b1      	bhi.n	8003d8c <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003e28:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d008      	beq.n	8003e42 <USBD_StdDevReq+0x186>
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d014      	beq.n	8003e5e <USBD_StdDevReq+0x1a2>
        USBD_CtlError(pdev, req);
 8003e34:	f7ff ff37 	bl	8003ca6 <USBD_CtlError.constprop.1>
        USBD_ClrClassConfig(pdev, cfgidx);
 8003e38:	7829      	ldrb	r1, [r5, #0]
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f7ff fe21 	bl	8003a82 <USBD_ClrClassConfig>
 8003e40:	e75d      	b.n	8003cfe <USBD_StdDevReq+0x42>
        if (cfgidx)
 8003e42:	2900      	cmp	r1, #0
 8003e44:	d084      	beq.n	8003d50 <USBD_StdDevReq+0x94>
          pdev->dev_config = cfgidx;
 8003e46:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003e48:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8003e4a:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8003e4c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8003e50:	4620      	mov	r0, r4
 8003e52:	f7ff fe0b 	bl	8003a6c <USBD_SetClassConfig>
 8003e56:	2802      	cmp	r0, #2
 8003e58:	f47f af7a 	bne.w	8003d50 <USBD_StdDevReq+0x94>
 8003e5c:	e796      	b.n	8003d8c <USBD_StdDevReq+0xd0>
        if (cfgidx == 0U)
 8003e5e:	b931      	cbnz	r1, 8003e6e <USBD_StdDevReq+0x1b2>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003e60:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8003e62:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8003e64:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8003e68:	f7ff fe0b 	bl	8003a82 <USBD_ClrClassConfig>
 8003e6c:	e770      	b.n	8003d50 <USBD_StdDevReq+0x94>
        else if (cfgidx != pdev->dev_config)
 8003e6e:	6841      	ldr	r1, [r0, #4]
 8003e70:	2901      	cmp	r1, #1
 8003e72:	f43f af6d 	beq.w	8003d50 <USBD_StdDevReq+0x94>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8003e76:	b2c9      	uxtb	r1, r1
 8003e78:	f7ff fe03 	bl	8003a82 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8003e7c:	7829      	ldrb	r1, [r5, #0]
 8003e7e:	6061      	str	r1, [r4, #4]
 8003e80:	e7e6      	b.n	8003e50 <USBD_StdDevReq+0x194>
  if (req->wLength != 1U)
 8003e82:	88ca      	ldrh	r2, [r1, #6]
 8003e84:	2a01      	cmp	r2, #1
 8003e86:	d181      	bne.n	8003d8c <USBD_StdDevReq+0xd0>
    switch (pdev->dev_state)
 8003e88:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f43f af7d 	beq.w	8003d8c <USBD_StdDevReq+0xd0>
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d904      	bls.n	8003ea0 <USBD_StdDevReq+0x1e4>
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	f47f af78 	bne.w	8003d8c <USBD_StdDevReq+0xd0>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8003e9c:	1d01      	adds	r1, r0, #4
 8003e9e:	e003      	b.n	8003ea8 <USBD_StdDevReq+0x1ec>
        pdev->dev_default_config = 0U;
 8003ea0:	4601      	mov	r1, r0
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f000 f914 	bl	80040d6 <USBD_CtlSendData>
 8003eae:	e726      	b.n	8003cfe <USBD_StdDevReq+0x42>
  switch (pdev->dev_state)
 8003eb0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	f63f af68 	bhi.w	8003d8c <USBD_StdDevReq+0xd0>
      if (req->wLength != 0x2U)
 8003ebc:	88cb      	ldrh	r3, [r1, #6]
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f47f af64 	bne.w	8003d8c <USBD_StdDevReq+0xd0>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup)
 8003ec8:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 8003ecc:	b10b      	cbz	r3, 8003ed2 <USBD_StdDevReq+0x216>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	60c3      	str	r3, [r0, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f104 010c 	add.w	r1, r4, #12
 8003ed8:	e7e6      	b.n	8003ea8 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003eda:	884b      	ldrh	r3, [r1, #2]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f47f af0e 	bne.w	8003cfe <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003ee2:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 8003ee6:	e733      	b.n	8003d50 <USBD_StdDevReq+0x94>
  switch (pdev->dev_state)
 8003ee8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003eec:	3b01      	subs	r3, #1
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	f63f af4c 	bhi.w	8003d8c <USBD_StdDevReq+0xd0>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8003ef4:	884b      	ldrh	r3, [r1, #2]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	f47f af01 	bne.w	8003cfe <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e7f0      	b.n	8003ee2 <USBD_StdDevReq+0x226>
 8003f00:	200003c8 	.word	0x200003c8

08003f04 <USBD_StdItfReq>:
{
 8003f04:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f06:	780b      	ldrb	r3, [r1, #0]
{
 8003f08:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f0e:	2b20      	cmp	r3, #32
{
 8003f10:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f12:	d002      	beq.n	8003f1a <USBD_StdItfReq+0x16>
 8003f14:	2b40      	cmp	r3, #64	; 0x40
 8003f16:	d000      	beq.n	8003f1a <USBD_StdItfReq+0x16>
 8003f18:	b9b3      	cbnz	r3, 8003f48 <USBD_StdItfReq+0x44>
      switch (pdev->dev_state)
 8003f1a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d810      	bhi.n	8003f46 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003f24:	792b      	ldrb	r3, [r5, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d80d      	bhi.n	8003f46 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003f2a:	f8d4 32b4 	ldr.w	r3, [r4, #692]	; 0x2b4
 8003f2e:	4629      	mov	r1, r5
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	4620      	mov	r0, r4
 8003f34:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003f36:	88eb      	ldrh	r3, [r5, #6]
 8003f38:	b91b      	cbnz	r3, 8003f42 <USBD_StdItfReq+0x3e>
 8003f3a:	b910      	cbnz	r0, 8003f42 <USBD_StdItfReq+0x3e>
              USBD_CtlSendStatus(pdev);
 8003f3c:	4620      	mov	r0, r4
 8003f3e:	f000 f8f6 	bl	800412e <USBD_CtlSendStatus>
}
 8003f42:	2000      	movs	r0, #0
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8003f46:	4620      	mov	r0, r4
      USBD_CtlError(pdev, req);
 8003f48:	f7ff fead 	bl	8003ca6 <USBD_CtlError.constprop.1>
      break;
 8003f4c:	e7f9      	b.n	8003f42 <USBD_StdItfReq+0x3e>

08003f4e <USBD_StdEPReq>:
{
 8003f4e:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f50:	780a      	ldrb	r2, [r1, #0]
{
 8003f52:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f54:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003f58:	2a20      	cmp	r2, #32
{
 8003f5a:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003f5c:	d013      	beq.n	8003f86 <USBD_StdEPReq+0x38>
 8003f5e:	2a40      	cmp	r2, #64	; 0x40
 8003f60:	d011      	beq.n	8003f86 <USBD_StdEPReq+0x38>
 8003f62:	b96a      	cbnz	r2, 8003f80 <USBD_StdEPReq+0x32>
      switch (req->bRequest)
 8003f64:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8003f66:	888a      	ldrh	r2, [r1, #4]
      switch (req->bRequest)
 8003f68:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8003f6a:	b2d1      	uxtb	r1, r2
      switch (req->bRequest)
 8003f6c:	d01f      	beq.n	8003fae <USBD_StdEPReq+0x60>
 8003f6e:	d335      	bcc.n	8003fdc <USBD_StdEPReq+0x8e>
 8003f70:	2d03      	cmp	r5, #3
 8003f72:	d105      	bne.n	8003f80 <USBD_StdEPReq+0x32>
          switch (pdev->dev_state)
 8003f74:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003f78:	2a02      	cmp	r2, #2
 8003f7a:	d026      	beq.n	8003fca <USBD_StdEPReq+0x7c>
 8003f7c:	2a03      	cmp	r2, #3
 8003f7e:	d00a      	beq.n	8003f96 <USBD_StdEPReq+0x48>
      USBD_CtlError(pdev, req);
 8003f80:	f7ff fe91 	bl	8003ca6 <USBD_CtlError.constprop.1>
      break;
 8003f84:	e005      	b.n	8003f92 <USBD_StdEPReq+0x44>
      pdev->pClass->Setup(pdev, req);
 8003f86:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	4620      	mov	r0, r4
 8003f90:	4790      	blx	r2
}
 8003f92:	2000      	movs	r0, #0
 8003f94:	bd38      	pop	{r3, r4, r5, pc}
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003f96:	885a      	ldrh	r2, [r3, #2]
 8003f98:	b92a      	cbnz	r2, 8003fa6 <USBD_StdEPReq+0x58>
                if ((ep_addr != 0x00U) &&
 8003f9a:	064a      	lsls	r2, r1, #25
 8003f9c:	d003      	beq.n	8003fa6 <USBD_StdEPReq+0x58>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8003f9e:	88db      	ldrh	r3, [r3, #6]
 8003fa0:	b90b      	cbnz	r3, 8003fa6 <USBD_StdEPReq+0x58>
                  USBD_LL_StallEP(pdev, ep_addr);
 8003fa2:	f7fc fcbb 	bl	800091c <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	f000 f8c1 	bl	800412e <USBD_CtlSendStatus>
              break;
 8003fac:	e7f1      	b.n	8003f92 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8003fae:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8003fb2:	2a02      	cmp	r2, #2
 8003fb4:	d009      	beq.n	8003fca <USBD_StdEPReq+0x7c>
 8003fb6:	2a03      	cmp	r2, #3
 8003fb8:	d1e2      	bne.n	8003f80 <USBD_StdEPReq+0x32>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8003fba:	885b      	ldrh	r3, [r3, #2]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1e8      	bne.n	8003f92 <USBD_StdEPReq+0x44>
                if ((ep_addr & 0x7FU) != 0x00U)
 8003fc0:	064d      	lsls	r5, r1, #25
 8003fc2:	d0f0      	beq.n	8003fa6 <USBD_StdEPReq+0x58>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8003fc4:	f7fc fcb8 	bl	8000938 <USBD_LL_ClearStallEP>
 8003fc8:	e7ed      	b.n	8003fa6 <USBD_StdEPReq+0x58>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8003fca:	064b      	lsls	r3, r1, #25
 8003fcc:	d016      	beq.n	8003ffc <USBD_StdEPReq+0xae>
                USBD_LL_StallEP(pdev, ep_addr);
 8003fce:	f7fc fca5 	bl	800091c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f7fc fca1 	bl	800091c <USBD_LL_StallEP>
 8003fda:	e7da      	b.n	8003f92 <USBD_StdEPReq+0x44>
          switch (pdev->dev_state)
 8003fdc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d00d      	beq.n	8004000 <USBD_StdEPReq+0xb2>
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d1cb      	bne.n	8003f80 <USBD_StdEPReq+0x32>
 8003fe8:	2314      	movs	r3, #20
              if ((ep_addr & 0x80U) == 0x80U)
 8003fea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003fee:	f001 020f 	and.w	r2, r1, #15
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003ff2:	fb03 0202 	mla	r2, r3, r2, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8003ff6:	d014      	beq.n	8004022 <USBD_StdEPReq+0xd4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8003ff8:	6992      	ldr	r2, [r2, #24]
 8003ffa:	b9ea      	cbnz	r2, 8004038 <USBD_StdEPReq+0xea>
                USBD_CtlError(pdev, req);
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	e7bf      	b.n	8003f80 <USBD_StdEPReq+0x32>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004000:	0649      	lsls	r1, r1, #25
 8004002:	d1fb      	bne.n	8003ffc <USBD_StdEPReq+0xae>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004004:	0613      	lsls	r3, r2, #24
              pep->status = 0x0000U;
 8004006:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800400a:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800400e:	bf4c      	ite	mi
 8004010:	f100 0114 	addmi.w	r1, r0, #20
 8004014:	f500 71aa 	addpl.w	r1, r0, #340	; 0x154
              pep->status = 0x0000U;
 8004018:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800401a:	4620      	mov	r0, r4
 800401c:	f000 f85b 	bl	80040d6 <USBD_CtlSendData>
              break;
 8004020:	e7b7      	b.n	8003f92 <USBD_StdEPReq+0x44>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004022:	f8d2 2158 	ldr.w	r2, [r2, #344]	; 0x158
 8004026:	2a00      	cmp	r2, #0
 8004028:	d0e8      	beq.n	8003ffc <USBD_StdEPReq+0xae>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800402a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800402e:	fb03 0505 	mla	r5, r3, r5, r0
 8004032:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 8004036:	e004      	b.n	8004042 <USBD_StdEPReq+0xf4>
 8004038:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800403c:	fb05 3503 	mla	r5, r5, r3, r3
 8004040:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004042:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8004046:	d103      	bne.n	8004050 <USBD_StdEPReq+0x102>
                pep->status = 0x0001U;
 8004048:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800404a:	2202      	movs	r2, #2
 800404c:	4629      	mov	r1, r5
 800404e:	e7e4      	b.n	800401a <USBD_StdEPReq+0xcc>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004050:	4620      	mov	r0, r4
 8004052:	f7fc fc7f 	bl	8000954 <USBD_LL_IsStallEP>
 8004056:	b108      	cbz	r0, 800405c <USBD_StdEPReq+0x10e>
                pep->status = 0x0001U;
 8004058:	2301      	movs	r3, #1
 800405a:	e7f5      	b.n	8004048 <USBD_StdEPReq+0xfa>
                pep->status = 0x0000U;
 800405c:	6028      	str	r0, [r5, #0]
 800405e:	e7f4      	b.n	800404a <USBD_StdEPReq+0xfc>

08004060 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8004060:	780b      	ldrb	r3, [r1, #0]
 8004062:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8004064:	784b      	ldrb	r3, [r1, #1]
 8004066:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8004068:	78ca      	ldrb	r2, [r1, #3]
 800406a:	788b      	ldrb	r3, [r1, #2]
 800406c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004070:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8004072:	794a      	ldrb	r2, [r1, #5]
 8004074:	790b      	ldrb	r3, [r1, #4]
 8004076:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800407a:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800407c:	79ca      	ldrb	r2, [r1, #7]
 800407e:	798b      	ldrb	r3, [r1, #6]
 8004080:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004084:	80c3      	strh	r3, [r0, #6]
 8004086:	4770      	bx	lr

08004088 <USBD_CtlError>:
{
 8004088:	b510      	push	{r4, lr}
 800408a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 800408c:	2180      	movs	r1, #128	; 0x80
 800408e:	f7fc fc45 	bl	800091c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8004092:	4620      	mov	r0, r4
}
 8004094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8004098:	2100      	movs	r1, #0
 800409a:	f7fc bc3f 	b.w	800091c <USBD_LL_StallEP>

0800409e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800409e:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 80040a0:	b188      	cbz	r0, 80040c6 <USBD_GetString+0x28>
 80040a2:	4605      	mov	r5, r0
 80040a4:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80040a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2c00      	cmp	r4, #0
 80040ae:	d1f9      	bne.n	80040a4 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80040b0:	3301      	adds	r3, #1
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80040b6:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80040b8:	2303      	movs	r3, #3
 80040ba:	704b      	strb	r3, [r1, #1]
 80040bc:	2302      	movs	r3, #2
 80040be:	3801      	subs	r0, #1
    while (*desc != '\0')
 80040c0:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80040c4:	b905      	cbnz	r5, 80040c8 <USBD_GetString+0x2a>
 80040c6:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	54cd      	strb	r5, [r1, r3]
 80040cc:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 80040ce:	3302      	adds	r3, #2
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	548c      	strb	r4, [r1, r2]
 80040d4:	e7f4      	b.n	80040c0 <USBD_GetString+0x22>

080040d6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80040d6:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80040d8:	2202      	movs	r2, #2
{
 80040da:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80040dc:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80040e0:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80040e2:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80040e4:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80040e6:	2100      	movs	r1, #0
 80040e8:	f7fc fc52 	bl	8000990 <USBD_LL_Transmit>

  return USBD_OK;
}
 80040ec:	2000      	movs	r0, #0
 80040ee:	bd10      	pop	{r4, pc}

080040f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80040f0:	b508      	push	{r3, lr}
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80040f2:	4613      	mov	r3, r2
 80040f4:	460a      	mov	r2, r1
 80040f6:	2100      	movs	r1, #0
 80040f8:	f7fc fc4a 	bl	8000990 <USBD_LL_Transmit>

  return USBD_OK;
}
 80040fc:	2000      	movs	r0, #0
 80040fe:	bd08      	pop	{r3, pc}

08004100 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8004100:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004102:	2203      	movs	r2, #3
{
 8004104:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8004106:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800410a:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800410e:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8004110:	f8c0 3160 	str.w	r3, [r0, #352]	; 0x160
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004114:	2100      	movs	r1, #0
 8004116:	f7fc fc49 	bl	80009ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800411a:	2000      	movs	r0, #0
 800411c:	bd10      	pop	{r4, pc}

0800411e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800411e:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004120:	4613      	mov	r3, r2
 8004122:	460a      	mov	r2, r1
 8004124:	2100      	movs	r1, #0
 8004126:	f7fc fc41 	bl	80009ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800412a:	2000      	movs	r0, #0
 800412c:	bd08      	pop	{r3, pc}

0800412e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800412e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004130:	2304      	movs	r3, #4
 8004132:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004136:	2300      	movs	r3, #0
 8004138:	461a      	mov	r2, r3
 800413a:	4619      	mov	r1, r3
 800413c:	f7fc fc28 	bl	8000990 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004140:	2000      	movs	r0, #0
 8004142:	bd08      	pop	{r3, pc}

08004144 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004144:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004146:	2305      	movs	r3, #5
 8004148:	f8c0 3294 	str.w	r3, [r0, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800414c:	2300      	movs	r3, #0
 800414e:	461a      	mov	r2, r3
 8004150:	4619      	mov	r1, r3
 8004152:	f7fc fc2b 	bl	80009ac <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004156:	2000      	movs	r0, #0
 8004158:	bd08      	pop	{r3, pc}
	...

0800415c <__libc_init_array>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	2500      	movs	r5, #0
 8004160:	4e0c      	ldr	r6, [pc, #48]	; (8004194 <__libc_init_array+0x38>)
 8004162:	4c0d      	ldr	r4, [pc, #52]	; (8004198 <__libc_init_array+0x3c>)
 8004164:	1ba4      	subs	r4, r4, r6
 8004166:	10a4      	asrs	r4, r4, #2
 8004168:	42a5      	cmp	r5, r4
 800416a:	d109      	bne.n	8004180 <__libc_init_array+0x24>
 800416c:	f000 f822 	bl	80041b4 <_init>
 8004170:	2500      	movs	r5, #0
 8004172:	4e0a      	ldr	r6, [pc, #40]	; (800419c <__libc_init_array+0x40>)
 8004174:	4c0a      	ldr	r4, [pc, #40]	; (80041a0 <__libc_init_array+0x44>)
 8004176:	1ba4      	subs	r4, r4, r6
 8004178:	10a4      	asrs	r4, r4, #2
 800417a:	42a5      	cmp	r5, r4
 800417c:	d105      	bne.n	800418a <__libc_init_array+0x2e>
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004184:	4798      	blx	r3
 8004186:	3501      	adds	r5, #1
 8004188:	e7ee      	b.n	8004168 <__libc_init_array+0xc>
 800418a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800418e:	4798      	blx	r3
 8004190:	3501      	adds	r5, #1
 8004192:	e7f2      	b.n	800417a <__libc_init_array+0x1e>
 8004194:	08004250 	.word	0x08004250
 8004198:	08004250 	.word	0x08004250
 800419c:	08004250 	.word	0x08004250
 80041a0:	08004254 	.word	0x08004254

080041a4 <memset>:
 80041a4:	4603      	mov	r3, r0
 80041a6:	4402      	add	r2, r0
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d100      	bne.n	80041ae <memset+0xa>
 80041ac:	4770      	bx	lr
 80041ae:	f803 1b01 	strb.w	r1, [r3], #1
 80041b2:	e7f9      	b.n	80041a8 <memset+0x4>

080041b4 <_init>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr

080041c0 <_fini>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr
